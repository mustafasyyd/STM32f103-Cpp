
FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080041e8  080041e8  000141e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042bc  080042bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080042bc  080042bc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042bc  080042bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080042c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019bc  20000010  080042d4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019cc  080042d4  000219cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011654  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d8d  00000000  00000000  000316d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  00034460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d06  00000000  00000000  00035550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000187da  00000000  00000000  00036256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012139  00000000  00000000  0004ea30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000910e3  00000000  00000000  00060b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045b8  00000000  00000000  000f1c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f6204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080041d0 	.word	0x080041d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080041d0 	.word	0x080041d0

08000150 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000154:	bf00      	nop
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr

0800015c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 8000160:	4a0c      	ldr	r2, [pc, #48]	; (8000194 <MX_FREERTOS_Init+0x38>)
 8000162:	2100      	movs	r1, #0
 8000164:	480c      	ldr	r0, [pc, #48]	; (8000198 <MX_FREERTOS_Init+0x3c>)
 8000166:	f001 fb87 	bl	8001878 <osThreadNew>
 800016a:	4603      	mov	r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <MX_FREERTOS_Init+0x40>)
 800016e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000170:	4a0b      	ldr	r2, [pc, #44]	; (80001a0 <MX_FREERTOS_Init+0x44>)
 8000172:	2100      	movs	r1, #0
 8000174:	480b      	ldr	r0, [pc, #44]	; (80001a4 <MX_FREERTOS_Init+0x48>)
 8000176:	f001 fb7f 	bl	8001878 <osThreadNew>
 800017a:	4603      	mov	r3, r0
 800017c:	4a0a      	ldr	r2, [pc, #40]	; (80001a8 <MX_FREERTOS_Init+0x4c>)
 800017e:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000180:	4a0a      	ldr	r2, [pc, #40]	; (80001ac <MX_FREERTOS_Init+0x50>)
 8000182:	2100      	movs	r1, #0
 8000184:	480a      	ldr	r0, [pc, #40]	; (80001b0 <MX_FREERTOS_Init+0x54>)
 8000186:	f001 fb77 	bl	8001878 <osThreadNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a09      	ldr	r2, [pc, #36]	; (80001b4 <MX_FREERTOS_Init+0x58>)
 800018e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000190:	bf00      	nop
 8000192:	bd80      	pop	{r7, pc}
 8000194:	08004224 	.word	0x08004224
 8000198:	080001b9 	.word	0x080001b9
 800019c:	2000002c 	.word	0x2000002c
 80001a0:	08004248 	.word	0x08004248
 80001a4:	080001f1 	.word	0x080001f1
 80001a8:	20000030 	.word	0x20000030
 80001ac:	0800426c 	.word	0x0800426c
 80001b0:	08000229 	.word	0x08000229
 80001b4:	20000034 	.word	0x20000034

080001b8 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80001c0:	2201      	movs	r2, #1
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4809      	ldr	r0, [pc, #36]	; (80001ec <StartTask01+0x34>)
 80001c8:	f000 fc62 	bl	8000a90 <HAL_GPIO_WritePin>
    osDelay(500);
 80001cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001d0:	f001 fbfc 	bl	80019cc <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001da:	4804      	ldr	r0, [pc, #16]	; (80001ec <StartTask01+0x34>)
 80001dc:	f000 fc58 	bl	8000a90 <HAL_GPIO_WritePin>
    osDelay(500);
 80001e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e4:	f001 fbf2 	bl	80019cc <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80001e8:	e7ea      	b.n	80001c0 <StartTask01+0x8>
 80001ea:	bf00      	nop
 80001ec:	40011000 	.word	0x40011000

080001f0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001fe:	4809      	ldr	r0, [pc, #36]	; (8000224 <StartTask02+0x34>)
 8000200:	f000 fc46 	bl	8000a90 <HAL_GPIO_WritePin>
    osDelay(500);
 8000204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000208:	f001 fbe0 	bl	80019cc <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000212:	4804      	ldr	r0, [pc, #16]	; (8000224 <StartTask02+0x34>)
 8000214:	f000 fc3c 	bl	8000a90 <HAL_GPIO_WritePin>
    osDelay(500);
 8000218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800021c:	f001 fbd6 	bl	80019cc <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000220:	e7ea      	b.n	80001f8 <StartTask02+0x8>
 8000222:	bf00      	nop
 8000224:	40011000 	.word	0x40011000

08000228 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000236:	4809      	ldr	r0, [pc, #36]	; (800025c <StartTask03+0x34>)
 8000238:	f000 fc2a 	bl	8000a90 <HAL_GPIO_WritePin>
	  osDelay(500);
 800023c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000240:	f001 fbc4 	bl	80019cc <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800024a:	4804      	ldr	r0, [pc, #16]	; (800025c <StartTask03+0x34>)
 800024c:	f000 fc20 	bl	8000a90 <HAL_GPIO_WritePin>
	  osDelay(500);
 8000250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000254:	f001 fbba 	bl	80019cc <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000258:	e7ea      	b.n	8000230 <StartTask03+0x8>
 800025a:	bf00      	nop
 800025c:	40011000 	.word	0x40011000

08000260 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	f107 0308 	add.w	r3, r7, #8
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <MX_GPIO_Init+0x60>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <MX_GPIO_Init+0x60>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <MX_GPIO_Init+0x60>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0310 	and.w	r3, r3, #16
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000292:	480c      	ldr	r0, [pc, #48]	; (80002c4 <MX_GPIO_Init+0x64>)
 8000294:	f000 fbfc 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000298:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800029c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029e:	2301      	movs	r3, #1
 80002a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a6:	2302      	movs	r3, #2
 80002a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	4619      	mov	r1, r3
 80002b0:	4804      	ldr	r0, [pc, #16]	; (80002c4 <MX_GPIO_Init+0x64>)
 80002b2:	f000 fa69 	bl	8000788 <HAL_GPIO_Init>

}
 80002b6:	bf00      	nop
 80002b8:	3718      	adds	r7, #24
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40011000 	.word	0x40011000

080002c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002cc:	f000 f94a 	bl	8000564 <HAL_Init>


  /* Configure the system clock */
  SystemClock_Config();
 80002d0:	f000 f809 	bl	80002e6 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d4:	f7ff ffc4 	bl	8000260 <MX_GPIO_Init>

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80002d8:	f001 fa68 	bl	80017ac <osKernelInitialize>
  MX_FREERTOS_Init();
 80002dc:	f7ff ff3e 	bl	800015c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80002e0:	f001 fa96 	bl	8001810 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e4:	e7fe      	b.n	80002e4 <main+0x1c>

080002e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e6:	b580      	push	{r7, lr}
 80002e8:	b090      	sub	sp, #64	; 0x40
 80002ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ec:	f107 0318 	add.w	r3, r7, #24
 80002f0:	2228      	movs	r2, #40	; 0x28
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f003 ff31 	bl	800415c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000308:	2302      	movs	r3, #2
 800030a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	2301      	movs	r3, #1
 800030e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000310:	2310      	movs	r3, #16
 8000312:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000314:	2300      	movs	r3, #0
 8000316:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f107 0318 	add.w	r3, r7, #24
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fbcf 	bl	8000ac0 <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000328:	f000 f827 	bl	800037a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000330:	2300      	movs	r3, #0
 8000332:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2100      	movs	r1, #0
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fe3d 	bl	8000fc4 <HAL_RCC_ClockConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000350:	f000 f813 	bl	800037a <Error_Handler>
  }
}
 8000354:	bf00      	nop
 8000356:	3740      	adds	r7, #64	; 0x40
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800036c:	d101      	bne.n	8000372 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800036e:	f000 f90f 	bl	8000590 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800037e:	b672      	cpsid	i
}
 8000380:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000382:	e7fe      	b.n	8000382 <Error_Handler+0x8>

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <HAL_MspInit+0x4c>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a10      	ldr	r2, [pc, #64]	; (80003d0 <HAL_MspInit+0x4c>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <HAL_MspInit+0x4c>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <HAL_MspInit+0x4c>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <HAL_MspInit+0x4c>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ac:	61d3      	str	r3, [r2, #28]
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <HAL_MspInit+0x4c>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	210f      	movs	r1, #15
 80003be:	f06f 0001 	mvn.w	r0, #1
 80003c2:	f000 f9b6 	bl	8000732 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000

080003d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08e      	sub	sp, #56	; 0x38
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80003dc:	2300      	movs	r3, #0
 80003de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80003e0:	2300      	movs	r3, #0
 80003e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80003e4:	2300      	movs	r3, #0
 80003e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80003ea:	4b34      	ldr	r3, [pc, #208]	; (80004bc <HAL_InitTick+0xe8>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	4a33      	ldr	r2, [pc, #204]	; (80004bc <HAL_InitTick+0xe8>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	61d3      	str	r3, [r2, #28]
 80003f6:	4b31      	ldr	r3, [pc, #196]	; (80004bc <HAL_InitTick+0xe8>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000402:	f107 0210 	add.w	r2, r7, #16
 8000406:	f107 0314 	add.w	r3, r7, #20
 800040a:	4611      	mov	r1, r2
 800040c:	4618      	mov	r0, r3
 800040e:	f000 ff35 	bl	800127c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000412:	6a3b      	ldr	r3, [r7, #32]
 8000414:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000418:	2b00      	cmp	r3, #0
 800041a:	d103      	bne.n	8000424 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800041c:	f000 ff1a 	bl	8001254 <HAL_RCC_GetPCLK1Freq>
 8000420:	6378      	str	r0, [r7, #52]	; 0x34
 8000422:	e004      	b.n	800042e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000424:	f000 ff16 	bl	8001254 <HAL_RCC_GetPCLK1Freq>
 8000428:	4603      	mov	r3, r0
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800042e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000430:	4a23      	ldr	r2, [pc, #140]	; (80004c0 <HAL_InitTick+0xec>)
 8000432:	fba2 2303 	umull	r2, r3, r2, r3
 8000436:	0c9b      	lsrs	r3, r3, #18
 8000438:	3b01      	subs	r3, #1
 800043a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800043c:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <HAL_InitTick+0xf0>)
 800043e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000442:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <HAL_InitTick+0xf0>)
 8000446:	f240 32e7 	movw	r2, #999	; 0x3e7
 800044a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800044c:	4a1d      	ldr	r2, [pc, #116]	; (80004c4 <HAL_InitTick+0xf0>)
 800044e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000450:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000452:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <HAL_InitTick+0xf0>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000458:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <HAL_InitTick+0xf0>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045e:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <HAL_InitTick+0xf0>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000464:	4817      	ldr	r0, [pc, #92]	; (80004c4 <HAL_InitTick+0xf0>)
 8000466:	f000 ff57 	bl	8001318 <HAL_TIM_Base_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000470:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000474:	2b00      	cmp	r3, #0
 8000476:	d11b      	bne.n	80004b0 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000478:	4812      	ldr	r0, [pc, #72]	; (80004c4 <HAL_InitTick+0xf0>)
 800047a:	f000 ffa5 	bl	80013c8 <HAL_TIM_Base_Start_IT>
 800047e:	4603      	mov	r3, r0
 8000480:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000484:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000488:	2b00      	cmp	r3, #0
 800048a:	d111      	bne.n	80004b0 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800048c:	201c      	movs	r0, #28
 800048e:	f000 f96c 	bl	800076a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b0f      	cmp	r3, #15
 8000496:	d808      	bhi.n	80004aa <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000498:	2200      	movs	r2, #0
 800049a:	6879      	ldr	r1, [r7, #4]
 800049c:	201c      	movs	r0, #28
 800049e:	f000 f948 	bl	8000732 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004a2:	4a09      	ldr	r2, [pc, #36]	; (80004c8 <HAL_InitTick+0xf4>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6013      	str	r3, [r2, #0]
 80004a8:	e002      	b.n	80004b0 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80004aa:	2301      	movs	r3, #1
 80004ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80004b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3738      	adds	r7, #56	; 0x38
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	431bde83 	.word	0x431bde83
 80004c4:	20000038 	.word	0x20000038
 80004c8:	20000004 	.word	0x20000004

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <NMI_Handler+0x4>

080004d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <HardFault_Handler+0x4>

080004d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <MemManage_Handler+0x4>

080004de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <BusFault_Handler+0x4>

080004e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <UsageFault_Handler+0x4>

080004ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr
	...

080004f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <TIM2_IRQHandler+0x10>)
 80004fe:	f000 ffb5 	bl	800146c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000038 	.word	0x20000038

0800050c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr

08000518 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000518:	f7ff fff8 	bl	800050c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800051e:	490c      	ldr	r1, [pc, #48]	; (8000550 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000520:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000524:	e002      	b.n	800052c <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052a:	3304      	adds	r3, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000530:	d3f9      	bcc.n	8000526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000534:	4c09      	ldr	r4, [pc, #36]	; (800055c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000538:	e001      	b.n	800053e <LoopFillZerobss>

0800053a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800053c:	3204      	adds	r2, #4

0800053e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000540:	d3fb      	bcc.n	800053a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000542:	f003 fe13 	bl	800416c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000546:	f7ff febf 	bl	80002c8 <main>
  bx lr
 800054a:	4770      	bx	lr
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000554:	080042c4 	.word	0x080042c4
  ldr r2, =_sbss
 8000558:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800055c:	200019cc 	.word	0x200019cc

08000560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC1_2_IRQHandler>
	...

08000564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_Init+0x28>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <HAL_Init+0x28>)
 800056e:	f043 0310 	orr.w	r3, r3, #16
 8000572:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000574:	2003      	movs	r0, #3
 8000576:	f000 f8d1 	bl	800071c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800057a:	200f      	movs	r0, #15
 800057c:	f7ff ff2a 	bl	80003d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000580:	f7ff ff00 	bl	8000384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40022000 	.word	0x40022000

08000590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <HAL_IncTick+0x1c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <HAL_IncTick+0x20>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a03      	ldr	r2, [pc, #12]	; (80005b0 <HAL_IncTick+0x20>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20000080 	.word	0x20000080

080005b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <HAL_GetTick+0x10>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	20000080 	.word	0x20000080

080005c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <__NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	2b00      	cmp	r3, #0
 800063c:	db0b      	blt.n	8000656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	f003 021f 	and.w	r2, r3, #31
 8000644:	4906      	ldr	r1, [pc, #24]	; (8000660 <__NVIC_EnableIRQ+0x34>)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	095b      	lsrs	r3, r3, #5
 800064c:	2001      	movs	r0, #1
 800064e:	fa00 f202 	lsl.w	r2, r0, r2
 8000652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	e000e100 	.word	0xe000e100

08000664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	db0a      	blt.n	800068e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	b2da      	uxtb	r2, r3
 800067c:	490c      	ldr	r1, [pc, #48]	; (80006b0 <__NVIC_SetPriority+0x4c>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068c:	e00a      	b.n	80006a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <__NVIC_SetPriority+0x50>)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f003 030f 	and.w	r3, r3, #15
 800069a:	3b04      	subs	r3, #4
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	440b      	add	r3, r1
 80006a2:	761a      	strb	r2, [r3, #24]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000e100 	.word	0xe000e100
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	f1c3 0307 	rsb	r3, r3, #7
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	bf28      	it	cs
 80006d6:	2304      	movcs	r3, #4
 80006d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3304      	adds	r3, #4
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d902      	bls.n	80006e8 <NVIC_EncodePriority+0x30>
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3b03      	subs	r3, #3
 80006e6:	e000      	b.n	80006ea <NVIC_EncodePriority+0x32>
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43da      	mvns	r2, r3
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	401a      	ands	r2, r3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	43d9      	mvns	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	4313      	orrs	r3, r2
         );
}
 8000712:	4618      	mov	r0, r3
 8000714:	3724      	adds	r7, #36	; 0x24
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff4f 	bl	80005c8 <__NVIC_SetPriorityGrouping>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000732:	b580      	push	{r7, lr}
 8000734:	b086      	sub	sp, #24
 8000736:	af00      	add	r7, sp, #0
 8000738:	4603      	mov	r3, r0
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000744:	f7ff ff64 	bl	8000610 <__NVIC_GetPriorityGrouping>
 8000748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	68b9      	ldr	r1, [r7, #8]
 800074e:	6978      	ldr	r0, [r7, #20]
 8000750:	f7ff ffb2 	bl	80006b8 <NVIC_EncodePriority>
 8000754:	4602      	mov	r2, r0
 8000756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff81 	bl	8000664 <__NVIC_SetPriority>
}
 8000762:	bf00      	nop
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff57 	bl	800062c <__NVIC_EnableIRQ>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000788:	b480      	push	{r7}
 800078a:	b08b      	sub	sp, #44	; 0x2c
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800079a:	e169      	b.n	8000a70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800079c:	2201      	movs	r2, #1
 800079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	69fa      	ldr	r2, [r7, #28]
 80007ac:	4013      	ands	r3, r2
 80007ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007b0:	69ba      	ldr	r2, [r7, #24]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	f040 8158 	bne.w	8000a6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	4a9a      	ldr	r2, [pc, #616]	; (8000a28 <HAL_GPIO_Init+0x2a0>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d05e      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007c4:	4a98      	ldr	r2, [pc, #608]	; (8000a28 <HAL_GPIO_Init+0x2a0>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d875      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007ca:	4a98      	ldr	r2, [pc, #608]	; (8000a2c <HAL_GPIO_Init+0x2a4>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d058      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007d0:	4a96      	ldr	r2, [pc, #600]	; (8000a2c <HAL_GPIO_Init+0x2a4>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d86f      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007d6:	4a96      	ldr	r2, [pc, #600]	; (8000a30 <HAL_GPIO_Init+0x2a8>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d052      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007dc:	4a94      	ldr	r2, [pc, #592]	; (8000a30 <HAL_GPIO_Init+0x2a8>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d869      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007e2:	4a94      	ldr	r2, [pc, #592]	; (8000a34 <HAL_GPIO_Init+0x2ac>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d04c      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007e8:	4a92      	ldr	r2, [pc, #584]	; (8000a34 <HAL_GPIO_Init+0x2ac>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d863      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007ee:	4a92      	ldr	r2, [pc, #584]	; (8000a38 <HAL_GPIO_Init+0x2b0>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d046      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007f4:	4a90      	ldr	r2, [pc, #576]	; (8000a38 <HAL_GPIO_Init+0x2b0>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d85d      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007fa:	2b12      	cmp	r3, #18
 80007fc:	d82a      	bhi.n	8000854 <HAL_GPIO_Init+0xcc>
 80007fe:	2b12      	cmp	r3, #18
 8000800:	d859      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 8000802:	a201      	add	r2, pc, #4	; (adr r2, 8000808 <HAL_GPIO_Init+0x80>)
 8000804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000808:	08000883 	.word	0x08000883
 800080c:	0800085d 	.word	0x0800085d
 8000810:	0800086f 	.word	0x0800086f
 8000814:	080008b1 	.word	0x080008b1
 8000818:	080008b7 	.word	0x080008b7
 800081c:	080008b7 	.word	0x080008b7
 8000820:	080008b7 	.word	0x080008b7
 8000824:	080008b7 	.word	0x080008b7
 8000828:	080008b7 	.word	0x080008b7
 800082c:	080008b7 	.word	0x080008b7
 8000830:	080008b7 	.word	0x080008b7
 8000834:	080008b7 	.word	0x080008b7
 8000838:	080008b7 	.word	0x080008b7
 800083c:	080008b7 	.word	0x080008b7
 8000840:	080008b7 	.word	0x080008b7
 8000844:	080008b7 	.word	0x080008b7
 8000848:	080008b7 	.word	0x080008b7
 800084c:	08000865 	.word	0x08000865
 8000850:	08000879 	.word	0x08000879
 8000854:	4a79      	ldr	r2, [pc, #484]	; (8000a3c <HAL_GPIO_Init+0x2b4>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d013      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800085a:	e02c      	b.n	80008b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	623b      	str	r3, [r7, #32]
          break;
 8000862:	e029      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	3304      	adds	r3, #4
 800086a:	623b      	str	r3, [r7, #32]
          break;
 800086c:	e024      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	3308      	adds	r3, #8
 8000874:	623b      	str	r3, [r7, #32]
          break;
 8000876:	e01f      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	330c      	adds	r3, #12
 800087e:	623b      	str	r3, [r7, #32]
          break;
 8000880:	e01a      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d102      	bne.n	8000890 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800088a:	2304      	movs	r3, #4
 800088c:	623b      	str	r3, [r7, #32]
          break;
 800088e:	e013      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d105      	bne.n	80008a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000898:	2308      	movs	r3, #8
 800089a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	69fa      	ldr	r2, [r7, #28]
 80008a0:	611a      	str	r2, [r3, #16]
          break;
 80008a2:	e009      	b.n	80008b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a4:	2308      	movs	r3, #8
 80008a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69fa      	ldr	r2, [r7, #28]
 80008ac:	615a      	str	r2, [r3, #20]
          break;
 80008ae:	e003      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
          break;
 80008b4:	e000      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          break;
 80008b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	2bff      	cmp	r3, #255	; 0xff
 80008bc:	d801      	bhi.n	80008c2 <HAL_GPIO_Init+0x13a>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	e001      	b.n	80008c6 <HAL_GPIO_Init+0x13e>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3304      	adds	r3, #4
 80008c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2bff      	cmp	r3, #255	; 0xff
 80008cc:	d802      	bhi.n	80008d4 <HAL_GPIO_Init+0x14c>
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	e002      	b.n	80008da <HAL_GPIO_Init+0x152>
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	3b08      	subs	r3, #8
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	210f      	movs	r1, #15
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	fa01 f303 	lsl.w	r3, r1, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	401a      	ands	r2, r3
 80008ec:	6a39      	ldr	r1, [r7, #32]
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	431a      	orrs	r2, r3
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	2b00      	cmp	r3, #0
 8000904:	f000 80b1 	beq.w	8000a6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000908:	4b4d      	ldr	r3, [pc, #308]	; (8000a40 <HAL_GPIO_Init+0x2b8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a4c      	ldr	r2, [pc, #304]	; (8000a40 <HAL_GPIO_Init+0x2b8>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b4a      	ldr	r3, [pc, #296]	; (8000a40 <HAL_GPIO_Init+0x2b8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000920:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <HAL_GPIO_Init+0x2bc>)
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000924:	089b      	lsrs	r3, r3, #2
 8000926:	3302      	adds	r3, #2
 8000928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	220f      	movs	r2, #15
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a40      	ldr	r2, [pc, #256]	; (8000a48 <HAL_GPIO_Init+0x2c0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d013      	beq.n	8000974 <HAL_GPIO_Init+0x1ec>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a3f      	ldr	r2, [pc, #252]	; (8000a4c <HAL_GPIO_Init+0x2c4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d00d      	beq.n	8000970 <HAL_GPIO_Init+0x1e8>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a3e      	ldr	r2, [pc, #248]	; (8000a50 <HAL_GPIO_Init+0x2c8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d007      	beq.n	800096c <HAL_GPIO_Init+0x1e4>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a3d      	ldr	r2, [pc, #244]	; (8000a54 <HAL_GPIO_Init+0x2cc>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d101      	bne.n	8000968 <HAL_GPIO_Init+0x1e0>
 8000964:	2303      	movs	r3, #3
 8000966:	e006      	b.n	8000976 <HAL_GPIO_Init+0x1ee>
 8000968:	2304      	movs	r3, #4
 800096a:	e004      	b.n	8000976 <HAL_GPIO_Init+0x1ee>
 800096c:	2302      	movs	r3, #2
 800096e:	e002      	b.n	8000976 <HAL_GPIO_Init+0x1ee>
 8000970:	2301      	movs	r3, #1
 8000972:	e000      	b.n	8000976 <HAL_GPIO_Init+0x1ee>
 8000974:	2300      	movs	r3, #0
 8000976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000978:	f002 0203 	and.w	r2, r2, #3
 800097c:	0092      	lsls	r2, r2, #2
 800097e:	4093      	lsls	r3, r2
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	4313      	orrs	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000986:	492f      	ldr	r1, [pc, #188]	; (8000a44 <HAL_GPIO_Init+0x2bc>)
 8000988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	3302      	adds	r3, #2
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d006      	beq.n	80009ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009a2:	689a      	ldr	r2, [r3, #8]
 80009a4:	492c      	ldr	r1, [pc, #176]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	608b      	str	r3, [r1, #8]
 80009ac:	e006      	b.n	80009bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	43db      	mvns	r3, r3
 80009b6:	4928      	ldr	r1, [pc, #160]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009b8:	4013      	ands	r3, r2
 80009ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d006      	beq.n	80009d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009c8:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	4922      	ldr	r1, [pc, #136]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	60cb      	str	r3, [r1, #12]
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009d8:	68da      	ldr	r2, [r3, #12]
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	43db      	mvns	r3, r3
 80009de:	491e      	ldr	r1, [pc, #120]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009e0:	4013      	ands	r3, r2
 80009e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d006      	beq.n	80009fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	4918      	ldr	r1, [pc, #96]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	604b      	str	r3, [r1, #4]
 80009fc:	e006      	b.n	8000a0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	43db      	mvns	r3, r3
 8000a06:	4914      	ldr	r1, [pc, #80]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 8000a08:	4013      	ands	r3, r2
 8000a0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d021      	beq.n	8000a5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	490e      	ldr	r1, [pc, #56]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	600b      	str	r3, [r1, #0]
 8000a24:	e021      	b.n	8000a6a <HAL_GPIO_Init+0x2e2>
 8000a26:	bf00      	nop
 8000a28:	10320000 	.word	0x10320000
 8000a2c:	10310000 	.word	0x10310000
 8000a30:	10220000 	.word	0x10220000
 8000a34:	10210000 	.word	0x10210000
 8000a38:	10120000 	.word	0x10120000
 8000a3c:	10110000 	.word	0x10110000
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010000 	.word	0x40010000
 8000a48:	40010800 	.word	0x40010800
 8000a4c:	40010c00 	.word	0x40010c00
 8000a50:	40011000 	.word	0x40011000
 8000a54:	40011400 	.word	0x40011400
 8000a58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_GPIO_Init+0x304>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	4909      	ldr	r1, [pc, #36]	; (8000a8c <HAL_GPIO_Init+0x304>)
 8000a66:	4013      	ands	r3, r2
 8000a68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	fa22 f303 	lsr.w	r3, r2, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f47f ae8e 	bne.w	800079c <HAL_GPIO_Init+0x14>
  }
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	372c      	adds	r7, #44	; 0x2c
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	40010400 	.word	0x40010400

08000a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000aa0:	787b      	ldrb	r3, [r7, #1]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aa6:	887a      	ldrh	r2, [r7, #2]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000aac:	e003      	b.n	8000ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	041a      	lsls	r2, r3, #16
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	611a      	str	r2, [r3, #16]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e272      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 8087 	beq.w	8000bee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ae0:	4b92      	ldr	r3, [pc, #584]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 030c 	and.w	r3, r3, #12
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d00c      	beq.n	8000b06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aec:	4b8f      	ldr	r3, [pc, #572]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 030c 	and.w	r3, r3, #12
 8000af4:	2b08      	cmp	r3, #8
 8000af6:	d112      	bne.n	8000b1e <HAL_RCC_OscConfig+0x5e>
 8000af8:	4b8c      	ldr	r3, [pc, #560]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b04:	d10b      	bne.n	8000b1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b06:	4b89      	ldr	r3, [pc, #548]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d06c      	beq.n	8000bec <HAL_RCC_OscConfig+0x12c>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d168      	bne.n	8000bec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e24c      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b26:	d106      	bne.n	8000b36 <HAL_RCC_OscConfig+0x76>
 8000b28:	4b80      	ldr	r3, [pc, #512]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a7f      	ldr	r2, [pc, #508]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	e02e      	b.n	8000b94 <HAL_RCC_OscConfig+0xd4>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10c      	bne.n	8000b58 <HAL_RCC_OscConfig+0x98>
 8000b3e:	4b7b      	ldr	r3, [pc, #492]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a7a      	ldr	r2, [pc, #488]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	4b78      	ldr	r3, [pc, #480]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a77      	ldr	r2, [pc, #476]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e01d      	b.n	8000b94 <HAL_RCC_OscConfig+0xd4>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b60:	d10c      	bne.n	8000b7c <HAL_RCC_OscConfig+0xbc>
 8000b62:	4b72      	ldr	r3, [pc, #456]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a71      	ldr	r2, [pc, #452]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	4b6f      	ldr	r3, [pc, #444]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a6e      	ldr	r2, [pc, #440]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	e00b      	b.n	8000b94 <HAL_RCC_OscConfig+0xd4>
 8000b7c:	4b6b      	ldr	r3, [pc, #428]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a6a      	ldr	r2, [pc, #424]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	4b68      	ldr	r3, [pc, #416]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a67      	ldr	r2, [pc, #412]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d013      	beq.n	8000bc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b9c:	f7ff fd0a 	bl	80005b4 <HAL_GetTick>
 8000ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba2:	e008      	b.n	8000bb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ba4:	f7ff fd06 	bl	80005b4 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2b64      	cmp	r3, #100	; 0x64
 8000bb0:	d901      	bls.n	8000bb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e200      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb6:	4b5d      	ldr	r3, [pc, #372]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f0      	beq.n	8000ba4 <HAL_RCC_OscConfig+0xe4>
 8000bc2:	e014      	b.n	8000bee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc4:	f7ff fcf6 	bl	80005b4 <HAL_GetTick>
 8000bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bca:	e008      	b.n	8000bde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bcc:	f7ff fcf2 	bl	80005b4 <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	2b64      	cmp	r3, #100	; 0x64
 8000bd8:	d901      	bls.n	8000bde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e1ec      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bde:	4b53      	ldr	r3, [pc, #332]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f0      	bne.n	8000bcc <HAL_RCC_OscConfig+0x10c>
 8000bea:	e000      	b.n	8000bee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d063      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bfa:	4b4c      	ldr	r3, [pc, #304]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00b      	beq.n	8000c1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c06:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 030c 	and.w	r3, r3, #12
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d11c      	bne.n	8000c4c <HAL_RCC_OscConfig+0x18c>
 8000c12:	4b46      	ldr	r3, [pc, #280]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d116      	bne.n	8000c4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c1e:	4b43      	ldr	r3, [pc, #268]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d005      	beq.n	8000c36 <HAL_RCC_OscConfig+0x176>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d001      	beq.n	8000c36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e1c0      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c36:	4b3d      	ldr	r3, [pc, #244]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	4939      	ldr	r1, [pc, #228]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4a:	e03a      	b.n	8000cc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d020      	beq.n	8000c96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c54:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <HAL_RCC_OscConfig+0x270>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5a:	f7ff fcab 	bl	80005b4 <HAL_GetTick>
 8000c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c60:	e008      	b.n	8000c74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c62:	f7ff fca7 	bl	80005b4 <HAL_GetTick>
 8000c66:	4602      	mov	r2, r0
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d901      	bls.n	8000c74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c70:	2303      	movs	r3, #3
 8000c72:	e1a1      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c74:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0f0      	beq.n	8000c62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c80:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	4927      	ldr	r1, [pc, #156]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000c90:	4313      	orrs	r3, r2
 8000c92:	600b      	str	r3, [r1, #0]
 8000c94:	e015      	b.n	8000cc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <HAL_RCC_OscConfig+0x270>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fc8a 	bl	80005b4 <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ca4:	f7ff fc86 	bl	80005b4 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e180      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f0      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d03a      	beq.n	8000d44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d019      	beq.n	8000d0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_RCC_OscConfig+0x274>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cdc:	f7ff fc6a 	bl	80005b4 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fc66 	bl	80005b4 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e160      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f0      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f000 faea 	bl	80012dc <RCC_Delay>
 8000d08:	e01c      	b.n	8000d44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_RCC_OscConfig+0x274>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d10:	f7ff fc50 	bl	80005b4 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d16:	e00f      	b.n	8000d38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d18:	f7ff fc4c 	bl	80005b4 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d908      	bls.n	8000d38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e146      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	42420000 	.word	0x42420000
 8000d34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d38:	4b92      	ldr	r3, [pc, #584]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1e9      	bne.n	8000d18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 80a6 	beq.w	8000e9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d56:	4b8b      	ldr	r3, [pc, #556]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10d      	bne.n	8000d7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b88      	ldr	r3, [pc, #544]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a87      	ldr	r2, [pc, #540]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b85      	ldr	r3, [pc, #532]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7e:	4b82      	ldr	r3, [pc, #520]	; (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d118      	bne.n	8000dbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d8a:	4b7f      	ldr	r3, [pc, #508]	; (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a7e      	ldr	r2, [pc, #504]	; (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d96:	f7ff fc0d 	bl	80005b4 <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d9e:	f7ff fc09 	bl	80005b4 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b64      	cmp	r3, #100	; 0x64
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e103      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db0:	4b75      	ldr	r3, [pc, #468]	; (8000f88 <HAL_RCC_OscConfig+0x4c8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d106      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x312>
 8000dc4:	4b6f      	ldr	r3, [pc, #444]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	4a6e      	ldr	r2, [pc, #440]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6213      	str	r3, [r2, #32]
 8000dd0:	e02d      	b.n	8000e2e <HAL_RCC_OscConfig+0x36e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x334>
 8000dda:	4b6a      	ldr	r3, [pc, #424]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	4a69      	ldr	r2, [pc, #420]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000de0:	f023 0301 	bic.w	r3, r3, #1
 8000de4:	6213      	str	r3, [r2, #32]
 8000de6:	4b67      	ldr	r3, [pc, #412]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000de8:	6a1b      	ldr	r3, [r3, #32]
 8000dea:	4a66      	ldr	r2, [pc, #408]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dec:	f023 0304 	bic.w	r3, r3, #4
 8000df0:	6213      	str	r3, [r2, #32]
 8000df2:	e01c      	b.n	8000e2e <HAL_RCC_OscConfig+0x36e>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d10c      	bne.n	8000e16 <HAL_RCC_OscConfig+0x356>
 8000dfc:	4b61      	ldr	r3, [pc, #388]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	4a60      	ldr	r2, [pc, #384]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6213      	str	r3, [r2, #32]
 8000e08:	4b5e      	ldr	r3, [pc, #376]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	4a5d      	ldr	r2, [pc, #372]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6213      	str	r3, [r2, #32]
 8000e14:	e00b      	b.n	8000e2e <HAL_RCC_OscConfig+0x36e>
 8000e16:	4b5b      	ldr	r3, [pc, #364]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	4a5a      	ldr	r2, [pc, #360]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	6213      	str	r3, [r2, #32]
 8000e22:	4b58      	ldr	r3, [pc, #352]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	4a57      	ldr	r2, [pc, #348]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	f023 0304 	bic.w	r3, r3, #4
 8000e2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d015      	beq.n	8000e62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e36:	f7ff fbbd 	bl	80005b4 <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3c:	e00a      	b.n	8000e54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e3e:	f7ff fbb9 	bl	80005b4 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e0b1      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e54:	4b4b      	ldr	r3, [pc, #300]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e56:	6a1b      	ldr	r3, [r3, #32]
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0ee      	beq.n	8000e3e <HAL_RCC_OscConfig+0x37e>
 8000e60:	e014      	b.n	8000e8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e62:	f7ff fba7 	bl	80005b4 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e68:	e00a      	b.n	8000e80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fba3 	bl	80005b4 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e09b      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e80:	4b40      	ldr	r3, [pc, #256]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1ee      	bne.n	8000e6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d105      	bne.n	8000e9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e92:	4b3c      	ldr	r3, [pc, #240]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a3b      	ldr	r2, [pc, #236]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8087 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ea8:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d061      	beq.n	8000f78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d146      	bne.n	8000f4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ebc:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <HAL_RCC_OscConfig+0x4cc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fb77 	bl	80005b4 <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eca:	f7ff fb73 	bl	80005b4 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e06d      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f0      	bne.n	8000eca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef0:	d108      	bne.n	8000f04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ef2:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	4921      	ldr	r1, [pc, #132]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a19      	ldr	r1, [r3, #32]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	430b      	orrs	r3, r1
 8000f16:	491b      	ldr	r1, [pc, #108]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <HAL_RCC_OscConfig+0x4cc>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f22:	f7ff fb47 	bl	80005b4 <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f2a:	f7ff fb43 	bl	80005b4 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e03d      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f0      	beq.n	8000f2a <HAL_RCC_OscConfig+0x46a>
 8000f48:	e035      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_RCC_OscConfig+0x4cc>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fb30 	bl	80005b4 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f58:	f7ff fb2c 	bl	80005b4 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e026      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f0      	bne.n	8000f58 <HAL_RCC_OscConfig+0x498>
 8000f76:	e01e      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d107      	bne.n	8000f90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e019      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40007000 	.word	0x40007000
 8000f8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_RCC_OscConfig+0x500>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d106      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d001      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e0d0      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fd8:	4b6a      	ldr	r3, [pc, #424]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d910      	bls.n	8001008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe6:	4b67      	ldr	r3, [pc, #412]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 0207 	bic.w	r2, r3, #7
 8000fee:	4965      	ldr	r1, [pc, #404]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ff6:	4b63      	ldr	r3, [pc, #396]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	d001      	beq.n	8001008 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e0b8      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d020      	beq.n	8001056 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001020:	4b59      	ldr	r3, [pc, #356]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	4a58      	ldr	r2, [pc, #352]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800102a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001038:	4b53      	ldr	r3, [pc, #332]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4a52      	ldr	r2, [pc, #328]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800103e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001042:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001044:	4b50      	ldr	r3, [pc, #320]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	494d      	ldr	r1, [pc, #308]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001052:	4313      	orrs	r3, r2
 8001054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d040      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d107      	bne.n	800107a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	4b47      	ldr	r3, [pc, #284]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d115      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e07f      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d107      	bne.n	8001092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001082:	4b41      	ldr	r3, [pc, #260]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e073      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e06b      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010a2:	4b39      	ldr	r3, [pc, #228]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f023 0203 	bic.w	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4936      	ldr	r1, [pc, #216]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010b4:	f7ff fa7e 	bl	80005b4 <HAL_GetTick>
 80010b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ba:	e00a      	b.n	80010d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010bc:	f7ff fa7a 	bl	80005b4 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e053      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 020c 	and.w	r2, r3, #12
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d1eb      	bne.n	80010bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d210      	bcs.n	8001114 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 0207 	bic.w	r2, r3, #7
 80010fa:	4922      	ldr	r1, [pc, #136]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d001      	beq.n	8001114 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e032      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d008      	beq.n	8001132 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	4916      	ldr	r1, [pc, #88]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	4313      	orrs	r3, r2
 8001130:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d009      	beq.n	8001152 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	490e      	ldr	r1, [pc, #56]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	4313      	orrs	r3, r2
 8001150:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001152:	f000 f821 	bl	8001198 <HAL_RCC_GetSysClockFreq>
 8001156:	4602      	mov	r2, r0
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	490a      	ldr	r1, [pc, #40]	; (800118c <HAL_RCC_ClockConfig+0x1c8>)
 8001164:	5ccb      	ldrb	r3, [r1, r3]
 8001166:	fa22 f303 	lsr.w	r3, r2, r3
 800116a:	4a09      	ldr	r2, [pc, #36]	; (8001190 <HAL_RCC_ClockConfig+0x1cc>)
 800116c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_RCC_ClockConfig+0x1d0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f92e 	bl	80003d4 <HAL_InitTick>

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40022000 	.word	0x40022000
 8001188:	40021000 	.word	0x40021000
 800118c:	08004290 	.word	0x08004290
 8001190:	20000000 	.word	0x20000000
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <HAL_RCC_GetSysClockFreq+0x94>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d002      	beq.n	80011c8 <HAL_RCC_GetSysClockFreq+0x30>
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d003      	beq.n	80011ce <HAL_RCC_GetSysClockFreq+0x36>
 80011c6:	e027      	b.n	8001218 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_RCC_GetSysClockFreq+0x98>)
 80011ca:	613b      	str	r3, [r7, #16]
      break;
 80011cc:	e027      	b.n	800121e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	0c9b      	lsrs	r3, r3, #18
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	4a17      	ldr	r2, [pc, #92]	; (8001234 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d010      	beq.n	8001208 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_RCC_GetSysClockFreq+0x94>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	0c5b      	lsrs	r3, r3, #17
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011f2:	5cd3      	ldrb	r3, [r2, r3]
 80011f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <HAL_RCC_GetSysClockFreq+0x98>)
 80011fa:	fb03 f202 	mul.w	r2, r3, r2
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	fbb2 f3f3 	udiv	r3, r2, r3
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	e004      	b.n	8001212 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a0c      	ldr	r2, [pc, #48]	; (800123c <HAL_RCC_GetSysClockFreq+0xa4>)
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	613b      	str	r3, [r7, #16]
      break;
 8001216:	e002      	b.n	800121e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_RCC_GetSysClockFreq+0x98>)
 800121a:	613b      	str	r3, [r7, #16]
      break;
 800121c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800121e:	693b      	ldr	r3, [r7, #16]
}
 8001220:	4618      	mov	r0, r3
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	007a1200 	.word	0x007a1200
 8001234:	080042a8 	.word	0x080042a8
 8001238:	080042b8 	.word	0x080042b8
 800123c:	003d0900 	.word	0x003d0900

08001240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001244:	4b02      	ldr	r3, [pc, #8]	; (8001250 <HAL_RCC_GetHCLKFreq+0x10>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	20000000 	.word	0x20000000

08001254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001258:	f7ff fff2 	bl	8001240 <HAL_RCC_GetHCLKFreq>
 800125c:	4602      	mov	r2, r0
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	4903      	ldr	r1, [pc, #12]	; (8001278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800126a:	5ccb      	ldrb	r3, [r1, r3]
 800126c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001270:	4618      	mov	r0, r3
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	080042a0 	.word	0x080042a0

0800127c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	220f      	movs	r2, #15
 800128a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_RCC_GetClockConfig+0x58>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0203 	and.w	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_RCC_GetClockConfig+0x58>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_RCC_GetClockConfig+0x58>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_RCC_GetClockConfig+0x58>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	08db      	lsrs	r3, r3, #3
 80012b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_RCC_GetClockConfig+0x5c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0207 	and.w	r2, r3, #7
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40022000 	.word	0x40022000

080012dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <RCC_Delay+0x34>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <RCC_Delay+0x38>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	0a5b      	lsrs	r3, r3, #9
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	fb02 f303 	mul.w	r3, r2, r3
 80012f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012f8:	bf00      	nop
  }
  while (Delay --);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1e5a      	subs	r2, r3, #1
 80012fe:	60fa      	str	r2, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1f9      	bne.n	80012f8 <RCC_Delay+0x1c>
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	20000000 	.word	0x20000000
 8001314:	10624dd3 	.word	0x10624dd3

08001318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e041      	b.n	80013ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d106      	bne.n	8001344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f839 	bl	80013b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2202      	movs	r2, #2
 8001348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3304      	adds	r3, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4610      	mov	r0, r2
 8001358:	f000 f9b4 	bl	80016c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d001      	beq.n	80013e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e03a      	b.n	8001456 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2202      	movs	r2, #2
 80013e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a18      	ldr	r2, [pc, #96]	; (8001460 <HAL_TIM_Base_Start_IT+0x98>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00e      	beq.n	8001420 <HAL_TIM_Base_Start_IT+0x58>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800140a:	d009      	beq.n	8001420 <HAL_TIM_Base_Start_IT+0x58>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <HAL_TIM_Base_Start_IT+0x9c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d004      	beq.n	8001420 <HAL_TIM_Base_Start_IT+0x58>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a13      	ldr	r2, [pc, #76]	; (8001468 <HAL_TIM_Base_Start_IT+0xa0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d111      	bne.n	8001444 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b06      	cmp	r3, #6
 8001430:	d010      	beq.n	8001454 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 0201 	orr.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001442:	e007      	b.n	8001454 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40012c00 	.word	0x40012c00
 8001464:	40000400 	.word	0x40000400
 8001468:	40000800 	.word	0x40000800

0800146c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b02      	cmp	r3, #2
 8001480:	d122      	bne.n	80014c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b02      	cmp	r3, #2
 800148e:	d11b      	bne.n	80014c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f06f 0202 	mvn.w	r2, #2
 8001498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f8ed 	bl	800168e <HAL_TIM_IC_CaptureCallback>
 80014b4:	e005      	b.n	80014c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f8e0 	bl	800167c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f8ef 	bl	80016a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	d122      	bne.n	800151c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d11b      	bne.n	800151c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f06f 0204 	mvn.w	r2, #4
 80014ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2202      	movs	r2, #2
 80014f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f8c3 	bl	800168e <HAL_TIM_IC_CaptureCallback>
 8001508:	e005      	b.n	8001516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f8b6 	bl	800167c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f8c5 	bl	80016a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b08      	cmp	r3, #8
 8001528:	d122      	bne.n	8001570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b08      	cmp	r3, #8
 8001536:	d11b      	bne.n	8001570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f06f 0208 	mvn.w	r2, #8
 8001540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2204      	movs	r2, #4
 8001546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f899 	bl	800168e <HAL_TIM_IC_CaptureCallback>
 800155c:	e005      	b.n	800156a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f88c 	bl	800167c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f89b 	bl	80016a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	2b10      	cmp	r3, #16
 800157c:	d122      	bne.n	80015c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b10      	cmp	r3, #16
 800158a:	d11b      	bne.n	80015c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f06f 0210 	mvn.w	r2, #16
 8001594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2208      	movs	r2, #8
 800159a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f86f 	bl	800168e <HAL_TIM_IC_CaptureCallback>
 80015b0:	e005      	b.n	80015be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f862 	bl	800167c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f871 	bl	80016a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d10e      	bne.n	80015f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d107      	bne.n	80015f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f06f 0201 	mvn.w	r2, #1
 80015e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7fe feb6 	bl	800035c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	2b80      	cmp	r3, #128	; 0x80
 80015fc:	d10e      	bne.n	800161c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001608:	2b80      	cmp	r3, #128	; 0x80
 800160a:	d107      	bne.n	800161c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f8bf 	bl	800179a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001626:	2b40      	cmp	r3, #64	; 0x40
 8001628:	d10e      	bne.n	8001648 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001634:	2b40      	cmp	r3, #64	; 0x40
 8001636:	d107      	bne.n	8001648 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f835 	bl	80016b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b20      	cmp	r3, #32
 8001654:	d10e      	bne.n	8001674 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0320 	and.w	r3, r3, #32
 8001660:	2b20      	cmp	r3, #32
 8001662:	d107      	bne.n	8001674 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f06f 0220 	mvn.w	r2, #32
 800166c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f88a 	bl	8001788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a29      	ldr	r2, [pc, #164]	; (800177c <TIM_Base_SetConfig+0xb8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d00b      	beq.n	80016f4 <TIM_Base_SetConfig+0x30>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e2:	d007      	beq.n	80016f4 <TIM_Base_SetConfig+0x30>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a26      	ldr	r2, [pc, #152]	; (8001780 <TIM_Base_SetConfig+0xbc>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d003      	beq.n	80016f4 <TIM_Base_SetConfig+0x30>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a25      	ldr	r2, [pc, #148]	; (8001784 <TIM_Base_SetConfig+0xc0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d108      	bne.n	8001706 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a1c      	ldr	r2, [pc, #112]	; (800177c <TIM_Base_SetConfig+0xb8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00b      	beq.n	8001726 <TIM_Base_SetConfig+0x62>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001714:	d007      	beq.n	8001726 <TIM_Base_SetConfig+0x62>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a19      	ldr	r2, [pc, #100]	; (8001780 <TIM_Base_SetConfig+0xbc>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d003      	beq.n	8001726 <TIM_Base_SetConfig+0x62>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a18      	ldr	r2, [pc, #96]	; (8001784 <TIM_Base_SetConfig+0xc0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d108      	bne.n	8001738 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800172c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	4313      	orrs	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a07      	ldr	r2, [pc, #28]	; (800177c <TIM_Base_SetConfig+0xb8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d103      	bne.n	800176c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	615a      	str	r2, [r3, #20]
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	40012c00 	.word	0x40012c00
 8001780:	40000400 	.word	0x40000400
 8001784:	40000800 	.word	0x40000800

08001788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017b2:	f3ef 8305 	mrs	r3, IPSR
 80017b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80017b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10f      	bne.n	80017de <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017be:	f3ef 8310 	mrs	r3, PRIMASK
 80017c2:	607b      	str	r3, [r7, #4]
  return(result);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <osKernelInitialize+0x32>
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <osKernelInitialize+0x60>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d109      	bne.n	80017e6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017d2:	f3ef 8311 	mrs	r3, BASEPRI
 80017d6:	603b      	str	r3, [r7, #0]
  return(result);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80017de:	f06f 0305 	mvn.w	r3, #5
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	e00c      	b.n	8001800 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <osKernelInitialize+0x60>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d105      	bne.n	80017fa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <osKernelInitialize+0x60>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e002      	b.n	8001800 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001800:	68fb      	ldr	r3, [r7, #12]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000084 	.word	0x20000084

08001810 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001816:	f3ef 8305 	mrs	r3, IPSR
 800181a:	60bb      	str	r3, [r7, #8]
  return(result);
 800181c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10f      	bne.n	8001842 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001822:	f3ef 8310 	mrs	r3, PRIMASK
 8001826:	607b      	str	r3, [r7, #4]
  return(result);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <osKernelStart+0x32>
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <osKernelStart+0x64>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d109      	bne.n	800184a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001836:	f3ef 8311 	mrs	r3, BASEPRI
 800183a:	603b      	str	r3, [r7, #0]
  return(result);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001842:	f06f 0305 	mvn.w	r3, #5
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e00e      	b.n	8001868 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <osKernelStart+0x64>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <osKernelStart+0x64>)
 8001854:	2202      	movs	r2, #2
 8001856:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001858:	f001 f878 	bl	800294c <vTaskStartScheduler>
      stat = osOK;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e002      	b.n	8001868 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001866:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001868:	68fb      	ldr	r3, [r7, #12]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000084 	.word	0x20000084

08001878 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b092      	sub	sp, #72	; 0x48
 800187c:	af04      	add	r7, sp, #16
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001888:	f3ef 8305 	mrs	r3, IPSR
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001890:	2b00      	cmp	r3, #0
 8001892:	f040 8094 	bne.w	80019be <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001896:	f3ef 8310 	mrs	r3, PRIMASK
 800189a:	623b      	str	r3, [r7, #32]
  return(result);
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 808d 	bne.w	80019be <osThreadNew+0x146>
 80018a4:	4b48      	ldr	r3, [pc, #288]	; (80019c8 <osThreadNew+0x150>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d106      	bne.n	80018ba <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80018ac:	f3ef 8311 	mrs	r3, BASEPRI
 80018b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f040 8082 	bne.w	80019be <osThreadNew+0x146>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d07e      	beq.n	80019be <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80018c4:	2318      	movs	r3, #24
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80018c8:	2300      	movs	r3, #0
 80018ca:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80018cc:	f107 031b 	add.w	r3, r7, #27
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d045      	beq.n	800196a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <osThreadNew+0x74>
        name = attr->name;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <osThreadNew+0x9a>
 8001900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001902:	2b38      	cmp	r3, #56	; 0x38
 8001904:	d805      	bhi.n	8001912 <osThreadNew+0x9a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <osThreadNew+0x9e>
        return (NULL);
 8001912:	2300      	movs	r3, #0
 8001914:	e054      	b.n	80019c0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00e      	beq.n	800194c <osThreadNew+0xd4>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b5b      	cmp	r3, #91	; 0x5b
 8001934:	d90a      	bls.n	800194c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800193a:	2b00      	cmp	r3, #0
 800193c:	d006      	beq.n	800194c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <osThreadNew+0xd4>
        mem = 1;
 8001946:	2301      	movs	r3, #1
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
 800194a:	e010      	b.n	800196e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10c      	bne.n	800196e <osThreadNew+0xf6>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d108      	bne.n	800196e <osThreadNew+0xf6>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d104      	bne.n	800196e <osThreadNew+0xf6>
          mem = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
 8001968:	e001      	b.n	800196e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800196e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001970:	2b01      	cmp	r3, #1
 8001972:	d110      	bne.n	8001996 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800197c:	9202      	str	r2, [sp, #8]
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001988:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fe12 	bl	80025b4 <xTaskCreateStatic>
 8001990:	4603      	mov	r3, r0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e013      	b.n	80019be <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001998:	2b00      	cmp	r3, #0
 800199a:	d110      	bne.n	80019be <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199e:	b29a      	uxth	r2, r3
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 fe5c 	bl	800266c <xTaskCreate>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d001      	beq.n	80019be <osThreadNew+0x146>
          hTask = NULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80019be:	697b      	ldr	r3, [r7, #20]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3738      	adds	r7, #56	; 0x38
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000084 	.word	0x20000084

080019cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019d4:	f3ef 8305 	mrs	r3, IPSR
 80019d8:	613b      	str	r3, [r7, #16]
  return(result);
 80019da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10f      	bne.n	8001a00 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019e0:	f3ef 8310 	mrs	r3, PRIMASK
 80019e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d109      	bne.n	8001a00 <osDelay+0x34>
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <osDelay+0x58>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d109      	bne.n	8001a08 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019f4:	f3ef 8311 	mrs	r3, BASEPRI
 80019f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <osDelay+0x3c>
    stat = osErrorISR;
 8001a00:	f06f 0305 	mvn.w	r3, #5
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e007      	b.n	8001a18 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 ff66 	bl	80028e4 <vTaskDelay>
    }
  }

  return (stat);
 8001a18:	697b      	ldr	r3, [r7, #20]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000084 	.word	0x20000084

08001a28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4a06      	ldr	r2, [pc, #24]	; (8001a50 <vApplicationGetIdleTaskMemory+0x28>)
 8001a38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	601a      	str	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	20000088 	.word	0x20000088
 8001a54:	200000e4 	.word	0x200000e4

08001a58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <vApplicationGetTimerTaskMemory+0x2c>)
 8001a68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <vApplicationGetTimerTaskMemory+0x30>)
 8001a6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a76:	601a      	str	r2, [r3, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	200002e4 	.word	0x200002e4
 8001a88:	20000340 	.word	0x20000340

08001a8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f103 0208 	add.w	r2, r3, #8
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aa4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f103 0208 	add.w	r2, r3, #8
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f103 0208 	add.w	r2, r3, #8
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b085      	sub	sp, #20
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	601a      	str	r2, [r3, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b3e:	d103      	bne.n	8001b48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	e00c      	b.n	8001b62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	e002      	b.n	8001b56 <vListInsert+0x2e>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d2f6      	bcs.n	8001b50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	601a      	str	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6892      	ldr	r2, [r2, #8]
 8001bae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6852      	ldr	r2, [r2, #4]
 8001bb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d103      	bne.n	8001bcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	1e5a      	subs	r2, r3, #1
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
	...

08001bec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10a      	bne.n	8001c16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c04:	f383 8811 	msr	BASEPRI, r3
 8001c08:	f3bf 8f6f 	isb	sy
 8001c0c:	f3bf 8f4f 	dsb	sy
 8001c10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c12:	bf00      	nop
 8001c14:	e7fe      	b.n	8001c14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001c16:	f001 ffc9 	bl	8003bac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c22:	68f9      	ldr	r1, [r7, #12]
 8001c24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	441a      	add	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c46:	3b01      	subs	r3, #1
 8001c48:	68f9      	ldr	r1, [r7, #12]
 8001c4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	441a      	add	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	22ff      	movs	r2, #255	; 0xff
 8001c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	22ff      	movs	r2, #255	; 0xff
 8001c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d114      	bne.n	8001c96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d01a      	beq.n	8001caa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3310      	adds	r3, #16
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 f8f1 	bl	8002e60 <xTaskRemoveFromEventList>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d012      	beq.n	8001caa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <xQueueGenericReset+0xcc>)
 8001c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	f3bf 8f4f 	dsb	sy
 8001c90:	f3bf 8f6f 	isb	sy
 8001c94:	e009      	b.n	8001caa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3310      	adds	r3, #16
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fef6 	bl	8001a8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3324      	adds	r3, #36	; 0x24
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fef1 	bl	8001a8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001caa:	f001 ffaf 	bl	8003c0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	e000ed04 	.word	0xe000ed04

08001cbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08e      	sub	sp, #56	; 0x38
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10a      	bne.n	8001ce6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd4:	f383 8811 	msr	BASEPRI, r3
 8001cd8:	f3bf 8f6f 	isb	sy
 8001cdc:	f3bf 8f4f 	dsb	sy
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001ce2:	bf00      	nop
 8001ce4:	e7fe      	b.n	8001ce4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10a      	bne.n	8001d02 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf0:	f383 8811 	msr	BASEPRI, r3
 8001cf4:	f3bf 8f6f 	isb	sy
 8001cf8:	f3bf 8f4f 	dsb	sy
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001cfe:	bf00      	nop
 8001d00:	e7fe      	b.n	8001d00 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <xQueueGenericCreateStatic+0x52>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <xQueueGenericCreateStatic+0x56>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <xQueueGenericCreateStatic+0x58>
 8001d12:	2300      	movs	r3, #0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10a      	bne.n	8001d2e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1c:	f383 8811 	msr	BASEPRI, r3
 8001d20:	f3bf 8f6f 	isb	sy
 8001d24:	f3bf 8f4f 	dsb	sy
 8001d28:	623b      	str	r3, [r7, #32]
}
 8001d2a:	bf00      	nop
 8001d2c:	e7fe      	b.n	8001d2c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <xQueueGenericCreateStatic+0x7e>
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <xQueueGenericCreateStatic+0x82>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <xQueueGenericCreateStatic+0x84>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10a      	bne.n	8001d5a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d48:	f383 8811 	msr	BASEPRI, r3
 8001d4c:	f3bf 8f6f 	isb	sy
 8001d50:	f3bf 8f4f 	dsb	sy
 8001d54:	61fb      	str	r3, [r7, #28]
}
 8001d56:	bf00      	nop
 8001d58:	e7fe      	b.n	8001d58 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001d5a:	2350      	movs	r3, #80	; 0x50
 8001d5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b50      	cmp	r3, #80	; 0x50
 8001d62:	d00a      	beq.n	8001d7a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d68:	f383 8811 	msr	BASEPRI, r3
 8001d6c:	f3bf 8f6f 	isb	sy
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	61bb      	str	r3, [r7, #24]
}
 8001d76:	bf00      	nop
 8001d78:	e7fe      	b.n	8001d78 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00d      	beq.n	8001da0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d8c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f805 	bl	8001daa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3730      	adds	r7, #48	; 0x30
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	e002      	b.n	8001dcc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001dd8:	2101      	movs	r1, #1
 8001dda:	69b8      	ldr	r0, [r7, #24]
 8001ddc:	f7ff ff06 	bl	8001bec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	78fa      	ldrb	r2, [r7, #3]
 8001de4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08e      	sub	sp, #56	; 0x38
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10a      	bne.n	8001e22 <xQueueGenericSend+0x32>
	__asm volatile
 8001e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e10:	f383 8811 	msr	BASEPRI, r3
 8001e14:	f3bf 8f6f 	isb	sy
 8001e18:	f3bf 8f4f 	dsb	sy
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001e1e:	bf00      	nop
 8001e20:	e7fe      	b.n	8001e20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d103      	bne.n	8001e30 <xQueueGenericSend+0x40>
 8001e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <xQueueGenericSend+0x44>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <xQueueGenericSend+0x46>
 8001e34:	2300      	movs	r3, #0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10a      	bne.n	8001e50 <xQueueGenericSend+0x60>
	__asm volatile
 8001e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3e:	f383 8811 	msr	BASEPRI, r3
 8001e42:	f3bf 8f6f 	isb	sy
 8001e46:	f3bf 8f4f 	dsb	sy
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001e4c:	bf00      	nop
 8001e4e:	e7fe      	b.n	8001e4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d103      	bne.n	8001e5e <xQueueGenericSend+0x6e>
 8001e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <xQueueGenericSend+0x72>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <xQueueGenericSend+0x74>
 8001e62:	2300      	movs	r3, #0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10a      	bne.n	8001e7e <xQueueGenericSend+0x8e>
	__asm volatile
 8001e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6c:	f383 8811 	msr	BASEPRI, r3
 8001e70:	f3bf 8f6f 	isb	sy
 8001e74:	f3bf 8f4f 	dsb	sy
 8001e78:	623b      	str	r3, [r7, #32]
}
 8001e7a:	bf00      	nop
 8001e7c:	e7fe      	b.n	8001e7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e7e:	f001 f9b3 	bl	80031e8 <xTaskGetSchedulerState>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <xQueueGenericSend+0x9e>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <xQueueGenericSend+0xa2>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <xQueueGenericSend+0xa4>
 8001e92:	2300      	movs	r3, #0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10a      	bne.n	8001eae <xQueueGenericSend+0xbe>
	__asm volatile
 8001e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9c:	f383 8811 	msr	BASEPRI, r3
 8001ea0:	f3bf 8f6f 	isb	sy
 8001ea4:	f3bf 8f4f 	dsb	sy
 8001ea8:	61fb      	str	r3, [r7, #28]
}
 8001eaa:	bf00      	nop
 8001eac:	e7fe      	b.n	8001eac <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001eae:	f001 fe7d 	bl	8003bac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d302      	bcc.n	8001ec4 <xQueueGenericSend+0xd4>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d129      	bne.n	8001f18 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001eca:	f000 fa07 	bl	80022dc <prvCopyDataToQueue>
 8001ece:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d010      	beq.n	8001efa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eda:	3324      	adds	r3, #36	; 0x24
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 ffbf 	bl	8002e60 <xTaskRemoveFromEventList>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001ee8:	4b3f      	ldr	r3, [pc, #252]	; (8001fe8 <xQueueGenericSend+0x1f8>)
 8001eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	f3bf 8f4f 	dsb	sy
 8001ef4:	f3bf 8f6f 	isb	sy
 8001ef8:	e00a      	b.n	8001f10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d007      	beq.n	8001f10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001f00:	4b39      	ldr	r3, [pc, #228]	; (8001fe8 <xQueueGenericSend+0x1f8>)
 8001f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	f3bf 8f4f 	dsb	sy
 8001f0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001f10:	f001 fe7c 	bl	8003c0c <vPortExitCritical>
				return pdPASS;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e063      	b.n	8001fe0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d103      	bne.n	8001f26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f1e:	f001 fe75 	bl	8003c0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e05c      	b.n	8001fe0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d106      	bne.n	8001f3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fff9 	bl	8002f28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f36:	2301      	movs	r3, #1
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f3a:	f001 fe67 	bl	8003c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f3e:	f000 fd6b 	bl	8002a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f42:	f001 fe33 	bl	8003bac <vPortEnterCritical>
 8001f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f4c:	b25b      	sxtb	r3, r3
 8001f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f52:	d103      	bne.n	8001f5c <xQueueGenericSend+0x16c>
 8001f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f62:	b25b      	sxtb	r3, r3
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f68:	d103      	bne.n	8001f72 <xQueueGenericSend+0x182>
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f72:	f001 fe4b 	bl	8003c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f76:	1d3a      	adds	r2, r7, #4
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 ffe8 	bl	8002f54 <xTaskCheckForTimeOut>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d124      	bne.n	8001fd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f8c:	f000 fa9e 	bl	80024cc <prvIsQueueFull>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d018      	beq.n	8001fc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f98:	3310      	adds	r3, #16
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 ff0e 	bl	8002dc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fa6:	f000 fa29 	bl	80023fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001faa:	f000 fd43 	bl	8002a34 <xTaskResumeAll>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f47f af7c 	bne.w	8001eae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <xQueueGenericSend+0x1f8>)
 8001fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f3bf 8f4f 	dsb	sy
 8001fc2:	f3bf 8f6f 	isb	sy
 8001fc6:	e772      	b.n	8001eae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fca:	f000 fa17 	bl	80023fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001fce:	f000 fd31 	bl	8002a34 <xTaskResumeAll>
 8001fd2:	e76c      	b.n	8001eae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fd6:	f000 fa11 	bl	80023fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001fda:	f000 fd2b 	bl	8002a34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001fde:	2300      	movs	r3, #0
		}
	}
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3738      	adds	r7, #56	; 0x38
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	e000ed04 	.word	0xe000ed04

08001fec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08e      	sub	sp, #56	; 0x38
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10a      	bne.n	800201a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002008:	f383 8811 	msr	BASEPRI, r3
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002016:	bf00      	nop
 8002018:	e7fe      	b.n	8002018 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d103      	bne.n	8002028 <xQueueGenericSendFromISR+0x3c>
 8002020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <xQueueGenericSendFromISR+0x40>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <xQueueGenericSendFromISR+0x42>
 800202c:	2300      	movs	r3, #0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10a      	bne.n	8002048 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002036:	f383 8811 	msr	BASEPRI, r3
 800203a:	f3bf 8f6f 	isb	sy
 800203e:	f3bf 8f4f 	dsb	sy
 8002042:	623b      	str	r3, [r7, #32]
}
 8002044:	bf00      	nop
 8002046:	e7fe      	b.n	8002046 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d103      	bne.n	8002056 <xQueueGenericSendFromISR+0x6a>
 800204e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <xQueueGenericSendFromISR+0x6e>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <xQueueGenericSendFromISR+0x70>
 800205a:	2300      	movs	r3, #0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10a      	bne.n	8002076 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	61fb      	str	r3, [r7, #28]
}
 8002072:	bf00      	nop
 8002074:	e7fe      	b.n	8002074 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002076:	f001 fe5b 	bl	8003d30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800207a:	f3ef 8211 	mrs	r2, BASEPRI
 800207e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002082:	f383 8811 	msr	BASEPRI, r3
 8002086:	f3bf 8f6f 	isb	sy
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	61ba      	str	r2, [r7, #24]
 8002090:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002092:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209e:	429a      	cmp	r2, r3
 80020a0:	d302      	bcc.n	80020a8 <xQueueGenericSendFromISR+0xbc>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d12c      	bne.n	8002102 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80020a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020b8:	f000 f910 	bl	80022dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80020bc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020c4:	d112      	bne.n	80020ec <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d016      	beq.n	80020fc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d0:	3324      	adds	r3, #36	; 0x24
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fec4 	bl	8002e60 <xTaskRemoveFromEventList>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00e      	beq.n	80020fc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00b      	beq.n	80020fc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	e007      	b.n	80020fc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80020ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80020f0:	3301      	adds	r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	b25a      	sxtb	r2, r3
 80020f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80020fc:	2301      	movs	r3, #1
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002100:	e001      	b.n	8002106 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002102:	2300      	movs	r3, #0
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
 8002106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002108:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002110:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002114:	4618      	mov	r0, r3
 8002116:	3738      	adds	r7, #56	; 0x38
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08c      	sub	sp, #48	; 0x30
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002128:	2300      	movs	r3, #0
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10a      	bne.n	800214c <xQueueReceive+0x30>
	__asm volatile
 8002136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213a:	f383 8811 	msr	BASEPRI, r3
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	f3bf 8f4f 	dsb	sy
 8002146:	623b      	str	r3, [r7, #32]
}
 8002148:	bf00      	nop
 800214a:	e7fe      	b.n	800214a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <xQueueReceive+0x3e>
 8002152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <xQueueReceive+0x42>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <xQueueReceive+0x44>
 800215e:	2300      	movs	r3, #0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10a      	bne.n	800217a <xQueueReceive+0x5e>
	__asm volatile
 8002164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002168:	f383 8811 	msr	BASEPRI, r3
 800216c:	f3bf 8f6f 	isb	sy
 8002170:	f3bf 8f4f 	dsb	sy
 8002174:	61fb      	str	r3, [r7, #28]
}
 8002176:	bf00      	nop
 8002178:	e7fe      	b.n	8002178 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800217a:	f001 f835 	bl	80031e8 <xTaskGetSchedulerState>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <xQueueReceive+0x6e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <xQueueReceive+0x72>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <xQueueReceive+0x74>
 800218e:	2300      	movs	r3, #0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <xQueueReceive+0x8e>
	__asm volatile
 8002194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002198:	f383 8811 	msr	BASEPRI, r3
 800219c:	f3bf 8f6f 	isb	sy
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	61bb      	str	r3, [r7, #24]
}
 80021a6:	bf00      	nop
 80021a8:	e7fe      	b.n	80021a8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80021aa:	f001 fcff 	bl	8003bac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01f      	beq.n	80021fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021be:	f000 f8f7 	bl	80023b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	1e5a      	subs	r2, r3, #1
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00f      	beq.n	80021f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d4:	3310      	adds	r3, #16
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fe42 	bl	8002e60 <xTaskRemoveFromEventList>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80021e2:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <xQueueReceive+0x1bc>)
 80021e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80021f2:	f001 fd0b 	bl	8003c0c <vPortExitCritical>
				return pdPASS;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e069      	b.n	80022ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d103      	bne.n	8002208 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002200:	f001 fd04 	bl	8003c0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002204:	2300      	movs	r3, #0
 8002206:	e062      	b.n	80022ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800220e:	f107 0310 	add.w	r3, r7, #16
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fe88 	bl	8002f28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002218:	2301      	movs	r3, #1
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800221c:	f001 fcf6 	bl	8003c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002220:	f000 fbfa 	bl	8002a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002224:	f001 fcc2 	bl	8003bac <vPortEnterCritical>
 8002228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800222e:	b25b      	sxtb	r3, r3
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002234:	d103      	bne.n	800223e <xQueueReceive+0x122>
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002244:	b25b      	sxtb	r3, r3
 8002246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800224a:	d103      	bne.n	8002254 <xQueueReceive+0x138>
 800224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002254:	f001 fcda 	bl	8003c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002258:	1d3a      	adds	r2, r7, #4
 800225a:	f107 0310 	add.w	r3, r7, #16
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fe77 	bl	8002f54 <xTaskCheckForTimeOut>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d123      	bne.n	80022b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800226c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800226e:	f000 f917 	bl	80024a0 <prvIsQueueEmpty>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d017      	beq.n	80022a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227a:	3324      	adds	r3, #36	; 0x24
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fd9d 	bl	8002dc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002288:	f000 f8b8 	bl	80023fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800228c:	f000 fbd2 	bl	8002a34 <xTaskResumeAll>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d189      	bne.n	80021aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <xQueueReceive+0x1bc>)
 8002298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f3bf 8f4f 	dsb	sy
 80022a2:	f3bf 8f6f 	isb	sy
 80022a6:	e780      	b.n	80021aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80022a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022aa:	f000 f8a7 	bl	80023fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022ae:	f000 fbc1 	bl	8002a34 <xTaskResumeAll>
 80022b2:	e77a      	b.n	80021aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80022b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022b6:	f000 f8a1 	bl	80023fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022ba:	f000 fbbb 	bl	8002a34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022c0:	f000 f8ee 	bl	80024a0 <prvIsQueueEmpty>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f43f af6f 	beq.w	80021aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80022cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3730      	adds	r7, #48	; 0x30
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	e000ed04 	.word	0xe000ed04

080022dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10d      	bne.n	8002316 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d14d      	bne.n	800239e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 ff8c 	bl	8003224 <xTaskPriorityDisinherit>
 800230c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	e043      	b.n	800239e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d119      	bne.n	8002350 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6898      	ldr	r0, [r3, #8]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	461a      	mov	r2, r3
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	f001 ff44 	bl	80041b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	441a      	add	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	429a      	cmp	r2, r3
 8002344:	d32b      	bcc.n	800239e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	e026      	b.n	800239e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	68d8      	ldr	r0, [r3, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	461a      	mov	r2, r3
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	f001 ff2a 	bl	80041b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	425b      	negs	r3, r3
 800236a:	441a      	add	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d207      	bcs.n	800238c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	425b      	negs	r3, r3
 8002386:	441a      	add	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d105      	bne.n	800239e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	3b01      	subs	r3, #1
 800239c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80023a6:	697b      	ldr	r3, [r7, #20]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d018      	beq.n	80023f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	441a      	add	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d303      	bcc.n	80023e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68d9      	ldr	r1, [r3, #12]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	461a      	mov	r2, r3
 80023ee:	6838      	ldr	r0, [r7, #0]
 80023f0:	f001 fee0 	bl	80041b4 <memcpy>
	}
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002404:	f001 fbd2 	bl	8003bac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800240e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002410:	e011      	b.n	8002436 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	2b00      	cmp	r3, #0
 8002418:	d012      	beq.n	8002440 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3324      	adds	r3, #36	; 0x24
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fd1e 	bl	8002e60 <xTaskRemoveFromEventList>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800242a:	f000 fdf5 	bl	8003018 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	3b01      	subs	r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243a:	2b00      	cmp	r3, #0
 800243c:	dce9      	bgt.n	8002412 <prvUnlockQueue+0x16>
 800243e:	e000      	b.n	8002442 <prvUnlockQueue+0x46>
					break;
 8002440:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	22ff      	movs	r2, #255	; 0xff
 8002446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800244a:	f001 fbdf 	bl	8003c0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800244e:	f001 fbad 	bl	8003bac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002458:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800245a:	e011      	b.n	8002480 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d012      	beq.n	800248a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3310      	adds	r3, #16
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fcf9 	bl	8002e60 <xTaskRemoveFromEventList>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002474:	f000 fdd0 	bl	8003018 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002478:	7bbb      	ldrb	r3, [r7, #14]
 800247a:	3b01      	subs	r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002484:	2b00      	cmp	r3, #0
 8002486:	dce9      	bgt.n	800245c <prvUnlockQueue+0x60>
 8002488:	e000      	b.n	800248c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800248a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	22ff      	movs	r2, #255	; 0xff
 8002490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002494:	f001 fbba 	bl	8003c0c <vPortExitCritical>
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024a8:	f001 fb80 	bl	8003bac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80024b4:	2301      	movs	r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e001      	b.n	80024be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80024be:	f001 fba5 	bl	8003c0c <vPortExitCritical>

	return xReturn;
 80024c2:	68fb      	ldr	r3, [r7, #12]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024d4:	f001 fb6a 	bl	8003bac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d102      	bne.n	80024ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e001      	b.n	80024ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80024ee:	f001 fb8d 	bl	8003c0c <vPortExitCritical>

	return xReturn;
 80024f2:	68fb      	ldr	r3, [r7, #12]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	e014      	b.n	8002536 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800250c:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <vQueueAddToRegistry+0x4c>)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002518:	490b      	ldr	r1, [pc, #44]	; (8002548 <vQueueAddToRegistry+0x4c>)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <vQueueAddToRegistry+0x4c>)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800252e:	e006      	b.n	800253e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	3301      	adds	r3, #1
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b07      	cmp	r3, #7
 800253a:	d9e7      	bls.n	800250c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	20000740 	.word	0x20000740

0800254c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800255c:	f001 fb26 	bl	8003bac <vPortEnterCritical>
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002566:	b25b      	sxtb	r3, r3
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800256c:	d103      	bne.n	8002576 <vQueueWaitForMessageRestricted+0x2a>
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800257c:	b25b      	sxtb	r3, r3
 800257e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002582:	d103      	bne.n	800258c <vQueueWaitForMessageRestricted+0x40>
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800258c:	f001 fb3e 	bl	8003c0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	2b00      	cmp	r3, #0
 8002596:	d106      	bne.n	80025a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3324      	adds	r3, #36	; 0x24
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fc31 	bl	8002e08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80025a6:	6978      	ldr	r0, [r7, #20]
 80025a8:	f7ff ff28 	bl	80023fc <prvUnlockQueue>
	}
 80025ac:	bf00      	nop
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08e      	sub	sp, #56	; 0x38
 80025b8:	af04      	add	r7, sp, #16
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80025c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <xTaskCreateStatic+0x2a>
	__asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	623b      	str	r3, [r7, #32]
}
 80025da:	bf00      	nop
 80025dc:	e7fe      	b.n	80025dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80025de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <xTaskCreateStatic+0x46>
	__asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	61fb      	str	r3, [r7, #28]
}
 80025f6:	bf00      	nop
 80025f8:	e7fe      	b.n	80025f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80025fa:	235c      	movs	r3, #92	; 0x5c
 80025fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b5c      	cmp	r3, #92	; 0x5c
 8002602:	d00a      	beq.n	800261a <xTaskCreateStatic+0x66>
	__asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	61bb      	str	r3, [r7, #24]
}
 8002616:	bf00      	nop
 8002618:	e7fe      	b.n	8002618 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01e      	beq.n	800265e <xTaskCreateStatic+0xaa>
 8002620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01b      	beq.n	800265e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800262e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	2202      	movs	r2, #2
 8002634:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002638:	2300      	movs	r3, #0
 800263a:	9303      	str	r3, [sp, #12]
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	9302      	str	r3, [sp, #8]
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f850 	bl	80026f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002656:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002658:	f000 f8d4 	bl	8002804 <prvAddNewTaskToReadyList>
 800265c:	e001      	b.n	8002662 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002662:	697b      	ldr	r3, [r7, #20]
	}
 8002664:	4618      	mov	r0, r3
 8002666:	3728      	adds	r7, #40	; 0x28
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08c      	sub	sp, #48	; 0x30
 8002670:	af04      	add	r7, sp, #16
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	4613      	mov	r3, r2
 800267a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4618      	mov	r0, r3
 8002682:	f001 fb93 	bl	8003dac <pvPortMalloc>
 8002686:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00e      	beq.n	80026ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800268e:	205c      	movs	r0, #92	; 0x5c
 8002690:	f001 fb8c 	bl	8003dac <pvPortMalloc>
 8002694:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
 80026a2:	e005      	b.n	80026b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80026a4:	6978      	ldr	r0, [r7, #20]
 80026a6:	f001 fc45 	bl	8003f34 <vPortFree>
 80026aa:	e001      	b.n	80026b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d017      	beq.n	80026e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026be:	88fa      	ldrh	r2, [r7, #6]
 80026c0:	2300      	movs	r3, #0
 80026c2:	9303      	str	r3, [sp, #12]
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	9302      	str	r3, [sp, #8]
 80026c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f80e 	bl	80026f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026da:	69f8      	ldr	r0, [r7, #28]
 80026dc:	f000 f892 	bl	8002804 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80026e0:	2301      	movs	r3, #1
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	e002      	b.n	80026ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80026ec:	69bb      	ldr	r3, [r7, #24]
	}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b088      	sub	sp, #32
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002706:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	461a      	mov	r2, r3
 800270e:	21a5      	movs	r1, #165	; 0xa5
 8002710:	f001 fd24 	bl	800415c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800271e:	3b01      	subs	r3, #1
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	f023 0307 	bic.w	r3, r3, #7
 800272c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <prvInitialiseNewTask+0x58>
	__asm volatile
 8002738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273c:	f383 8811 	msr	BASEPRI, r3
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	617b      	str	r3, [r7, #20]
}
 800274a:	bf00      	nop
 800274c:	e7fe      	b.n	800274c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	e012      	b.n	800277a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4413      	add	r3, r2
 800275a:	7819      	ldrb	r1, [r3, #0]
 800275c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	4413      	add	r3, r2
 8002762:	3334      	adds	r3, #52	; 0x34
 8002764:	460a      	mov	r2, r1
 8002766:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	4413      	add	r3, r2
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d006      	beq.n	8002782 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	3301      	adds	r3, #1
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d9e9      	bls.n	8002754 <prvInitialiseNewTask+0x5e>
 8002780:	e000      	b.n	8002784 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002782:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	2b37      	cmp	r3, #55	; 0x37
 8002790:	d901      	bls.n	8002796 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002792:	2337      	movs	r3, #55	; 0x37
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	2200      	movs	r2, #0
 80027a6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	3304      	adds	r3, #4
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff f98c 	bl	8001aca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	3318      	adds	r3, #24
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f987 	bl	8001aca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	2200      	movs	r2, #0
 80027d6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	68f9      	ldr	r1, [r7, #12]
 80027e4:	69b8      	ldr	r0, [r7, #24]
 80027e6:	f001 f8f1 	bl	80039cc <pxPortInitialiseStack>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027fc:	bf00      	nop
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800280c:	f001 f9ce 	bl	8003bac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <prvAddNewTaskToReadyList+0xc4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3301      	adds	r3, #1
 8002816:	4a2c      	ldr	r2, [pc, #176]	; (80028c8 <prvAddNewTaskToReadyList+0xc4>)
 8002818:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800281a:	4b2c      	ldr	r3, [pc, #176]	; (80028cc <prvAddNewTaskToReadyList+0xc8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002822:	4a2a      	ldr	r2, [pc, #168]	; (80028cc <prvAddNewTaskToReadyList+0xc8>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <prvAddNewTaskToReadyList+0xc4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d110      	bne.n	8002852 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002830:	f000 fc18 	bl	8003064 <prvInitialiseTaskLists>
 8002834:	e00d      	b.n	8002852 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <prvAddNewTaskToReadyList+0xcc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <prvAddNewTaskToReadyList+0xc8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	429a      	cmp	r2, r3
 800284a:	d802      	bhi.n	8002852 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800284c:	4a1f      	ldr	r2, [pc, #124]	; (80028cc <prvAddNewTaskToReadyList+0xc8>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002852:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <prvAddNewTaskToReadyList+0xd0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3301      	adds	r3, #1
 8002858:	4a1e      	ldr	r2, [pc, #120]	; (80028d4 <prvAddNewTaskToReadyList+0xd0>)
 800285a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <prvAddNewTaskToReadyList+0xd0>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <prvAddNewTaskToReadyList+0xd4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d903      	bls.n	8002878 <prvAddNewTaskToReadyList+0x74>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <prvAddNewTaskToReadyList+0xd4>)
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4a15      	ldr	r2, [pc, #84]	; (80028dc <prvAddNewTaskToReadyList+0xd8>)
 8002886:	441a      	add	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3304      	adds	r3, #4
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f7ff f927 	bl	8001ae2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002894:	f001 f9ba 	bl	8003c0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002898:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <prvAddNewTaskToReadyList+0xcc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <prvAddNewTaskToReadyList+0xc8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d207      	bcs.n	80028be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <prvAddNewTaskToReadyList+0xdc>)
 80028b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000c54 	.word	0x20000c54
 80028cc:	20000780 	.word	0x20000780
 80028d0:	20000c60 	.word	0x20000c60
 80028d4:	20000c70 	.word	0x20000c70
 80028d8:	20000c5c 	.word	0x20000c5c
 80028dc:	20000784 	.word	0x20000784
 80028e0:	e000ed04 	.word	0xe000ed04

080028e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d017      	beq.n	8002926 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <vTaskDelay+0x60>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <vTaskDelay+0x30>
	__asm volatile
 80028fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	60bb      	str	r3, [r7, #8]
}
 8002910:	bf00      	nop
 8002912:	e7fe      	b.n	8002912 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002914:	f000 f880 	bl	8002a18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002918:	2100      	movs	r1, #0
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fcf0 	bl	8003300 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002920:	f000 f888 	bl	8002a34 <xTaskResumeAll>
 8002924:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d107      	bne.n	800293c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <vTaskDelay+0x64>)
 800292e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000c7c 	.word	0x20000c7c
 8002948:	e000ed04 	.word	0xe000ed04

0800294c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800295a:	463a      	mov	r2, r7
 800295c:	1d39      	adds	r1, r7, #4
 800295e:	f107 0308 	add.w	r3, r7, #8
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff f860 	bl	8001a28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002968:	6839      	ldr	r1, [r7, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	9202      	str	r2, [sp, #8]
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	2300      	movs	r3, #0
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	2300      	movs	r3, #0
 8002978:	460a      	mov	r2, r1
 800297a:	4921      	ldr	r1, [pc, #132]	; (8002a00 <vTaskStartScheduler+0xb4>)
 800297c:	4821      	ldr	r0, [pc, #132]	; (8002a04 <vTaskStartScheduler+0xb8>)
 800297e:	f7ff fe19 	bl	80025b4 <xTaskCreateStatic>
 8002982:	4603      	mov	r3, r0
 8002984:	4a20      	ldr	r2, [pc, #128]	; (8002a08 <vTaskStartScheduler+0xbc>)
 8002986:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002988:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <vTaskStartScheduler+0xbc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002990:	2301      	movs	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	e001      	b.n	800299a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d102      	bne.n	80029a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80029a0:	f000 fd02 	bl	80033a8 <xTimerCreateTimerTask>
 80029a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d116      	bne.n	80029da <vTaskStartScheduler+0x8e>
	__asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	613b      	str	r3, [r7, #16]
}
 80029be:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <vTaskStartScheduler+0xc0>)
 80029c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <vTaskStartScheduler+0xc4>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <vTaskStartScheduler+0xc8>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80029d4:	f001 f878 	bl	8003ac8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80029d8:	e00e      	b.n	80029f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e0:	d10a      	bne.n	80029f8 <vTaskStartScheduler+0xac>
	__asm volatile
 80029e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e6:	f383 8811 	msr	BASEPRI, r3
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	60fb      	str	r3, [r7, #12]
}
 80029f4:	bf00      	nop
 80029f6:	e7fe      	b.n	80029f6 <vTaskStartScheduler+0xaa>
}
 80029f8:	bf00      	nop
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	0800420c 	.word	0x0800420c
 8002a04:	08003031 	.word	0x08003031
 8002a08:	20000c78 	.word	0x20000c78
 8002a0c:	20000c74 	.word	0x20000c74
 8002a10:	20000c60 	.word	0x20000c60
 8002a14:	20000c58 	.word	0x20000c58

08002a18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <vTaskSuspendAll+0x18>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	4a03      	ldr	r2, [pc, #12]	; (8002a30 <vTaskSuspendAll+0x18>)
 8002a24:	6013      	str	r3, [r2, #0]
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000c7c 	.word	0x20000c7c

08002a34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a42:	4b42      	ldr	r3, [pc, #264]	; (8002b4c <xTaskResumeAll+0x118>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10a      	bne.n	8002a60 <xTaskResumeAll+0x2c>
	__asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	603b      	str	r3, [r7, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	e7fe      	b.n	8002a5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a60:	f001 f8a4 	bl	8003bac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a64:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <xTaskResumeAll+0x118>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	4a38      	ldr	r2, [pc, #224]	; (8002b4c <xTaskResumeAll+0x118>)
 8002a6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a6e:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <xTaskResumeAll+0x118>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d162      	bne.n	8002b3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a76:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <xTaskResumeAll+0x11c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d05e      	beq.n	8002b3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a7e:	e02f      	b.n	8002ae0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002a80:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <xTaskResumeAll+0x120>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3318      	adds	r3, #24
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff f883 	bl	8001b98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3304      	adds	r3, #4
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff f87e 	bl	8001b98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa0:	4b2d      	ldr	r3, [pc, #180]	; (8002b58 <xTaskResumeAll+0x124>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d903      	bls.n	8002ab0 <xTaskResumeAll+0x7c>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <xTaskResumeAll+0x124>)
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4a27      	ldr	r2, [pc, #156]	; (8002b5c <xTaskResumeAll+0x128>)
 8002abe:	441a      	add	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f7ff f80b 	bl	8001ae2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad0:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <xTaskResumeAll+0x12c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d302      	bcc.n	8002ae0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002ada:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <xTaskResumeAll+0x130>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <xTaskResumeAll+0x120>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1cb      	bne.n	8002a80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002aee:	f000 fb57 	bl	80031a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <xTaskResumeAll+0x134>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d010      	beq.n	8002b20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002afe:	f000 f845 	bl	8002b8c <xTaskIncrementTick>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <xTaskResumeAll+0x130>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f1      	bne.n	8002afe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002b1a:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <xTaskResumeAll+0x134>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b20:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <xTaskResumeAll+0x130>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d009      	beq.n	8002b3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <xTaskResumeAll+0x138>)
 8002b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b3c:	f001 f866 	bl	8003c0c <vPortExitCritical>

	return xAlreadyYielded;
 8002b40:	68bb      	ldr	r3, [r7, #8]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000c7c 	.word	0x20000c7c
 8002b50:	20000c54 	.word	0x20000c54
 8002b54:	20000c14 	.word	0x20000c14
 8002b58:	20000c5c 	.word	0x20000c5c
 8002b5c:	20000784 	.word	0x20000784
 8002b60:	20000780 	.word	0x20000780
 8002b64:	20000c68 	.word	0x20000c68
 8002b68:	20000c64 	.word	0x20000c64
 8002b6c:	e000ed04 	.word	0xe000ed04

08002b70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002b76:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <xTaskGetTickCount+0x18>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002b7c:	687b      	ldr	r3, [r7, #4]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	20000c58 	.word	0x20000c58

08002b8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b96:	4b51      	ldr	r3, [pc, #324]	; (8002cdc <xTaskIncrementTick+0x150>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 808e 	bne.w	8002cbc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ba0:	4b4f      	ldr	r3, [pc, #316]	; (8002ce0 <xTaskIncrementTick+0x154>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ba8:	4a4d      	ldr	r2, [pc, #308]	; (8002ce0 <xTaskIncrementTick+0x154>)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d120      	bne.n	8002bf6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002bb4:	4b4b      	ldr	r3, [pc, #300]	; (8002ce4 <xTaskIncrementTick+0x158>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <xTaskIncrementTick+0x48>
	__asm volatile
 8002bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	603b      	str	r3, [r7, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	e7fe      	b.n	8002bd2 <xTaskIncrementTick+0x46>
 8002bd4:	4b43      	ldr	r3, [pc, #268]	; (8002ce4 <xTaskIncrementTick+0x158>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	4b43      	ldr	r3, [pc, #268]	; (8002ce8 <xTaskIncrementTick+0x15c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a41      	ldr	r2, [pc, #260]	; (8002ce4 <xTaskIncrementTick+0x158>)
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4a41      	ldr	r2, [pc, #260]	; (8002ce8 <xTaskIncrementTick+0x15c>)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	4b40      	ldr	r3, [pc, #256]	; (8002cec <xTaskIncrementTick+0x160>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3301      	adds	r3, #1
 8002bee:	4a3f      	ldr	r2, [pc, #252]	; (8002cec <xTaskIncrementTick+0x160>)
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	f000 fad5 	bl	80031a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002bf6:	4b3e      	ldr	r3, [pc, #248]	; (8002cf0 <xTaskIncrementTick+0x164>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d34e      	bcc.n	8002c9e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c00:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <xTaskIncrementTick+0x158>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <xTaskIncrementTick+0x82>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <xTaskIncrementTick+0x84>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c14:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <xTaskIncrementTick+0x164>)
 8002c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c1a:	601a      	str	r2, [r3, #0]
					break;
 8002c1c:	e03f      	b.n	8002c9e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c1e:	4b31      	ldr	r3, [pc, #196]	; (8002ce4 <xTaskIncrementTick+0x158>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d203      	bcs.n	8002c3e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c36:	4a2e      	ldr	r2, [pc, #184]	; (8002cf0 <xTaskIncrementTick+0x164>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6013      	str	r3, [r2, #0]
						break;
 8002c3c:	e02f      	b.n	8002c9e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	3304      	adds	r3, #4
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe ffa8 	bl	8001b98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d004      	beq.n	8002c5a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	3318      	adds	r3, #24
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe ff9f 	bl	8001b98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5e:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <xTaskIncrementTick+0x168>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d903      	bls.n	8002c6e <xTaskIncrementTick+0xe2>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	4a22      	ldr	r2, [pc, #136]	; (8002cf4 <xTaskIncrementTick+0x168>)
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <xTaskIncrementTick+0x16c>)
 8002c7c:	441a      	add	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3304      	adds	r3, #4
 8002c82:	4619      	mov	r1, r3
 8002c84:	4610      	mov	r0, r2
 8002c86:	f7fe ff2c 	bl	8001ae2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <xTaskIncrementTick+0x170>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d3b3      	bcc.n	8002c00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c9c:	e7b0      	b.n	8002c00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c9e:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <xTaskIncrementTick+0x170>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	4914      	ldr	r1, [pc, #80]	; (8002cf8 <xTaskIncrementTick+0x16c>)
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d907      	bls.n	8002cc6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	e004      	b.n	8002cc6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <xTaskIncrementTick+0x174>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	4a0f      	ldr	r2, [pc, #60]	; (8002d00 <xTaskIncrementTick+0x174>)
 8002cc4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <xTaskIncrementTick+0x178>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002cd2:	697b      	ldr	r3, [r7, #20]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000c7c 	.word	0x20000c7c
 8002ce0:	20000c58 	.word	0x20000c58
 8002ce4:	20000c0c 	.word	0x20000c0c
 8002ce8:	20000c10 	.word	0x20000c10
 8002cec:	20000c6c 	.word	0x20000c6c
 8002cf0:	20000c74 	.word	0x20000c74
 8002cf4:	20000c5c 	.word	0x20000c5c
 8002cf8:	20000784 	.word	0x20000784
 8002cfc:	20000780 	.word	0x20000780
 8002d00:	20000c64 	.word	0x20000c64
 8002d04:	20000c68 	.word	0x20000c68

08002d08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d0e:	4b27      	ldr	r3, [pc, #156]	; (8002dac <vTaskSwitchContext+0xa4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d16:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <vTaskSwitchContext+0xa8>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d1c:	e041      	b.n	8002da2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <vTaskSwitchContext+0xa8>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002d24:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <vTaskSwitchContext+0xac>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e010      	b.n	8002d4e <vTaskSwitchContext+0x46>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <vTaskSwitchContext+0x40>
	__asm volatile
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	607b      	str	r3, [r7, #4]
}
 8002d44:	bf00      	nop
 8002d46:	e7fe      	b.n	8002d46 <vTaskSwitchContext+0x3e>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	491a      	ldr	r1, [pc, #104]	; (8002db8 <vTaskSwitchContext+0xb0>)
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0e4      	beq.n	8002d2c <vTaskSwitchContext+0x24>
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <vTaskSwitchContext+0xb0>)
 8002d6e:	4413      	add	r3, r2
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	3308      	adds	r3, #8
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d104      	bne.n	8002d92 <vTaskSwitchContext+0x8a>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <vTaskSwitchContext+0xb4>)
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	4a05      	ldr	r2, [pc, #20]	; (8002db4 <vTaskSwitchContext+0xac>)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6013      	str	r3, [r2, #0]
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	20000c7c 	.word	0x20000c7c
 8002db0:	20000c68 	.word	0x20000c68
 8002db4:	20000c5c 	.word	0x20000c5c
 8002db8:	20000784 	.word	0x20000784
 8002dbc:	20000780 	.word	0x20000780

08002dc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	60fb      	str	r3, [r7, #12]
}
 8002de2:	bf00      	nop
 8002de4:	e7fe      	b.n	8002de4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002de6:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <vTaskPlaceOnEventList+0x44>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3318      	adds	r3, #24
 8002dec:	4619      	mov	r1, r3
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe fe9a 	bl	8001b28 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002df4:	2101      	movs	r1, #1
 8002df6:	6838      	ldr	r0, [r7, #0]
 8002df8:	f000 fa82 	bl	8003300 <prvAddCurrentTaskToDelayedList>
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000780 	.word	0x20000780

08002e08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10a      	bne.n	8002e30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	617b      	str	r3, [r7, #20]
}
 8002e2c:	bf00      	nop
 8002e2e:	e7fe      	b.n	8002e2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e30:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <vTaskPlaceOnEventListRestricted+0x54>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3318      	adds	r3, #24
 8002e36:	4619      	mov	r1, r3
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7fe fe52 	bl	8001ae2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	68b8      	ldr	r0, [r7, #8]
 8002e4e:	f000 fa57 	bl	8003300 <prvAddCurrentTaskToDelayedList>
	}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000780 	.word	0x20000780

08002e60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7a:	f383 8811 	msr	BASEPRI, r3
 8002e7e:	f3bf 8f6f 	isb	sy
 8002e82:	f3bf 8f4f 	dsb	sy
 8002e86:	60fb      	str	r3, [r7, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	e7fe      	b.n	8002e8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	3318      	adds	r3, #24
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe fe81 	bl	8001b98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e96:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <xTaskRemoveFromEventList+0xb0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11d      	bne.n	8002eda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fe78 	bl	8001b98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <xTaskRemoveFromEventList+0xb4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d903      	bls.n	8002ebc <xTaskRemoveFromEventList+0x5c>
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	4a16      	ldr	r2, [pc, #88]	; (8002f14 <xTaskRemoveFromEventList+0xb4>)
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <xTaskRemoveFromEventList+0xb8>)
 8002eca:	441a      	add	r2, r3
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f7fe fe05 	bl	8001ae2 <vListInsertEnd>
 8002ed8:	e005      	b.n	8002ee6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	3318      	adds	r3, #24
 8002ede:	4619      	mov	r1, r3
 8002ee0:	480e      	ldr	r0, [pc, #56]	; (8002f1c <xTaskRemoveFromEventList+0xbc>)
 8002ee2:	f7fe fdfe 	bl	8001ae2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <xTaskRemoveFromEventList+0xc0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d905      	bls.n	8002f00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <xTaskRemoveFromEventList+0xc4>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e001      	b.n	8002f04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002f04:	697b      	ldr	r3, [r7, #20]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000c7c 	.word	0x20000c7c
 8002f14:	20000c5c 	.word	0x20000c5c
 8002f18:	20000784 	.word	0x20000784
 8002f1c:	20000c14 	.word	0x20000c14
 8002f20:	20000780 	.word	0x20000780
 8002f24:	20000c68 	.word	0x20000c68

08002f28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <vTaskInternalSetTimeOutState+0x24>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <vTaskInternalSetTimeOutState+0x28>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	605a      	str	r2, [r3, #4]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000c6c 	.word	0x20000c6c
 8002f50:	20000c58 	.word	0x20000c58

08002f54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	613b      	str	r3, [r7, #16]
}
 8002f76:	bf00      	nop
 8002f78:	e7fe      	b.n	8002f78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	60fb      	str	r3, [r7, #12]
}
 8002f92:	bf00      	nop
 8002f94:	e7fe      	b.n	8002f94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002f96:	f000 fe09 	bl	8003bac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <xTaskCheckForTimeOut+0xbc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb2:	d102      	bne.n	8002fba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
 8002fb8:	e023      	b.n	8003002 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <xTaskCheckForTimeOut+0xc0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d007      	beq.n	8002fd6 <xTaskCheckForTimeOut+0x82>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d302      	bcc.n	8002fd6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	e015      	b.n	8003002 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d20b      	bcs.n	8002ff8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	1ad2      	subs	r2, r2, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff ff9b 	bl	8002f28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	e004      	b.n	8003002 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002ffe:	2301      	movs	r3, #1
 8003000:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003002:	f000 fe03 	bl	8003c0c <vPortExitCritical>

	return xReturn;
 8003006:	69fb      	ldr	r3, [r7, #28]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3720      	adds	r7, #32
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000c58 	.word	0x20000c58
 8003014:	20000c6c 	.word	0x20000c6c

08003018 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <vTaskMissedYield+0x14>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]
}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000c68 	.word	0x20000c68

08003030 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003038:	f000 f854 	bl	80030e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800303c:	4b07      	ldr	r3, [pc, #28]	; (800305c <prvIdleTask+0x2c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d907      	bls.n	8003054 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <prvIdleTask+0x30>)
 8003046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003054:	f7fd f87c 	bl	8000150 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003058:	e7ee      	b.n	8003038 <prvIdleTask+0x8>
 800305a:	bf00      	nop
 800305c:	20000784 	.word	0x20000784
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	e00c      	b.n	800308a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <prvInitialiseTaskLists+0x60>)
 800307c:	4413      	add	r3, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe fd04 	bl	8001a8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3301      	adds	r3, #1
 8003088:	607b      	str	r3, [r7, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b37      	cmp	r3, #55	; 0x37
 800308e:	d9ef      	bls.n	8003070 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003090:	480d      	ldr	r0, [pc, #52]	; (80030c8 <prvInitialiseTaskLists+0x64>)
 8003092:	f7fe fcfb 	bl	8001a8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003096:	480d      	ldr	r0, [pc, #52]	; (80030cc <prvInitialiseTaskLists+0x68>)
 8003098:	f7fe fcf8 	bl	8001a8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800309c:	480c      	ldr	r0, [pc, #48]	; (80030d0 <prvInitialiseTaskLists+0x6c>)
 800309e:	f7fe fcf5 	bl	8001a8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80030a2:	480c      	ldr	r0, [pc, #48]	; (80030d4 <prvInitialiseTaskLists+0x70>)
 80030a4:	f7fe fcf2 	bl	8001a8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80030a8:	480b      	ldr	r0, [pc, #44]	; (80030d8 <prvInitialiseTaskLists+0x74>)
 80030aa:	f7fe fcef 	bl	8001a8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <prvInitialiseTaskLists+0x78>)
 80030b0:	4a05      	ldr	r2, [pc, #20]	; (80030c8 <prvInitialiseTaskLists+0x64>)
 80030b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <prvInitialiseTaskLists+0x7c>)
 80030b6:	4a05      	ldr	r2, [pc, #20]	; (80030cc <prvInitialiseTaskLists+0x68>)
 80030b8:	601a      	str	r2, [r3, #0]
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000784 	.word	0x20000784
 80030c8:	20000be4 	.word	0x20000be4
 80030cc:	20000bf8 	.word	0x20000bf8
 80030d0:	20000c14 	.word	0x20000c14
 80030d4:	20000c28 	.word	0x20000c28
 80030d8:	20000c40 	.word	0x20000c40
 80030dc:	20000c0c 	.word	0x20000c0c
 80030e0:	20000c10 	.word	0x20000c10

080030e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030ea:	e019      	b.n	8003120 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80030ec:	f000 fd5e 	bl	8003bac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <prvCheckTasksWaitingTermination+0x50>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe fd4b 	bl	8001b98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003102:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <prvCheckTasksWaitingTermination+0x54>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3b01      	subs	r3, #1
 8003108:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <prvCheckTasksWaitingTermination+0x54>)
 800310a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <prvCheckTasksWaitingTermination+0x58>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3b01      	subs	r3, #1
 8003112:	4a0a      	ldr	r2, [pc, #40]	; (800313c <prvCheckTasksWaitingTermination+0x58>)
 8003114:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003116:	f000 fd79 	bl	8003c0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f810 	bl	8003140 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <prvCheckTasksWaitingTermination+0x58>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e1      	bne.n	80030ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000c28 	.word	0x20000c28
 8003138:	20000c54 	.word	0x20000c54
 800313c:	20000c3c 	.word	0x20000c3c

08003140 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800314e:	2b00      	cmp	r3, #0
 8003150:	d108      	bne.n	8003164 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4618      	mov	r0, r3
 8003158:	f000 feec 	bl	8003f34 <vPortFree>
				vPortFree( pxTCB );
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fee9 	bl	8003f34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003162:	e018      	b.n	8003196 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800316a:	2b01      	cmp	r3, #1
 800316c:	d103      	bne.n	8003176 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fee0 	bl	8003f34 <vPortFree>
	}
 8003174:	e00f      	b.n	8003196 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800317c:	2b02      	cmp	r3, #2
 800317e:	d00a      	beq.n	8003196 <prvDeleteTCB+0x56>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	60fb      	str	r3, [r7, #12]
}
 8003192:	bf00      	nop
 8003194:	e7fe      	b.n	8003194 <prvDeleteTCB+0x54>
	}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <prvResetNextTaskUnblockTime+0x40>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <prvResetNextTaskUnblockTime+0x14>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <prvResetNextTaskUnblockTime+0x16>
 80031b4:	2300      	movs	r3, #0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d004      	beq.n	80031c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <prvResetNextTaskUnblockTime+0x44>)
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80031c2:	e008      	b.n	80031d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <prvResetNextTaskUnblockTime+0x40>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <prvResetNextTaskUnblockTime+0x44>)
 80031d4:	6013      	str	r3, [r2, #0]
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	20000c0c 	.word	0x20000c0c
 80031e4:	20000c74 	.word	0x20000c74

080031e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80031ee:	4b0b      	ldr	r3, [pc, #44]	; (800321c <xTaskGetSchedulerState+0x34>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80031f6:	2301      	movs	r3, #1
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	e008      	b.n	800320e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031fc:	4b08      	ldr	r3, [pc, #32]	; (8003220 <xTaskGetSchedulerState+0x38>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003204:	2302      	movs	r3, #2
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	e001      	b.n	800320e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800320e:	687b      	ldr	r3, [r7, #4]
	}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000c60 	.word	0x20000c60
 8003220:	20000c7c 	.word	0x20000c7c

08003224 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d056      	beq.n	80032e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800323a:	4b2e      	ldr	r3, [pc, #184]	; (80032f4 <xTaskPriorityDisinherit+0xd0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	429a      	cmp	r2, r3
 8003242:	d00a      	beq.n	800325a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	60fb      	str	r3, [r7, #12]
}
 8003256:	bf00      	nop
 8003258:	e7fe      	b.n	8003258 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	60bb      	str	r3, [r7, #8]
}
 8003274:	bf00      	nop
 8003276:	e7fe      	b.n	8003276 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327c:	1e5a      	subs	r2, r3, #1
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328a:	429a      	cmp	r2, r3
 800328c:	d02c      	beq.n	80032e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003292:	2b00      	cmp	r3, #0
 8003294:	d128      	bne.n	80032e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	3304      	adds	r3, #4
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe fc7c 	bl	8001b98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <xTaskPriorityDisinherit+0xd4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d903      	bls.n	80032c8 <xTaskPriorityDisinherit+0xa4>
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	4a0c      	ldr	r2, [pc, #48]	; (80032f8 <xTaskPriorityDisinherit+0xd4>)
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4a09      	ldr	r2, [pc, #36]	; (80032fc <xTaskPriorityDisinherit+0xd8>)
 80032d6:	441a      	add	r2, r3
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	3304      	adds	r3, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f7fe fbff 	bl	8001ae2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80032e4:	2301      	movs	r3, #1
 80032e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80032e8:	697b      	ldr	r3, [r7, #20]
	}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000780 	.word	0x20000780
 80032f8:	20000c5c 	.word	0x20000c5c
 80032fc:	20000784 	.word	0x20000784

08003300 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800330a:	4b21      	ldr	r3, [pc, #132]	; (8003390 <prvAddCurrentTaskToDelayedList+0x90>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003310:	4b20      	ldr	r3, [pc, #128]	; (8003394 <prvAddCurrentTaskToDelayedList+0x94>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3304      	adds	r3, #4
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fc3e 	bl	8001b98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003322:	d10a      	bne.n	800333a <prvAddCurrentTaskToDelayedList+0x3a>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <prvAddCurrentTaskToDelayedList+0x94>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3304      	adds	r3, #4
 8003330:	4619      	mov	r1, r3
 8003332:	4819      	ldr	r0, [pc, #100]	; (8003398 <prvAddCurrentTaskToDelayedList+0x98>)
 8003334:	f7fe fbd5 	bl	8001ae2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003338:	e026      	b.n	8003388 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4413      	add	r3, r2
 8003340:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <prvAddCurrentTaskToDelayedList+0x94>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	429a      	cmp	r2, r3
 8003350:	d209      	bcs.n	8003366 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <prvAddCurrentTaskToDelayedList+0x94>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3304      	adds	r3, #4
 800335c:	4619      	mov	r1, r3
 800335e:	4610      	mov	r0, r2
 8003360:	f7fe fbe2 	bl	8001b28 <vListInsert>
}
 8003364:	e010      	b.n	8003388 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <prvAddCurrentTaskToDelayedList+0x94>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3304      	adds	r3, #4
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f7fe fbd8 	bl	8001b28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	429a      	cmp	r2, r3
 8003380:	d202      	bcs.n	8003388 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003382:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	6013      	str	r3, [r2, #0]
}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000c58 	.word	0x20000c58
 8003394:	20000780 	.word	0x20000780
 8003398:	20000c40 	.word	0x20000c40
 800339c:	20000c10 	.word	0x20000c10
 80033a0:	20000c0c 	.word	0x20000c0c
 80033a4:	20000c74 	.word	0x20000c74

080033a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80033b2:	f000 facb 	bl	800394c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80033b6:	4b1c      	ldr	r3, [pc, #112]	; (8003428 <xTimerCreateTimerTask+0x80>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d021      	beq.n	8003402 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80033c6:	1d3a      	adds	r2, r7, #4
 80033c8:	f107 0108 	add.w	r1, r7, #8
 80033cc:	f107 030c 	add.w	r3, r7, #12
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe fb41 	bl	8001a58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	9202      	str	r2, [sp, #8]
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	2302      	movs	r3, #2
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	2300      	movs	r3, #0
 80033e6:	460a      	mov	r2, r1
 80033e8:	4910      	ldr	r1, [pc, #64]	; (800342c <xTimerCreateTimerTask+0x84>)
 80033ea:	4811      	ldr	r0, [pc, #68]	; (8003430 <xTimerCreateTimerTask+0x88>)
 80033ec:	f7ff f8e2 	bl	80025b4 <xTaskCreateStatic>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4a10      	ldr	r2, [pc, #64]	; (8003434 <xTimerCreateTimerTask+0x8c>)
 80033f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <xTimerCreateTimerTask+0x8c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80033fe:	2301      	movs	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	613b      	str	r3, [r7, #16]
}
 800341a:	bf00      	nop
 800341c:	e7fe      	b.n	800341c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800341e:	697b      	ldr	r3, [r7, #20]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000cb0 	.word	0x20000cb0
 800342c:	08004214 	.word	0x08004214
 8003430:	08003555 	.word	0x08003555
 8003434:	20000cb4 	.word	0x20000cb4

08003438 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	623b      	str	r3, [r7, #32]
}
 8003462:	bf00      	nop
 8003464:	e7fe      	b.n	8003464 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003466:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <xTimerGenericCommand+0x98>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d02a      	beq.n	80034c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b05      	cmp	r3, #5
 800347e:	dc18      	bgt.n	80034b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003480:	f7ff feb2 	bl	80031e8 <xTaskGetSchedulerState>
 8003484:	4603      	mov	r3, r0
 8003486:	2b02      	cmp	r3, #2
 8003488:	d109      	bne.n	800349e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <xTimerGenericCommand+0x98>)
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	f107 0110 	add.w	r1, r7, #16
 8003492:	2300      	movs	r3, #0
 8003494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003496:	f7fe fcab 	bl	8001df0 <xQueueGenericSend>
 800349a:	6278      	str	r0, [r7, #36]	; 0x24
 800349c:	e012      	b.n	80034c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <xTimerGenericCommand+0x98>)
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	f107 0110 	add.w	r1, r7, #16
 80034a6:	2300      	movs	r3, #0
 80034a8:	2200      	movs	r2, #0
 80034aa:	f7fe fca1 	bl	8001df0 <xQueueGenericSend>
 80034ae:	6278      	str	r0, [r7, #36]	; 0x24
 80034b0:	e008      	b.n	80034c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80034b2:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <xTimerGenericCommand+0x98>)
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	f107 0110 	add.w	r1, r7, #16
 80034ba:	2300      	movs	r3, #0
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	f7fe fd95 	bl	8001fec <xQueueGenericSendFromISR>
 80034c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3728      	adds	r7, #40	; 0x28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000cb0 	.word	0x20000cb0

080034d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80034de:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <prvProcessExpiredTimer+0x7c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe fb53 	bl	8001b98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d122      	bne.n	8003540 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	18d1      	adds	r1, r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	6978      	ldr	r0, [r7, #20]
 8003508:	f000 f8c8 	bl	800369c <prvInsertTimerInActiveList>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d016      	beq.n	8003540 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003512:	2300      	movs	r3, #0
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	2300      	movs	r3, #0
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	2100      	movs	r1, #0
 800351c:	6978      	ldr	r0, [r7, #20]
 800351e:	f7ff ff8b 	bl	8003438 <xTimerGenericCommand>
 8003522:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10a      	bne.n	8003540 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800352a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	60fb      	str	r3, [r7, #12]
}
 800353c:	bf00      	nop
 800353e:	e7fe      	b.n	800353e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	6978      	ldr	r0, [r7, #20]
 8003546:	4798      	blx	r3
}
 8003548:	bf00      	nop
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000ca8 	.word	0x20000ca8

08003554 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800355c:	f107 0308 	add.w	r3, r7, #8
 8003560:	4618      	mov	r0, r3
 8003562:	f000 f857 	bl	8003614 <prvGetNextExpireTime>
 8003566:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4619      	mov	r1, r3
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 f803 	bl	8003578 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003572:	f000 f8d5 	bl	8003720 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003576:	e7f1      	b.n	800355c <prvTimerTask+0x8>

08003578 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003582:	f7ff fa49 	bl	8002a18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003586:	f107 0308 	add.w	r3, r7, #8
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f866 	bl	800365c <prvSampleTimeNow>
 8003590:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d130      	bne.n	80035fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <prvProcessTimerOrBlockTask+0x3c>
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d806      	bhi.n	80035b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80035a6:	f7ff fa45 	bl	8002a34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80035aa:	68f9      	ldr	r1, [r7, #12]
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff91 	bl	80034d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80035b2:	e024      	b.n	80035fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <prvProcessTimerOrBlockTask+0x90>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <prvProcessTimerOrBlockTask+0x94>)
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	4619      	mov	r1, r3
 80035da:	f7fe ffb7 	bl	800254c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80035de:	f7ff fa29 	bl	8002a34 <xTaskResumeAll>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80035e8:	4b09      	ldr	r3, [pc, #36]	; (8003610 <prvProcessTimerOrBlockTask+0x98>)
 80035ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	f3bf 8f6f 	isb	sy
}
 80035f8:	e001      	b.n	80035fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80035fa:	f7ff fa1b 	bl	8002a34 <xTaskResumeAll>
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000cac 	.word	0x20000cac
 800360c:	20000cb0 	.word	0x20000cb0
 8003610:	e000ed04 	.word	0xe000ed04

08003614 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800361c:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <prvGetNextExpireTime+0x44>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	bf0c      	ite	eq
 8003626:	2301      	moveq	r3, #1
 8003628:	2300      	movne	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d105      	bne.n	8003646 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800363a:	4b07      	ldr	r3, [pc, #28]	; (8003658 <prvGetNextExpireTime+0x44>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e001      	b.n	800364a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800364a:	68fb      	ldr	r3, [r7, #12]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000ca8 	.word	0x20000ca8

0800365c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003664:	f7ff fa84 	bl	8002b70 <xTaskGetTickCount>
 8003668:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <prvSampleTimeNow+0x3c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	429a      	cmp	r2, r3
 8003672:	d205      	bcs.n	8003680 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003674:	f000 f908 	bl	8003888 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e002      	b.n	8003686 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003686:	4a04      	ldr	r2, [pc, #16]	; (8003698 <prvSampleTimeNow+0x3c>)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800368c:	68fb      	ldr	r3, [r7, #12]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000cb8 	.word	0x20000cb8

0800369c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d812      	bhi.n	80036e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	1ad2      	subs	r2, r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d302      	bcc.n	80036d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80036d0:	2301      	movs	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e01b      	b.n	800370e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <prvInsertTimerInActiveList+0x7c>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3304      	adds	r3, #4
 80036de:	4619      	mov	r1, r3
 80036e0:	4610      	mov	r0, r2
 80036e2:	f7fe fa21 	bl	8001b28 <vListInsert>
 80036e6:	e012      	b.n	800370e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d206      	bcs.n	80036fe <prvInsertTimerInActiveList+0x62>
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d302      	bcc.n	80036fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	e007      	b.n	800370e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <prvInsertTimerInActiveList+0x80>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3304      	adds	r3, #4
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f7fe fa0d 	bl	8001b28 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800370e:	697b      	ldr	r3, [r7, #20]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000cac 	.word	0x20000cac
 800371c:	20000ca8 	.word	0x20000ca8

08003720 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08e      	sub	sp, #56	; 0x38
 8003724:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003726:	e09d      	b.n	8003864 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	da18      	bge.n	8003760 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	3304      	adds	r3, #4
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	61fb      	str	r3, [r7, #28]
}
 800374c:	bf00      	nop
 800374e:	e7fe      	b.n	800374e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003756:	6850      	ldr	r0, [r2, #4]
 8003758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800375a:	6892      	ldr	r2, [r2, #8]
 800375c:	4611      	mov	r1, r2
 800375e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	db7e      	blt.n	8003864 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d004      	beq.n	800377c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	3304      	adds	r3, #4
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fa0e 	bl	8001b98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800377c:	463b      	mov	r3, r7
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff ff6c 	bl	800365c <prvSampleTimeNow>
 8003784:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b09      	cmp	r3, #9
 800378a:	d86a      	bhi.n	8003862 <prvProcessReceivedCommands+0x142>
 800378c:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <prvProcessReceivedCommands+0x74>)
 800378e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003792:	bf00      	nop
 8003794:	080037bd 	.word	0x080037bd
 8003798:	080037bd 	.word	0x080037bd
 800379c:	080037bd 	.word	0x080037bd
 80037a0:	08003865 	.word	0x08003865
 80037a4:	08003819 	.word	0x08003819
 80037a8:	08003851 	.word	0x08003851
 80037ac:	080037bd 	.word	0x080037bd
 80037b0:	080037bd 	.word	0x080037bd
 80037b4:	08003865 	.word	0x08003865
 80037b8:	08003819 	.word	0x08003819
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	18d1      	adds	r1, r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037ca:	f7ff ff67 	bl	800369c <prvInsertTimerInActiveList>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d047      	beq.n	8003864 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037da:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d13f      	bne.n	8003864 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	441a      	add	r2, r3
 80037ec:	2300      	movs	r3, #0
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2300      	movs	r3, #0
 80037f2:	2100      	movs	r1, #0
 80037f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f6:	f7ff fe1f 	bl	8003438 <xTimerGenericCommand>
 80037fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d130      	bne.n	8003864 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	61bb      	str	r3, [r7, #24]
}
 8003814:	bf00      	nop
 8003816:	e7fe      	b.n	8003816 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	617b      	str	r3, [r7, #20]
}
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	18d1      	adds	r1, r2, r3
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800384a:	f7ff ff27 	bl	800369c <prvInsertTimerInActiveList>
					break;
 800384e:	e009      	b.n	8003864 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d104      	bne.n	8003864 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800385a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800385c:	f000 fb6a 	bl	8003f34 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003860:	e000      	b.n	8003864 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8003862:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003864:	4b07      	ldr	r3, [pc, #28]	; (8003884 <prvProcessReceivedCommands+0x164>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	1d39      	adds	r1, r7, #4
 800386a:	2200      	movs	r2, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f7fe fc55 	bl	800211c <xQueueReceive>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	f47f af57 	bne.w	8003728 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800387a:	bf00      	nop
 800387c:	bf00      	nop
 800387e:	3730      	adds	r7, #48	; 0x30
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20000cb0 	.word	0x20000cb0

08003888 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800388e:	e045      	b.n	800391c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003890:	4b2c      	ldr	r3, [pc, #176]	; (8003944 <prvSwitchTimerLists+0xbc>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800389a:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <prvSwitchTimerLists+0xbc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3304      	adds	r3, #4
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fe f975 	bl	8001b98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d12e      	bne.n	800391c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4413      	add	r3, r2
 80038c6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d90e      	bls.n	80038ee <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038dc:	4b19      	ldr	r3, [pc, #100]	; (8003944 <prvSwitchTimerLists+0xbc>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3304      	adds	r3, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f7fe f91e 	bl	8001b28 <vListInsert>
 80038ec:	e016      	b.n	800391c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038ee:	2300      	movs	r3, #0
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	2300      	movs	r3, #0
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	2100      	movs	r1, #0
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f7ff fd9d 	bl	8003438 <xTimerGenericCommand>
 80038fe:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10a      	bne.n	800391c <prvSwitchTimerLists+0x94>
	__asm volatile
 8003906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	603b      	str	r3, [r7, #0]
}
 8003918:	bf00      	nop
 800391a:	e7fe      	b.n	800391a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <prvSwitchTimerLists+0xbc>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1b4      	bne.n	8003890 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003926:	4b07      	ldr	r3, [pc, #28]	; (8003944 <prvSwitchTimerLists+0xbc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <prvSwitchTimerLists+0xc0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a04      	ldr	r2, [pc, #16]	; (8003944 <prvSwitchTimerLists+0xbc>)
 8003932:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003934:	4a04      	ldr	r2, [pc, #16]	; (8003948 <prvSwitchTimerLists+0xc0>)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	6013      	str	r3, [r2, #0]
}
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000ca8 	.word	0x20000ca8
 8003948:	20000cac 	.word	0x20000cac

0800394c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003952:	f000 f92b 	bl	8003bac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <prvCheckForValidListAndQueue+0x60>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d120      	bne.n	80039a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800395e:	4814      	ldr	r0, [pc, #80]	; (80039b0 <prvCheckForValidListAndQueue+0x64>)
 8003960:	f7fe f894 	bl	8001a8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003964:	4813      	ldr	r0, [pc, #76]	; (80039b4 <prvCheckForValidListAndQueue+0x68>)
 8003966:	f7fe f891 	bl	8001a8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <prvCheckForValidListAndQueue+0x6c>)
 800396c:	4a10      	ldr	r2, [pc, #64]	; (80039b0 <prvCheckForValidListAndQueue+0x64>)
 800396e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003970:	4b12      	ldr	r3, [pc, #72]	; (80039bc <prvCheckForValidListAndQueue+0x70>)
 8003972:	4a10      	ldr	r2, [pc, #64]	; (80039b4 <prvCheckForValidListAndQueue+0x68>)
 8003974:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003976:	2300      	movs	r3, #0
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <prvCheckForValidListAndQueue+0x74>)
 800397c:	4a11      	ldr	r2, [pc, #68]	; (80039c4 <prvCheckForValidListAndQueue+0x78>)
 800397e:	2110      	movs	r1, #16
 8003980:	200a      	movs	r0, #10
 8003982:	f7fe f99b 	bl	8001cbc <xQueueGenericCreateStatic>
 8003986:	4603      	mov	r3, r0
 8003988:	4a08      	ldr	r2, [pc, #32]	; (80039ac <prvCheckForValidListAndQueue+0x60>)
 800398a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <prvCheckForValidListAndQueue+0x60>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <prvCheckForValidListAndQueue+0x60>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	490b      	ldr	r1, [pc, #44]	; (80039c8 <prvCheckForValidListAndQueue+0x7c>)
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe fdae 	bl	80024fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039a0:	f000 f934 	bl	8003c0c <vPortExitCritical>
}
 80039a4:	bf00      	nop
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000cb0 	.word	0x20000cb0
 80039b0:	20000c80 	.word	0x20000c80
 80039b4:	20000c94 	.word	0x20000c94
 80039b8:	20000ca8 	.word	0x20000ca8
 80039bc:	20000cac 	.word	0x20000cac
 80039c0:	20000d5c 	.word	0x20000d5c
 80039c4:	20000cbc 	.word	0x20000cbc
 80039c8:	0800421c 	.word	0x0800421c

080039cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3b04      	subs	r3, #4
 80039dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3b04      	subs	r3, #4
 80039ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f023 0201 	bic.w	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3b04      	subs	r3, #4
 80039fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80039fc:	4a08      	ldr	r2, [pc, #32]	; (8003a20 <pxPortInitialiseStack+0x54>)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3b14      	subs	r3, #20
 8003a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3b20      	subs	r3, #32
 8003a12:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a14:	68fb      	ldr	r3, [r7, #12]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	08003a25 	.word	0x08003a25

08003a24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <prvTaskExitError+0x54>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a36:	d00a      	beq.n	8003a4e <prvTaskExitError+0x2a>
	__asm volatile
 8003a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	60fb      	str	r3, [r7, #12]
}
 8003a4a:	bf00      	nop
 8003a4c:	e7fe      	b.n	8003a4c <prvTaskExitError+0x28>
	__asm volatile
 8003a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	60bb      	str	r3, [r7, #8]
}
 8003a60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a62:	bf00      	nop
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0fc      	beq.n	8003a64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a6a:	bf00      	nop
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	2000000c 	.word	0x2000000c
 8003a7c:	00000000 	.word	0x00000000

08003a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003a80:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <pxCurrentTCBConst2>)
 8003a82:	6819      	ldr	r1, [r3, #0]
 8003a84:	6808      	ldr	r0, [r1, #0]
 8003a86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a8a:	f380 8809 	msr	PSP, r0
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f04f 0000 	mov.w	r0, #0
 8003a96:	f380 8811 	msr	BASEPRI, r0
 8003a9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003a9e:	4770      	bx	lr

08003aa0 <pxCurrentTCBConst2>:
 8003aa0:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop

08003aa8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003aa8:	4806      	ldr	r0, [pc, #24]	; (8003ac4 <prvPortStartFirstTask+0x1c>)
 8003aaa:	6800      	ldr	r0, [r0, #0]
 8003aac:	6800      	ldr	r0, [r0, #0]
 8003aae:	f380 8808 	msr	MSP, r0
 8003ab2:	b662      	cpsie	i
 8003ab4:	b661      	cpsie	f
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	df00      	svc	0
 8003ac0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003ac2:	bf00      	nop
 8003ac4:	e000ed08 	.word	0xe000ed08

08003ac8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ace:	4b32      	ldr	r3, [pc, #200]	; (8003b98 <xPortStartScheduler+0xd0>)
 8003ad0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	22ff      	movs	r2, #255	; 0xff
 8003ade:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <xPortStartScheduler+0xd4>)
 8003af4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003af6:	4b2a      	ldr	r3, [pc, #168]	; (8003ba0 <xPortStartScheduler+0xd8>)
 8003af8:	2207      	movs	r2, #7
 8003afa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003afc:	e009      	b.n	8003b12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003afe:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <xPortStartScheduler+0xd8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	4a26      	ldr	r2, [pc, #152]	; (8003ba0 <xPortStartScheduler+0xd8>)
 8003b06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	2b80      	cmp	r3, #128	; 0x80
 8003b1c:	d0ef      	beq.n	8003afe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <xPortStartScheduler+0xd8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f1c3 0307 	rsb	r3, r3, #7
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d00a      	beq.n	8003b40 <xPortStartScheduler+0x78>
	__asm volatile
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	60bb      	str	r3, [r7, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	e7fe      	b.n	8003b3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b40:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <xPortStartScheduler+0xd8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <xPortStartScheduler+0xd8>)
 8003b48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <xPortStartScheduler+0xd8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b52:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <xPortStartScheduler+0xd8>)
 8003b54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b5e:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <xPortStartScheduler+0xdc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a10      	ldr	r2, [pc, #64]	; (8003ba4 <xPortStartScheduler+0xdc>)
 8003b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <xPortStartScheduler+0xdc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ba4 <xPortStartScheduler+0xdc>)
 8003b70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b76:	f000 f8b9 	bl	8003cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <xPortStartScheduler+0xe0>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b80:	f7ff ff92 	bl	8003aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b84:	f7ff f8c0 	bl	8002d08 <vTaskSwitchContext>
	prvTaskExitError();
 8003b88:	f7ff ff4c 	bl	8003a24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	e000e400 	.word	0xe000e400
 8003b9c:	20000dac 	.word	0x20000dac
 8003ba0:	20000db0 	.word	0x20000db0
 8003ba4:	e000ed20 	.word	0xe000ed20
 8003ba8:	2000000c 	.word	0x2000000c

08003bac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
	__asm volatile
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	607b      	str	r3, [r7, #4]
}
 8003bc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003bc6:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <vPortEnterCritical+0x58>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	4a0d      	ldr	r2, [pc, #52]	; (8003c04 <vPortEnterCritical+0x58>)
 8003bce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <vPortEnterCritical+0x58>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d10f      	bne.n	8003bf8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <vPortEnterCritical+0x5c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <vPortEnterCritical+0x4c>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	603b      	str	r3, [r7, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <vPortEnterCritical+0x4a>
	}
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	2000000c 	.word	0x2000000c
 8003c08:	e000ed04 	.word	0xe000ed04

08003c0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003c12:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <vPortExitCritical+0x4c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <vPortExitCritical+0x24>
	__asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	607b      	str	r3, [r7, #4]
}
 8003c2c:	bf00      	nop
 8003c2e:	e7fe      	b.n	8003c2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <vPortExitCritical+0x4c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	4a08      	ldr	r2, [pc, #32]	; (8003c58 <vPortExitCritical+0x4c>)
 8003c38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c3a:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <vPortExitCritical+0x4c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <vPortExitCritical+0x42>
 8003c42:	2300      	movs	r3, #0
 8003c44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	f383 8811 	msr	BASEPRI, r3
}
 8003c4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	2000000c 	.word	0x2000000c
 8003c5c:	00000000 	.word	0x00000000

08003c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c60:	f3ef 8009 	mrs	r0, PSP
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	4b0d      	ldr	r3, [pc, #52]	; (8003ca0 <pxCurrentTCBConst>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c70:	6010      	str	r0, [r2, #0]
 8003c72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003c76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c7a:	f380 8811 	msr	BASEPRI, r0
 8003c7e:	f7ff f843 	bl	8002d08 <vTaskSwitchContext>
 8003c82:	f04f 0000 	mov.w	r0, #0
 8003c86:	f380 8811 	msr	BASEPRI, r0
 8003c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003c8e:	6819      	ldr	r1, [r3, #0]
 8003c90:	6808      	ldr	r0, [r1, #0]
 8003c92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c96:	f380 8809 	msr	PSP, r0
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	4770      	bx	lr

08003ca0 <pxCurrentTCBConst>:
 8003ca0:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop

08003ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
	__asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	607b      	str	r3, [r7, #4]
}
 8003cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003cc2:	f7fe ff63 	bl	8002b8c <xTaskIncrementTick>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <SysTick_Handler+0x40>)
 8003cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f383 8811 	msr	BASEPRI, r3
}
 8003cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	e000ed04 	.word	0xe000ed04

08003cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <vPortSetupTimerInterrupt+0x30>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <vPortSetupTimerInterrupt+0x34>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003cfc:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <vPortSetupTimerInterrupt+0x38>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <vPortSetupTimerInterrupt+0x3c>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	099b      	lsrs	r3, r3, #6
 8003d08:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <vPortSetupTimerInterrupt+0x40>)
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d0e:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <vPortSetupTimerInterrupt+0x30>)
 8003d10:	2207      	movs	r2, #7
 8003d12:	601a      	str	r2, [r3, #0]
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	e000e010 	.word	0xe000e010
 8003d20:	e000e018 	.word	0xe000e018
 8003d24:	20000000 	.word	0x20000000
 8003d28:	10624dd3 	.word	0x10624dd3
 8003d2c:	e000e014 	.word	0xe000e014

08003d30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003d36:	f3ef 8305 	mrs	r3, IPSR
 8003d3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b0f      	cmp	r3, #15
 8003d40:	d914      	bls.n	8003d6c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d42:	4a16      	ldr	r2, [pc, #88]	; (8003d9c <vPortValidateInterruptPriority+0x6c>)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003d4c:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <vPortValidateInterruptPriority+0x70>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	7afa      	ldrb	r2, [r7, #11]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d20a      	bcs.n	8003d6c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	607b      	str	r3, [r7, #4]
}
 8003d68:	bf00      	nop
 8003d6a:	e7fe      	b.n	8003d6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <vPortValidateInterruptPriority+0x74>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <vPortValidateInterruptPriority+0x78>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d90a      	bls.n	8003d92 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	603b      	str	r3, [r7, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	e7fe      	b.n	8003d90 <vPortValidateInterruptPriority+0x60>
	}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	e000e3f0 	.word	0xe000e3f0
 8003da0:	20000dac 	.word	0x20000dac
 8003da4:	e000ed0c 	.word	0xe000ed0c
 8003da8:	20000db0 	.word	0x20000db0

08003dac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003db8:	f7fe fe2e 	bl	8002a18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003dbc:	4b58      	ldr	r3, [pc, #352]	; (8003f20 <pvPortMalloc+0x174>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003dc4:	f000 f910 	bl	8003fe8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003dc8:	4b56      	ldr	r3, [pc, #344]	; (8003f24 <pvPortMalloc+0x178>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f040 808e 	bne.w	8003ef2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01d      	beq.n	8003e18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003ddc:	2208      	movs	r2, #8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d014      	beq.n	8003e18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f023 0307 	bic.w	r3, r3, #7
 8003df4:	3308      	adds	r3, #8
 8003df6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <pvPortMalloc+0x6c>
	__asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	617b      	str	r3, [r7, #20]
}
 8003e14:	bf00      	nop
 8003e16:	e7fe      	b.n	8003e16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d069      	beq.n	8003ef2 <pvPortMalloc+0x146>
 8003e1e:	4b42      	ldr	r3, [pc, #264]	; (8003f28 <pvPortMalloc+0x17c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d864      	bhi.n	8003ef2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e28:	4b40      	ldr	r3, [pc, #256]	; (8003f2c <pvPortMalloc+0x180>)
 8003e2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003e2c:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <pvPortMalloc+0x180>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e32:	e004      	b.n	8003e3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d903      	bls.n	8003e50 <pvPortMalloc+0xa4>
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f1      	bne.n	8003e34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e50:	4b33      	ldr	r3, [pc, #204]	; (8003f20 <pvPortMalloc+0x174>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d04b      	beq.n	8003ef2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2208      	movs	r2, #8
 8003e60:	4413      	add	r3, r2
 8003e62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	1ad2      	subs	r2, r2, r3
 8003e74:	2308      	movs	r3, #8
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d91f      	bls.n	8003ebc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <pvPortMalloc+0xf8>
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	613b      	str	r3, [r7, #16]
}
 8003ea0:	bf00      	nop
 8003ea2:	e7fe      	b.n	8003ea2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1ad2      	subs	r2, r2, r3
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003eb6:	69b8      	ldr	r0, [r7, #24]
 8003eb8:	f000 f8f8 	bl	80040ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ebc:	4b1a      	ldr	r3, [pc, #104]	; (8003f28 <pvPortMalloc+0x17c>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <pvPortMalloc+0x17c>)
 8003ec8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003eca:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <pvPortMalloc+0x17c>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <pvPortMalloc+0x184>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d203      	bcs.n	8003ede <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ed6:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <pvPortMalloc+0x17c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a15      	ldr	r2, [pc, #84]	; (8003f30 <pvPortMalloc+0x184>)
 8003edc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	4b10      	ldr	r3, [pc, #64]	; (8003f24 <pvPortMalloc+0x178>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ef2:	f7fe fd9f 	bl	8002a34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <pvPortMalloc+0x16a>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	60fb      	str	r3, [r7, #12]
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <pvPortMalloc+0x168>
	return pvReturn;
 8003f16:	69fb      	ldr	r3, [r7, #28]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3728      	adds	r7, #40	; 0x28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	200019bc 	.word	0x200019bc
 8003f24:	200019c8 	.word	0x200019c8
 8003f28:	200019c0 	.word	0x200019c0
 8003f2c:	200019b4 	.word	0x200019b4
 8003f30:	200019c4 	.word	0x200019c4

08003f34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d048      	beq.n	8003fd8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f46:	2308      	movs	r3, #8
 8003f48:	425b      	negs	r3, r3
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	4b21      	ldr	r3, [pc, #132]	; (8003fe0 <vPortFree+0xac>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10a      	bne.n	8003f78 <vPortFree+0x44>
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	60fb      	str	r3, [r7, #12]
}
 8003f74:	bf00      	nop
 8003f76:	e7fe      	b.n	8003f76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <vPortFree+0x62>
	__asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	60bb      	str	r3, [r7, #8]
}
 8003f92:	bf00      	nop
 8003f94:	e7fe      	b.n	8003f94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <vPortFree+0xac>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d019      	beq.n	8003fd8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d115      	bne.n	8003fd8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <vPortFree+0xac>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003fbc:	f7fe fd2c 	bl	8002a18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <vPortFree+0xb0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4413      	add	r3, r2
 8003fca:	4a06      	ldr	r2, [pc, #24]	; (8003fe4 <vPortFree+0xb0>)
 8003fcc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003fce:	6938      	ldr	r0, [r7, #16]
 8003fd0:	f000 f86c 	bl	80040ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003fd4:	f7fe fd2e 	bl	8002a34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003fd8:	bf00      	nop
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	200019c8 	.word	0x200019c8
 8003fe4:	200019c0 	.word	0x200019c0

08003fe8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003fee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ff2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ff4:	4b27      	ldr	r3, [pc, #156]	; (8004094 <prvHeapInit+0xac>)
 8003ff6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00c      	beq.n	800401c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3307      	adds	r3, #7
 8004006:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0307 	bic.w	r3, r3, #7
 800400e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <prvHeapInit+0xac>)
 8004018:	4413      	add	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004020:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <prvHeapInit+0xb0>)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004026:	4b1c      	ldr	r3, [pc, #112]	; (8004098 <prvHeapInit+0xb0>)
 8004028:	2200      	movs	r2, #0
 800402a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4413      	add	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004034:	2208      	movs	r2, #8
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0307 	bic.w	r3, r3, #7
 8004042:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4a15      	ldr	r2, [pc, #84]	; (800409c <prvHeapInit+0xb4>)
 8004048:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <prvHeapInit+0xb4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2200      	movs	r2, #0
 8004050:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004052:	4b12      	ldr	r3, [pc, #72]	; (800409c <prvHeapInit+0xb4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	1ad2      	subs	r2, r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <prvHeapInit+0xb4>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <prvHeapInit+0xb8>)
 8004076:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4a09      	ldr	r2, [pc, #36]	; (80040a4 <prvHeapInit+0xbc>)
 800407e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004080:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <prvHeapInit+0xc0>)
 8004082:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004086:	601a      	str	r2, [r3, #0]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000db4 	.word	0x20000db4
 8004098:	200019b4 	.word	0x200019b4
 800409c:	200019bc 	.word	0x200019bc
 80040a0:	200019c4 	.word	0x200019c4
 80040a4:	200019c0 	.word	0x200019c0
 80040a8:	200019c8 	.word	0x200019c8

080040ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040b4:	4b27      	ldr	r3, [pc, #156]	; (8004154 <prvInsertBlockIntoFreeList+0xa8>)
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	e002      	b.n	80040c0 <prvInsertBlockIntoFreeList+0x14>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d8f7      	bhi.n	80040ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	4413      	add	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d108      	bne.n	80040ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	441a      	add	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	441a      	add	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d118      	bne.n	8004134 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <prvInsertBlockIntoFreeList+0xac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d00d      	beq.n	800412a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	441a      	add	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e008      	b.n	800413c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <prvInsertBlockIntoFreeList+0xac>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	e003      	b.n	800413c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	429a      	cmp	r2, r3
 8004142:	d002      	beq.n	800414a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800414a:	bf00      	nop
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	200019b4 	.word	0x200019b4
 8004158:	200019bc 	.word	0x200019bc

0800415c <memset>:
 800415c:	4603      	mov	r3, r0
 800415e:	4402      	add	r2, r0
 8004160:	4293      	cmp	r3, r2
 8004162:	d100      	bne.n	8004166 <memset+0xa>
 8004164:	4770      	bx	lr
 8004166:	f803 1b01 	strb.w	r1, [r3], #1
 800416a:	e7f9      	b.n	8004160 <memset+0x4>

0800416c <__libc_init_array>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	2600      	movs	r6, #0
 8004170:	4d0c      	ldr	r5, [pc, #48]	; (80041a4 <__libc_init_array+0x38>)
 8004172:	4c0d      	ldr	r4, [pc, #52]	; (80041a8 <__libc_init_array+0x3c>)
 8004174:	1b64      	subs	r4, r4, r5
 8004176:	10a4      	asrs	r4, r4, #2
 8004178:	42a6      	cmp	r6, r4
 800417a:	d109      	bne.n	8004190 <__libc_init_array+0x24>
 800417c:	f000 f828 	bl	80041d0 <_init>
 8004180:	2600      	movs	r6, #0
 8004182:	4d0a      	ldr	r5, [pc, #40]	; (80041ac <__libc_init_array+0x40>)
 8004184:	4c0a      	ldr	r4, [pc, #40]	; (80041b0 <__libc_init_array+0x44>)
 8004186:	1b64      	subs	r4, r4, r5
 8004188:	10a4      	asrs	r4, r4, #2
 800418a:	42a6      	cmp	r6, r4
 800418c:	d105      	bne.n	800419a <__libc_init_array+0x2e>
 800418e:	bd70      	pop	{r4, r5, r6, pc}
 8004190:	f855 3b04 	ldr.w	r3, [r5], #4
 8004194:	4798      	blx	r3
 8004196:	3601      	adds	r6, #1
 8004198:	e7ee      	b.n	8004178 <__libc_init_array+0xc>
 800419a:	f855 3b04 	ldr.w	r3, [r5], #4
 800419e:	4798      	blx	r3
 80041a0:	3601      	adds	r6, #1
 80041a2:	e7f2      	b.n	800418a <__libc_init_array+0x1e>
 80041a4:	080042bc 	.word	0x080042bc
 80041a8:	080042bc 	.word	0x080042bc
 80041ac:	080042bc 	.word	0x080042bc
 80041b0:	080042c0 	.word	0x080042c0

080041b4 <memcpy>:
 80041b4:	440a      	add	r2, r1
 80041b6:	4291      	cmp	r1, r2
 80041b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80041bc:	d100      	bne.n	80041c0 <memcpy+0xc>
 80041be:	4770      	bx	lr
 80041c0:	b510      	push	{r4, lr}
 80041c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041c6:	4291      	cmp	r1, r2
 80041c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041cc:	d1f9      	bne.n	80041c2 <memcpy+0xe>
 80041ce:	bd10      	pop	{r4, pc}

080041d0 <_init>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	bf00      	nop
 80041d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	469e      	mov	lr, r3
 80041da:	4770      	bx	lr

080041dc <_fini>:
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	bf00      	nop
 80041e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e2:	bc08      	pop	{r3}
 80041e4:	469e      	mov	lr, r3
 80041e6:	4770      	bx	lr
