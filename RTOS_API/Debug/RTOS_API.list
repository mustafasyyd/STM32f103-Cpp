
RTOS_API.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001810  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001920  08001920  00011920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800194c  0800194c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800194c  0800194c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800194c  0800194c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800194c  0800194c  0001194c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001950  08001950  00011950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002948  20000018  0800196c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002960  0800196c  00022960  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   000046ab  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000131c  00000000  00000000  0002472f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005d0  00000000  00000000  00025a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000447  00000000  00000000  00026020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014e1a  00000000  00000000  00026467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005b83  00000000  00000000  0003b281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008624b  00000000  00000000  00040e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000015dc  00000000  00000000  000c7050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c862c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08001908 	.word	0x08001908

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08001908 	.word	0x08001908

08000150 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b08a      	sub	sp, #40	; 0x28
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 8000158:	2300      	movs	r3, #0
 800015a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800015c:	f000 fd2c 	bl	8000bb8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 8000160:	4b46      	ldr	r3, [pc, #280]	; (800027c <pvPortMalloc+0x12c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d104      	bne.n	8000172 <pvPortMalloc+0x22>
        {
            prvHeapInit();
 8000168:	f000 f8dc 	bl	8000324 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 800016c:	4b43      	ldr	r3, [pc, #268]	; (800027c <pvPortMalloc+0x12c>)
 800016e:	2201      	movs	r2, #1
 8000170:	601a      	str	r2, [r3, #0]
        }

        if( xWantedSize > 0 )
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d013      	beq.n	80001a0 <pvPortMalloc+0x50>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = heapSTRUCT_SIZE + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8000178:	2308      	movs	r3, #8
 800017a:	461a      	mov	r2, r3
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	f003 0307 	and.w	r3, r3, #7
 8000182:	1ad3      	subs	r3, r2, r3
 8000184:	3308      	adds	r3, #8
 8000186:	617b      	str	r3, [r7, #20]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8000188:	697b      	ldr	r3, [r7, #20]
 800018a:	43db      	mvns	r3, r3
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	429a      	cmp	r2, r3
 8000190:	d804      	bhi.n	800019c <pvPortMalloc+0x4c>
            {
                xWantedSize += xAdditionalRequiredSize;
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	697b      	ldr	r3, [r7, #20]
 8000196:	4413      	add	r3, r2
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	e001      	b.n	80001a0 <pvPortMalloc+0x50>
            }
            else
            {
                xWantedSize = 0;
 800019c:	2300      	movs	r3, #0
 800019e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	db63      	blt.n	800026e <pvPortMalloc+0x11e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d060      	beq.n	800026e <pvPortMalloc+0x11e>
 80001ac:	4b34      	ldr	r3, [pc, #208]	; (8000280 <pvPortMalloc+0x130>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	687a      	ldr	r2, [r7, #4]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d85b      	bhi.n	800026e <pvPortMalloc+0x11e>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80001b6:	4b33      	ldr	r3, [pc, #204]	; (8000284 <pvPortMalloc+0x134>)
 80001b8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80001ba:	4b32      	ldr	r3, [pc, #200]	; (8000284 <pvPortMalloc+0x134>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80001c0:	e004      	b.n	80001cc <pvPortMalloc+0x7c>
                {
                    pxPreviousBlock = pxBlock;
 80001c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001c4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80001c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80001cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d903      	bls.n	80001de <pvPortMalloc+0x8e>
 80001d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d1f1      	bne.n	80001c2 <pvPortMalloc+0x72>
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
 80001de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001e0:	4a29      	ldr	r2, [pc, #164]	; (8000288 <pvPortMalloc+0x138>)
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d043      	beq.n	800026e <pvPortMalloc+0x11e>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80001e6:	6a3b      	ldr	r3, [r7, #32]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2208      	movs	r2, #8
 80001ec:	4413      	add	r3, r2
 80001ee:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80001f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	6a3b      	ldr	r3, [r7, #32]
 80001f6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80001f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001fa:	685a      	ldr	r2, [r3, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	1ad3      	subs	r3, r2, r3
 8000200:	2208      	movs	r2, #8
 8000202:	0052      	lsls	r2, r2, #1
 8000204:	4293      	cmp	r3, r2
 8000206:	d922      	bls.n	800024e <pvPortMalloc+0xfe>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	613b      	str	r3, [r7, #16]

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000212:	685a      	ldr	r2, [r3, #4]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1ad2      	subs	r2, r2, r3
 8000218:	693b      	ldr	r3, [r7, #16]
 800021a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	4b16      	ldr	r3, [pc, #88]	; (8000284 <pvPortMalloc+0x134>)
 800022a:	61bb      	str	r3, [r7, #24]
 800022c:	e002      	b.n	8000234 <pvPortMalloc+0xe4>
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	61bb      	str	r3, [r7, #24]
 8000234:	69bb      	ldr	r3, [r7, #24]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	429a      	cmp	r2, r3
 800023e:	d8f6      	bhi.n	800022e <pvPortMalloc+0xde>
 8000240:	69bb      	ldr	r3, [r7, #24]
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	693b      	ldr	r3, [r7, #16]
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	69bb      	ldr	r3, [r7, #24]
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	601a      	str	r2, [r3, #0]
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <pvPortMalloc+0x130>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	1ad3      	subs	r3, r2, r3
 8000258:	4a09      	ldr	r2, [pc, #36]	; (8000280 <pvPortMalloc+0x130>)
 800025a:	6013      	str	r3, [r2, #0]

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000266:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800026e:	f000 fcb1 	bl	8000bd4 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8000272:	69fb      	ldr	r3, [r7, #28]
}
 8000274:	4618      	mov	r0, r3
 8000276:	3728      	adds	r7, #40	; 0x28
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20002844 	.word	0x20002844
 8000280:	20000000 	.word	0x20000000
 8000284:	20002834 	.word	0x20002834
 8000288:	2000283c 	.word	0x2000283c

0800028c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d039      	beq.n	8000312 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 800029e:	2308      	movs	r3, #8
 80002a0:	425b      	negs	r3, r3
 80002a2:	693a      	ldr	r2, [r7, #16]
 80002a4:	4413      	add	r3, r2
 80002a6:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	60fb      	str	r3, [r7, #12]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	0fdb      	lsrs	r3, r3, #31
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d02a      	beq.n	8000312 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d126      	bne.n	8000312 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + heapSTRUCT_SIZE, 0, pxLink->xBlockSize - heapSTRUCT_SIZE );
                }
                #endif

                vTaskSuspendAll();
 80002d0:	f000 fc72 	bl	8000bb8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <vPortFree+0x90>)
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	e002      	b.n	80002e6 <vPortFree+0x5a>
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d8f6      	bhi.n	80002e0 <vPortFree+0x54>
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	601a      	str	r2, [r3, #0]
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685a      	ldr	r2, [r3, #4]
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <vPortFree+0x94>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4413      	add	r3, r2
 800030a:	4a05      	ldr	r2, [pc, #20]	; (8000320 <vPortFree+0x94>)
 800030c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
 800030e:	f000 fc61 	bl	8000bd4 <xTaskResumeAll>
            }
        }
    }
}
 8000312:	bf00      	nop
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20002834 	.word	0x20002834
 8000320:	20000000 	.word	0x20000000

08000324 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <prvHeapInit+0x44>)
 800032c:	f023 0307 	bic.w	r3, r3, #7
 8000330:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000332:	4a0e      	ldr	r2, [pc, #56]	; (800036c <prvHeapInit+0x48>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <prvHeapInit+0x48>)
 800033a:	2200      	movs	r2, #0
 800033c:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <prvHeapInit+0x4c>)
 8000340:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000344:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 8000346:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <prvHeapInit+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000356:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	4a05      	ldr	r2, [pc, #20]	; (8000370 <prvHeapInit+0x4c>)
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	2000003b 	.word	0x2000003b
 800036c:	20002834 	.word	0x20002834
 8000370:	2000283c 	.word	0x2000283c

08000374 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f103 0208 	add.w	r2, r3, #8
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800038c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f103 0208 	add.w	r2, r3, #8
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f103 0208 	add.w	r2, r3, #8
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr

080003b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80003b2:	b480      	push	{r7}
 80003b4:	b083      	sub	sp, #12
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr

080003ca <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80003ca:	b480      	push	{r7}
 80003cc:	b085      	sub	sp, #20
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
 80003d2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80003e0:	d103      	bne.n	80003ea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	691b      	ldr	r3, [r3, #16]
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	e00c      	b.n	8000404 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3308      	adds	r3, #8
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	e002      	b.n	80003f8 <vListInsert+0x2e>
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	68ba      	ldr	r2, [r7, #8]
 8000400:	429a      	cmp	r2, r3
 8000402:	d2f6      	bcs.n	80003f2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	685a      	ldr	r2, [r3, #4]
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	683a      	ldr	r2, [r7, #0]
 800041e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	1c5a      	adds	r2, r3, #1
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	601a      	str	r2, [r3, #0]
}
 8000430:	bf00      	nop
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800043a:	b480      	push	{r7}
 800043c:	b085      	sub	sp, #20
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	691b      	ldr	r3, [r3, #16]
 8000446:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	6892      	ldr	r2, [r2, #8]
 8000450:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	6852      	ldr	r2, [r2, #4]
 800045a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	429a      	cmp	r2, r3
 8000464:	d103      	bne.n	800046e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	689a      	ldr	r2, [r3, #8]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	1e5a      	subs	r2, r3, #1
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	681b      	ldr	r3, [r3, #0]
}
 8000482:	4618      	mov	r0, r3
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr

0800048c <main>:
void LED_01( void * pv );
void LED_02( void * pv );
void LED_03( void * pv );

int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af02      	add	r7, sp, #8
  HAL_Init();
 8000492:	f000 ff2d 	bl	80012f0 <HAL_Init>
  MX_GPIO_Init();
 8000496:	f000 f831 	bl	80004fc <MX_GPIO_Init>
//
//  RCC->APB2ENR |= (1<<2) | (1<<4);
//  GPIOC->CRH |= (3<<20);
//  GPIOA->CRL |= (3<<4) | (3<<8);

  xTaskCreate(LED_01 , "Led01 Task", 300, NULL, 1, NULL);
 800049a:	2300      	movs	r3, #0
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	2300      	movs	r3, #0
 80004a4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004a8:	490e      	ldr	r1, [pc, #56]	; (80004e4 <main+0x58>)
 80004aa:	480f      	ldr	r0, [pc, #60]	; (80004e8 <main+0x5c>)
 80004ac:	f000 f9d8 	bl	8000860 <xTaskCreate>
  xTaskCreate(LED_02 , "Led02 Task", 300, NULL, 2, NULL);
 80004b0:	2300      	movs	r3, #0
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	2302      	movs	r3, #2
 80004b6:	9300      	str	r3, [sp, #0]
 80004b8:	2300      	movs	r3, #0
 80004ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004be:	490b      	ldr	r1, [pc, #44]	; (80004ec <main+0x60>)
 80004c0:	480b      	ldr	r0, [pc, #44]	; (80004f0 <main+0x64>)
 80004c2:	f000 f9cd 	bl	8000860 <xTaskCreate>
  xTaskCreate(LED_03 , "Led03 Task", 300, NULL, 3, NULL);
 80004c6:	2300      	movs	r3, #0
 80004c8:	9301      	str	r3, [sp, #4]
 80004ca:	2303      	movs	r3, #3
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2300      	movs	r3, #0
 80004d0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004d4:	4907      	ldr	r1, [pc, #28]	; (80004f4 <main+0x68>)
 80004d6:	4808      	ldr	r0, [pc, #32]	; (80004f8 <main+0x6c>)
 80004d8:	f000 f9c2 	bl	8000860 <xTaskCreate>

  vTaskStartScheduler();
 80004dc:	f000 fb30 	bl	8000b40 <vTaskStartScheduler>

  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x54>
 80004e2:	bf00      	nop
 80004e4:	08001920 	.word	0x08001920
 80004e8:	08000565 	.word	0x08000565
 80004ec:	0800192c 	.word	0x0800192c
 80004f0:	08000585 	.word	0x08000585
 80004f4:	08001938 	.word	0x08001938
 80004f8:	080005a5 	.word	0x080005a5

080004fc <MX_GPIO_Init>:
  }

}

static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0308 	add.w	r3, r7, #8
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_GPIO_Init+0x60>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a11      	ldr	r2, [pc, #68]	; (800055c <MX_GPIO_Init+0x60>)
 8000516:	f043 0310 	orr.w	r3, r3, #16
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_GPIO_Init+0x60>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0310 	and.w	r3, r3, #16
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800052e:	480c      	ldr	r0, [pc, #48]	; (8000560 <MX_GPIO_Init+0x64>)
 8000530:	f001 f98c 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000534:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000538:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	2301      	movs	r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	2302      	movs	r3, #2
 8000544:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	4619      	mov	r1, r3
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <MX_GPIO_Init+0x64>)
 800054e:	f000 fff9 	bl	8001544 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000552:	bf00      	nop
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	40011000 	.word	0x40011000

08000564 <LED_01>:

void LED_01( void * pv )
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	for(;;)
    {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <LED_01+0x1c>)
 8000572:	f001 f983 	bl	800187c <HAL_GPIO_TogglePin>
		vTaskDelay(100/portTICK_PERIOD_MS);
 8000576:	2064      	movs	r0, #100	; 0x64
 8000578:	f000 fabe 	bl	8000af8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800057c:	e7f6      	b.n	800056c <LED_01+0x8>
 800057e:	bf00      	nop
 8000580:	40011000 	.word	0x40011000

08000584 <LED_02>:
     }
}

void LED_02( void * pv )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	for(;;)
    {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 800058c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <LED_02+0x1c>)
 8000592:	f001 f973 	bl	800187c <HAL_GPIO_TogglePin>
		vTaskDelay(250/portTICK_PERIOD_MS);
 8000596:	20fa      	movs	r0, #250	; 0xfa
 8000598:	f000 faae 	bl	8000af8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 800059c:	e7f6      	b.n	800058c <LED_02+0x8>
 800059e:	bf00      	nop
 80005a0:	40011000 	.word	0x40011000

080005a4 <LED_03>:
    }
}


void LED_03( void * pv )
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	for(;;)
    {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80005ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <LED_03+0x1c>)
 80005b2:	f001 f963 	bl	800187c <HAL_GPIO_TogglePin>
		vTaskDelay(500/portTICK_PERIOD_MS);
 80005b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ba:	f000 fa9d 	bl	8000af8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80005be:	e7f5      	b.n	80005ac <LED_03+0x8>
 80005c0:	40011000 	.word	0x40011000

080005c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3b04      	subs	r3, #4
 80005d4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3b04      	subs	r3, #4
 80005e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	f023 0201 	bic.w	r2, r3, #1
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	3b04      	subs	r3, #4
 80005f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80005f4:	4a08      	ldr	r2, [pc, #32]	; (8000618 <pxPortInitialiseStack+0x54>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3b14      	subs	r3, #20
 80005fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3b20      	subs	r3, #32
 800060a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800060c:	68fb      	ldr	r3, [r7, #12]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	0800061d 	.word	0x0800061d

0800061c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000626:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800062a:	f383 8811 	msr	BASEPRI, r3
 800062e:	f3bf 8f6f 	isb	sy
 8000632:	f3bf 8f4f 	dsb	sy
 8000636:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000638:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800063a:	bf00      	nop
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0fc      	beq.n	800063c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
	...

08000650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <pxCurrentTCBConst2>)
 8000652:	6819      	ldr	r1, [r3, #0]
 8000654:	6808      	ldr	r0, [r1, #0]
 8000656:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800065a:	f380 8809 	msr	PSP, r0
 800065e:	f3bf 8f6f 	isb	sy
 8000662:	f04f 0000 	mov.w	r0, #0
 8000666:	f380 8811 	msr	BASEPRI, r0
 800066a:	f04e 0e0d 	orr.w	lr, lr, #13
 800066e:	4770      	bx	lr

08000670 <pxCurrentTCBConst2>:
 8000670:	20002848 	.word	0x20002848
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop

08000678 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000678:	4806      	ldr	r0, [pc, #24]	; (8000694 <prvPortStartFirstTask+0x1c>)
 800067a:	6800      	ldr	r0, [r0, #0]
 800067c:	6800      	ldr	r0, [r0, #0]
 800067e:	f380 8808 	msr	MSP, r0
 8000682:	b662      	cpsie	i
 8000684:	b661      	cpsie	f
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	f3bf 8f6f 	isb	sy
 800068e:	df00      	svc	0
 8000690:	bf00      	nop
 8000692:	0000      	.short	0x0000
 8000694:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop

0800069c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <xPortStartScheduler+0x38>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <xPortStartScheduler+0x38>)
 80006a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80006aa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <xPortStartScheduler+0x38>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <xPortStartScheduler+0x38>)
 80006b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80006b6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80006b8:	f000 f890 	bl	80007dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <xPortStartScheduler+0x3c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80006c2:	f7ff ffd9 	bl	8000678 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80006c6:	f000 fc77 	bl	8000fb8 <vTaskSwitchContext>
    prvTaskExitError();
 80006ca:	f7ff ffa7 	bl	800061c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	e000ed20 	.word	0xe000ed20
 80006d8:	20000004 	.word	0x20000004

080006dc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
        __asm volatile
 80006e2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80006e6:	f383 8811 	msr	BASEPRI, r3
 80006ea:	f3bf 8f6f 	isb	sy
 80006ee:	f3bf 8f4f 	dsb	sy
 80006f2:	607b      	str	r3, [r7, #4]
    }
 80006f4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <vPortEnterCritical+0x30>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	4a03      	ldr	r2, [pc, #12]	; (800070c <vPortEnterCritical+0x30>)
 80006fe:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000004 	.word	0x20000004

08000710 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <vPortExitCritical+0x30>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3b01      	subs	r3, #1
 800071c:	4a08      	ldr	r2, [pc, #32]	; (8000740 <vPortExitCritical+0x30>)
 800071e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <vPortExitCritical+0x30>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d105      	bne.n	8000734 <vPortExitCritical+0x24>
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000732:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000004 	.word	0x20000004
	...

08000750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000750:	f3ef 8009 	mrs	r0, PSP
 8000754:	f3bf 8f6f 	isb	sy
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <pxCurrentTCBConst>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000760:	6010      	str	r0, [r2, #0]
 8000762:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000766:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800076a:	f380 8811 	msr	BASEPRI, r0
 800076e:	f000 fc23 	bl	8000fb8 <vTaskSwitchContext>
 8000772:	f04f 0000 	mov.w	r0, #0
 8000776:	f380 8811 	msr	BASEPRI, r0
 800077a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800077e:	6819      	ldr	r1, [r3, #0]
 8000780:	6808      	ldr	r0, [r1, #0]
 8000782:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000786:	f380 8809 	msr	PSP, r0
 800078a:	f3bf 8f6f 	isb	sy
 800078e:	4770      	bx	lr

08000790 <pxCurrentTCBConst>:
 8000790:	20002848 	.word	0x20002848
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop

08000798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
        __asm volatile
 800079e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80007a2:	f383 8811 	msr	BASEPRI, r3
 80007a6:	f3bf 8f6f 	isb	sy
 80007aa:	f3bf 8f4f 	dsb	sy
 80007ae:	607b      	str	r3, [r7, #4]
    }
 80007b0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80007b2:	f000 fafb 	bl	8000dac <xTaskIncrementTick>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d003      	beq.n	80007c4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <SysTick_Handler+0x40>)
 80007be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	2300      	movs	r3, #0
 80007c6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	f383 8811 	msr	BASEPRI, r3
    }
 80007ce:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	e000ed04 	.word	0xe000ed04

080007dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <vPortSetupTimerInterrupt+0x28>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <vPortSetupTimerInterrupt+0x2c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <vPortSetupTimerInterrupt+0x30>)
 80007ee:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007f2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <vPortSetupTimerInterrupt+0x28>)
 80007f6:	2207      	movs	r2, #7
 80007f8:	601a      	str	r2, [r3, #0]
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000e010 	.word	0xe000e010
 8000808:	e000e018 	.word	0xe000e018
 800080c:	e000e014 	.word	0xe000e014

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_MspInit+0x40>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <HAL_MspInit+0x40>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6193      	str	r3, [r2, #24]
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_MspInit+0x40>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_MspInit+0x40>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a07      	ldr	r2, [pc, #28]	; (8000850 <HAL_MspInit+0x40>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_MspInit+0x40>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	40021000 	.word	0x40021000

08000854 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af04      	add	r7, sp, #16
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	4613      	mov	r3, r2
 800086e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fc6b 	bl	8000150 <pvPortMalloc>
 800087a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d013      	beq.n	80008aa <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000882:	205c      	movs	r0, #92	; 0x5c
 8000884:	f7ff fc64 	bl	8000150 <pvPortMalloc>
 8000888:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d008      	beq.n	80008a2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000890:	225c      	movs	r2, #92	; 0x5c
 8000892:	2100      	movs	r1, #0
 8000894:	69f8      	ldr	r0, [r7, #28]
 8000896:	f001 f80a 	bl	80018ae <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
 80008a0:	e005      	b.n	80008ae <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80008a2:	6978      	ldr	r0, [r7, #20]
 80008a4:	f7ff fcf2 	bl	800028c <vPortFree>
 80008a8:	e001      	b.n	80008ae <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d013      	beq.n	80008dc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80008b4:	88fa      	ldrh	r2, [r7, #6]
 80008b6:	2300      	movs	r3, #0
 80008b8:	9303      	str	r3, [sp, #12]
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	9302      	str	r3, [sp, #8]
 80008be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f000 f80e 	bl	80008ec <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80008d0:	69f8      	ldr	r0, [r7, #28]
 80008d2:	f000 f87b 	bl	80009cc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	e002      	b.n	80008e2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80008dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008e0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80008e2:	69bb      	ldr	r3, [r7, #24]
    }
 80008e4:	4618      	mov	r0, r3
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
 80008f8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80008fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	461a      	mov	r2, r3
 8000904:	21a5      	movs	r1, #165	; 0xa5
 8000906:	f000 ffd2 	bl	80018ae <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000914:	3b01      	subs	r3, #1
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	f023 0307 	bic.w	r3, r3, #7
 8000922:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d01e      	beq.n	8000968 <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	e012      	b.n	8000956 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000930:	68ba      	ldr	r2, [r7, #8]
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	4413      	add	r3, r2
 8000936:	7819      	ldrb	r1, [r3, #0]
 8000938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	4413      	add	r3, r2
 800093e:	3334      	adds	r3, #52	; 0x34
 8000940:	460a      	mov	r2, r1
 8000942:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000944:	68ba      	ldr	r2, [r7, #8]
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	4413      	add	r3, r2
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d006      	beq.n	800095e <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	3301      	adds	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	2b0f      	cmp	r3, #15
 800095a:	d9e9      	bls.n	8000930 <prvInitialiseNewTask+0x44>
 800095c:	e000      	b.n	8000960 <prvInitialiseNewTask+0x74>
            {
                break;
 800095e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000968:	6a3b      	ldr	r3, [r7, #32]
 800096a:	2b05      	cmp	r3, #5
 800096c:	d901      	bls.n	8000972 <prvInitialiseNewTask+0x86>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800096e:	2305      	movs	r3, #5
 8000970:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000974:	6a3a      	ldr	r2, [r7, #32]
 8000976:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800097a:	6a3a      	ldr	r2, [r7, #32]
 800097c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000980:	3304      	adds	r3, #4
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fd15 	bl	80003b2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098a:	3318      	adds	r3, #24
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fd10 	bl	80003b2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000996:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000998:	6a3b      	ldr	r3, [r7, #32]
 800099a:	f1c3 0206 	rsb	r2, r3, #6
 800099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80009a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	68f9      	ldr	r1, [r7, #12]
 80009ac:	6938      	ldr	r0, [r7, #16]
 80009ae:	f7ff fe09 	bl	80005c4 <pxPortInitialiseStack>
 80009b2:	4602      	mov	r2, r0
 80009b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <prvInitialiseNewTask+0xd8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009c2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80009d4:	f7ff fe82 	bl	80006dc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80009d8:	4b40      	ldr	r3, [pc, #256]	; (8000adc <prvAddNewTaskToReadyList+0x110>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	4a3f      	ldr	r2, [pc, #252]	; (8000adc <prvAddNewTaskToReadyList+0x110>)
 80009e0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80009e2:	4b3f      	ldr	r3, [pc, #252]	; (8000ae0 <prvAddNewTaskToReadyList+0x114>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d109      	bne.n	80009fe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80009ea:	4a3d      	ldr	r2, [pc, #244]	; (8000ae0 <prvAddNewTaskToReadyList+0x114>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80009f0:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <prvAddNewTaskToReadyList+0x110>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d110      	bne.n	8000a1a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80009f8:	f000 fb3c 	bl	8001074 <prvInitialiseTaskLists>
 80009fc:	e00d      	b.n	8000a1a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80009fe:	4b39      	ldr	r3, [pc, #228]	; (8000ae4 <prvAddNewTaskToReadyList+0x118>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d109      	bne.n	8000a1a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000a06:	4b36      	ldr	r3, [pc, #216]	; (8000ae0 <prvAddNewTaskToReadyList+0x114>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d802      	bhi.n	8000a1a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000a14:	4a32      	ldr	r2, [pc, #200]	; (8000ae0 <prvAddNewTaskToReadyList+0x114>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000a1a:	4b33      	ldr	r3, [pc, #204]	; (8000ae8 <prvAddNewTaskToReadyList+0x11c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	4a31      	ldr	r2, [pc, #196]	; (8000ae8 <prvAddNewTaskToReadyList+0x11c>)
 8000a22:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <prvAddNewTaskToReadyList+0x11c>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	2201      	movs	r2, #1
 8000a32:	409a      	lsls	r2, r3
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <prvAddNewTaskToReadyList+0x120>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	4a2c      	ldr	r2, [pc, #176]	; (8000aec <prvAddNewTaskToReadyList+0x120>)
 8000a3c:	6013      	str	r3, [r2, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a42:	492b      	ldr	r1, [pc, #172]	; (8000af0 <prvAddNewTaskToReadyList+0x124>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	3304      	adds	r3, #4
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	689a      	ldr	r2, [r3, #8]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	3204      	adds	r2, #4
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	1d1a      	adds	r2, r3, #4
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a78:	4613      	mov	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <prvAddNewTaskToReadyList+0x124>)
 8000a82:	441a      	add	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	615a      	str	r2, [r3, #20]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a8c:	4918      	ldr	r1, [pc, #96]	; (8000af0 <prvAddNewTaskToReadyList+0x124>)
 8000a8e:	4613      	mov	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	440b      	add	r3, r1
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	1c59      	adds	r1, r3, #1
 8000a9c:	4814      	ldr	r0, [pc, #80]	; (8000af0 <prvAddNewTaskToReadyList+0x124>)
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4403      	add	r3, r0
 8000aa8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000aaa:	f7ff fe31 	bl	8000710 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <prvAddNewTaskToReadyList+0x118>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d00e      	beq.n	8000ad4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <prvAddNewTaskToReadyList+0x114>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <prvAddNewTaskToReadyList+0x128>)
 8000ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	f3bf 8f4f 	dsb	sy
 8000ad0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20002934 	.word	0x20002934
 8000ae0:	20002848 	.word	0x20002848
 8000ae4:	20002940 	.word	0x20002940
 8000ae8:	20002950 	.word	0x20002950
 8000aec:	2000293c 	.word	0x2000293c
 8000af0:	2000284c 	.word	0x2000284c
 8000af4:	e000ed04 	.word	0xe000ed04

08000af8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d008      	beq.n	8000b1c <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8000b0a:	f000 f855 	bl	8000bb8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000b0e:	2100      	movs	r1, #0
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 fb47 	bl	80011a4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000b16:	f000 f85d 	bl	8000bd4 <xTaskResumeAll>
 8000b1a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d107      	bne.n	8000b32 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <vTaskDelay+0x44>)
 8000b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	f3bf 8f4f 	dsb	sy
 8000b2e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	e000ed04 	.word	0xe000ed04

08000b40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <vTaskStartScheduler+0x5c>)
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b54:	4912      	ldr	r1, [pc, #72]	; (8000ba0 <vTaskStartScheduler+0x60>)
 8000b56:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <vTaskStartScheduler+0x64>)
 8000b58:	f7ff fe82 	bl	8000860 <xTaskCreate>
 8000b5c:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d115      	bne.n	8000b90 <vTaskStartScheduler+0x50>
        __asm volatile
 8000b64:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000b68:	f383 8811 	msr	BASEPRI, r3
 8000b6c:	f3bf 8f6f 	isb	sy
 8000b70:	f3bf 8f4f 	dsb	sy
 8000b74:	603b      	str	r3, [r7, #0]
    }
 8000b76:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <vTaskStartScheduler+0x68>)
 8000b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b7e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <vTaskStartScheduler+0x6c>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <vTaskStartScheduler+0x70>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000b8c:	f7ff fd86 	bl	800069c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <vTaskStartScheduler+0x74>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20002958 	.word	0x20002958
 8000ba0:	08001944 	.word	0x08001944
 8000ba4:	08001045 	.word	0x08001045
 8000ba8:	20002954 	.word	0x20002954
 8000bac:	20002940 	.word	0x20002940
 8000bb0:	20002938 	.word	0x20002938
 8000bb4:	2000000c 	.word	0x2000000c

08000bb8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <vTaskSuspendAll+0x18>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	4a03      	ldr	r2, [pc, #12]	; (8000bd0 <vTaskSuspendAll+0x18>)
 8000bc4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	2000295c 	.word	0x2000295c

08000bd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000be2:	f7ff fd7b 	bl	80006dc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000be6:	4b68      	ldr	r3, [pc, #416]	; (8000d88 <xTaskResumeAll+0x1b4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	4a66      	ldr	r2, [pc, #408]	; (8000d88 <xTaskResumeAll+0x1b4>)
 8000bee:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000bf0:	4b65      	ldr	r3, [pc, #404]	; (8000d88 <xTaskResumeAll+0x1b4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f040 80c0 	bne.w	8000d7a <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000bfa:	4b64      	ldr	r3, [pc, #400]	; (8000d8c <xTaskResumeAll+0x1b8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 80bb 	beq.w	8000d7a <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c04:	e08a      	b.n	8000d1c <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c06:	4b62      	ldr	r3, [pc, #392]	; (8000d90 <xTaskResumeAll+0x1bc>)
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	6a12      	ldr	r2, [r2, #32]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	6a1b      	ldr	r3, [r3, #32]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	69d2      	ldr	r2, [r2, #28]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3318      	adds	r3, #24
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d103      	bne.n	8000c3c <xTaskResumeAll+0x68>
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	6a1a      	ldr	r2, [r3, #32]
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	1e5a      	subs	r2, r3, #1
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	68d2      	ldr	r2, [r2, #12]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	6892      	ldr	r2, [r2, #8]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d103      	bne.n	8000c7a <xTaskResumeAll+0xa6>
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	1e5a      	subs	r2, r3, #1
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8e:	2201      	movs	r2, #1
 8000c90:	409a      	lsls	r2, r3
 8000c92:	4b40      	ldr	r3, [pc, #256]	; (8000d94 <xTaskResumeAll+0x1c0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	4a3e      	ldr	r2, [pc, #248]	; (8000d94 <xTaskResumeAll+0x1c0>)
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca0:	493d      	ldr	r1, [pc, #244]	; (8000d98 <xTaskResumeAll+0x1c4>)
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	440b      	add	r3, r1
 8000cac:	3304      	adds	r3, #4
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	3204      	adds	r2, #4
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	1d1a      	adds	r2, r3, #4
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4a2e      	ldr	r2, [pc, #184]	; (8000d98 <xTaskResumeAll+0x1c4>)
 8000ce0:	441a      	add	r2, r3
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	615a      	str	r2, [r3, #20]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cea:	492b      	ldr	r1, [pc, #172]	; (8000d98 <xTaskResumeAll+0x1c4>)
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	1c59      	adds	r1, r3, #1
 8000cfa:	4827      	ldr	r0, [pc, #156]	; (8000d98 <xTaskResumeAll+0x1c4>)
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4403      	add	r3, r0
 8000d06:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <xTaskResumeAll+0x1c8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d302      	bcc.n	8000d1c <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8000d16:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <xTaskResumeAll+0x1cc>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <xTaskResumeAll+0x1bc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f47f af70 	bne.w	8000c06 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000d2c:	f000 fa20 	bl	8001170 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <xTaskResumeAll+0x1d0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d010      	beq.n	8000d5e <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000d3c:	f000 f836 	bl	8000dac <xTaskIncrementTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <xTaskResumeAll+0x1cc>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1f1      	bne.n	8000d3c <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <xTaskResumeAll+0x1d0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <xTaskResumeAll+0x1cc>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d009      	beq.n	8000d7a <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000d66:	2301      	movs	r3, #1
 8000d68:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <xTaskResumeAll+0x1d4>)
 8000d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	f3bf 8f4f 	dsb	sy
 8000d76:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000d7a:	f7ff fcc9 	bl	8000710 <vPortExitCritical>

    return xAlreadyYielded;
 8000d7e:	693b      	ldr	r3, [r7, #16]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2000295c 	.word	0x2000295c
 8000d8c:	20002934 	.word	0x20002934
 8000d90:	200028f4 	.word	0x200028f4
 8000d94:	2000293c 	.word	0x2000293c
 8000d98:	2000284c 	.word	0x2000284c
 8000d9c:	20002848 	.word	0x20002848
 8000da0:	20002948 	.word	0x20002948
 8000da4:	20002944 	.word	0x20002944
 8000da8:	e000ed04 	.word	0xe000ed04

08000dac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000db6:	4b75      	ldr	r3, [pc, #468]	; (8000f8c <xTaskIncrementTick+0x1e0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f040 80dc 	bne.w	8000f78 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000dc0:	4b73      	ldr	r3, [pc, #460]	; (8000f90 <xTaskIncrementTick+0x1e4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000dc8:	4a71      	ldr	r2, [pc, #452]	; (8000f90 <xTaskIncrementTick+0x1e4>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d110      	bne.n	8000df6 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000dd4:	4b6f      	ldr	r3, [pc, #444]	; (8000f94 <xTaskIncrementTick+0x1e8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	4b6f      	ldr	r3, [pc, #444]	; (8000f98 <xTaskIncrementTick+0x1ec>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a6d      	ldr	r2, [pc, #436]	; (8000f94 <xTaskIncrementTick+0x1e8>)
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	4a6d      	ldr	r2, [pc, #436]	; (8000f98 <xTaskIncrementTick+0x1ec>)
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	4b6c      	ldr	r3, [pc, #432]	; (8000f9c <xTaskIncrementTick+0x1f0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a6b      	ldr	r2, [pc, #428]	; (8000f9c <xTaskIncrementTick+0x1f0>)
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	f000 f9bd 	bl	8001170 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000df6:	4b6a      	ldr	r3, [pc, #424]	; (8000fa0 <xTaskIncrementTick+0x1f4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	f0c0 80a6 	bcc.w	8000f4e <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e02:	4b64      	ldr	r3, [pc, #400]	; (8000f94 <xTaskIncrementTick+0x1e8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d104      	bne.n	8000e16 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e0c:	4b64      	ldr	r3, [pc, #400]	; (8000fa0 <xTaskIncrementTick+0x1f4>)
 8000e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e12:	601a      	str	r2, [r3, #0]
                    break;
 8000e14:	e09b      	b.n	8000f4e <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e16:	4b5f      	ldr	r3, [pc, #380]	; (8000f94 <xTaskIncrementTick+0x1e8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d203      	bcs.n	8000e36 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000e2e:	4a5c      	ldr	r2, [pc, #368]	; (8000fa0 <xTaskIncrementTick+0x1f4>)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000e34:	e08b      	b.n	8000f4e <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68d2      	ldr	r2, [r2, #12]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	6892      	ldr	r2, [r2, #8]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	3304      	adds	r3, #4
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d103      	bne.n	8000e64 <xTaskIncrementTick+0xb8>
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	1e5a      	subs	r2, r3, #1
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d01e      	beq.n	8000eba <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	6a12      	ldr	r2, [r2, #32]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	69d2      	ldr	r2, [r2, #28]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	3318      	adds	r3, #24
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d103      	bne.n	8000eaa <xTaskIncrementTick+0xfe>
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	6a1a      	ldr	r2, [r3, #32]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	2200      	movs	r2, #0
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	1e5a      	subs	r2, r3, #1
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	409a      	lsls	r2, r3
 8000ec2:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <xTaskIncrementTick+0x1f8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	4a36      	ldr	r2, [pc, #216]	; (8000fa4 <xTaskIncrementTick+0x1f8>)
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ed0:	4935      	ldr	r1, [pc, #212]	; (8000fa8 <xTaskIncrementTick+0x1fc>)
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	3304      	adds	r3, #4
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	3204      	adds	r2, #4
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1d1a      	adds	r2, r3, #4
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4a26      	ldr	r2, [pc, #152]	; (8000fa8 <xTaskIncrementTick+0x1fc>)
 8000f10:	441a      	add	r2, r3
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	615a      	str	r2, [r3, #20]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f1a:	4923      	ldr	r1, [pc, #140]	; (8000fa8 <xTaskIncrementTick+0x1fc>)
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	1c59      	adds	r1, r3, #1
 8000f2a:	481f      	ldr	r0, [pc, #124]	; (8000fa8 <xTaskIncrementTick+0x1fc>)
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4403      	add	r3, r0
 8000f36:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <xTaskIncrementTick+0x200>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f42:	429a      	cmp	r2, r3
 8000f44:	f67f af5d 	bls.w	8000e02 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f4c:	e759      	b.n	8000e02 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <xTaskIncrementTick+0x200>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f54:	4914      	ldr	r1, [pc, #80]	; (8000fa8 <xTaskIncrementTick+0x1fc>)
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	440b      	add	r3, r1
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d901      	bls.n	8000f6a <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <xTaskIncrementTick+0x204>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	e004      	b.n	8000f82 <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <xTaskIncrementTick+0x208>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <xTaskIncrementTick+0x208>)
 8000f80:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000f82:	69fb      	ldr	r3, [r7, #28]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000295c 	.word	0x2000295c
 8000f90:	20002938 	.word	0x20002938
 8000f94:	200028ec 	.word	0x200028ec
 8000f98:	200028f0 	.word	0x200028f0
 8000f9c:	2000294c 	.word	0x2000294c
 8000fa0:	20002954 	.word	0x20002954
 8000fa4:	2000293c 	.word	0x2000293c
 8000fa8:	2000284c 	.word	0x2000284c
 8000fac:	20002848 	.word	0x20002848
 8000fb0:	20002948 	.word	0x20002948
 8000fb4:	20002944 	.word	0x20002944

08000fb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <vTaskSwitchContext+0x78>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <vTaskSwitchContext+0x7c>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000fcc:	e02a      	b.n	8001024 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <vTaskSwitchContext+0x7c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <vTaskSwitchContext+0x80>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	fab3 f383 	clz	r3, r3
 8000fe0:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	f1c3 031f 	rsb	r3, r3, #31
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4a11      	ldr	r2, [pc, #68]	; (800103c <vTaskSwitchContext+0x84>)
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	3308      	adds	r3, #8
 800100c:	429a      	cmp	r2, r3
 800100e:	d104      	bne.n	800101a <vTaskSwitchContext+0x62>
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <vTaskSwitchContext+0x88>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	2000295c 	.word	0x2000295c
 8001034:	20002948 	.word	0x20002948
 8001038:	2000293c 	.word	0x2000293c
 800103c:	2000284c 	.word	0x2000284c
 8001040:	20002848 	.word	0x20002848

08001044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800104c:	f000 f852 	bl	80010f4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <prvIdleTask+0x28>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d9f9      	bls.n	800104c <prvIdleTask+0x8>
            {
                taskYIELD();
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <prvIdleTask+0x2c>)
 800105a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	f3bf 8f4f 	dsb	sy
 8001064:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001068:	e7f0      	b.n	800104c <prvIdleTask+0x8>
 800106a:	bf00      	nop
 800106c:	2000284c 	.word	0x2000284c
 8001070:	e000ed04 	.word	0xe000ed04

08001074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	e00c      	b.n	800109a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <prvInitialiseTaskLists+0x60>)
 800108c:	4413      	add	r3, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f970 	bl	8000374 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3301      	adds	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b05      	cmp	r3, #5
 800109e:	d9ef      	bls.n	8001080 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <prvInitialiseTaskLists+0x64>)
 80010a2:	f7ff f967 	bl	8000374 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <prvInitialiseTaskLists+0x68>)
 80010a8:	f7ff f964 	bl	8000374 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <prvInitialiseTaskLists+0x6c>)
 80010ae:	f7ff f961 	bl	8000374 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80010b2:	480c      	ldr	r0, [pc, #48]	; (80010e4 <prvInitialiseTaskLists+0x70>)
 80010b4:	f7ff f95e 	bl	8000374 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <prvInitialiseTaskLists+0x74>)
 80010ba:	f7ff f95b 	bl	8000374 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <prvInitialiseTaskLists+0x78>)
 80010c0:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <prvInitialiseTaskLists+0x64>)
 80010c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <prvInitialiseTaskLists+0x7c>)
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <prvInitialiseTaskLists+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000284c 	.word	0x2000284c
 80010d8:	200028c4 	.word	0x200028c4
 80010dc:	200028d8 	.word	0x200028d8
 80010e0:	200028f4 	.word	0x200028f4
 80010e4:	20002908 	.word	0x20002908
 80010e8:	20002920 	.word	0x20002920
 80010ec:	200028ec 	.word	0x200028ec
 80010f0:	200028f0 	.word	0x200028f0

080010f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80010fa:	e019      	b.n	8001130 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80010fc:	f7ff faee 	bl	80006dc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <prvCheckTasksWaitingTermination+0x50>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3304      	adds	r3, #4
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f994 	bl	800043a <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <prvCheckTasksWaitingTermination+0x54>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3b01      	subs	r3, #1
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <prvCheckTasksWaitingTermination+0x54>)
 800111a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <prvCheckTasksWaitingTermination+0x58>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3b01      	subs	r3, #1
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <prvCheckTasksWaitingTermination+0x58>)
 8001124:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001126:	f7ff faf3 	bl	8000710 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f810 	bl	8001150 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <prvCheckTasksWaitingTermination+0x58>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1e1      	bne.n	80010fc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20002908 	.word	0x20002908
 8001148:	20002934 	.word	0x20002934
 800114c:	2000291c 	.word	0x2000291c

08001150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f895 	bl	800028c <vPortFree>
            vPortFree( pxTCB );
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff f892 	bl	800028c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <prvResetNextTaskUnblockTime+0x2c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d104      	bne.n	8001188 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <prvResetNextTaskUnblockTime+0x30>)
 8001180:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001184:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001186:	e005      	b.n	8001194 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <prvResetNextTaskUnblockTime+0x2c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a03      	ldr	r2, [pc, #12]	; (80011a0 <prvResetNextTaskUnblockTime+0x30>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	200028ec 	.word	0x200028ec
 80011a0:	20002954 	.word	0x20002954

080011a4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80011ae:	4b36      	ldr	r3, [pc, #216]	; (8001288 <prvAddCurrentTaskToDelayedList+0xe4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80011b4:	4b35      	ldr	r3, [pc, #212]	; (800128c <prvAddCurrentTaskToDelayedList+0xe8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3304      	adds	r3, #4
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f93d 	bl	800043a <uxListRemove>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10b      	bne.n	80011de <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <prvAddCurrentTaskToDelayedList+0xe8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011cc:	2201      	movs	r2, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <prvAddCurrentTaskToDelayedList+0xec>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4013      	ands	r3, r2
 80011da:	4a2d      	ldr	r2, [pc, #180]	; (8001290 <prvAddCurrentTaskToDelayedList+0xec>)
 80011dc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011e4:	d124      	bne.n	8001230 <prvAddCurrentTaskToDelayedList+0x8c>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d021      	beq.n	8001230 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <prvAddCurrentTaskToDelayedList+0xf0>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <prvAddCurrentTaskToDelayedList+0xe8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <prvAddCurrentTaskToDelayedList+0xe8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	6892      	ldr	r2, [r2, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	4b21      	ldr	r3, [pc, #132]	; (800128c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	3204      	adds	r2, #4
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	1d1a      	adds	r2, r3, #4
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <prvAddCurrentTaskToDelayedList+0xe8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <prvAddCurrentTaskToDelayedList+0xf0>)
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800122e:	e026      	b.n	800127e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <prvAddCurrentTaskToDelayedList+0xe8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	429a      	cmp	r2, r3
 8001246:	d209      	bcs.n	800125c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <prvAddCurrentTaskToDelayedList+0xf4>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <prvAddCurrentTaskToDelayedList+0xe8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3304      	adds	r3, #4
 8001252:	4619      	mov	r1, r3
 8001254:	4610      	mov	r0, r2
 8001256:	f7ff f8b8 	bl	80003ca <vListInsert>
}
 800125a:	e010      	b.n	800127e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <prvAddCurrentTaskToDelayedList+0xf8>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3304      	adds	r3, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4610      	mov	r0, r2
 800126a:	f7ff f8ae 	bl	80003ca <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d202      	bcs.n	800127e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001278:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6013      	str	r3, [r2, #0]
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20002938 	.word	0x20002938
 800128c:	20002848 	.word	0x20002848
 8001290:	2000293c 	.word	0x2000293c
 8001294:	20002920 	.word	0x20002920
 8001298:	200028f0 	.word	0x200028f0
 800129c:	200028ec 	.word	0x200028ec
 80012a0:	20002954 	.word	0x20002954

080012a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012a4:	f7ff fad6 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012aa:	490c      	ldr	r1, [pc, #48]	; (80012dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012ac:	4a0c      	ldr	r2, [pc, #48]	; (80012e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012c0:	4c09      	ldr	r4, [pc, #36]	; (80012e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ce:	f000 faf7 	bl	80018c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012d2:	f7ff f8db 	bl	800048c <main>
  bx lr
 80012d6:	4770      	bx	lr
  ldr r0, =_sdata
 80012d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012dc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80012e0:	08001954 	.word	0x08001954
  ldr r2, =_sbss
 80012e4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80012e8:	20002960 	.word	0x20002960

080012ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC1_2_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_Init+0x28>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_Init+0x28>)
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 f8eb 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001306:	200f      	movs	r0, #15
 8001308:	f000 f808 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800130c:	f7ff fa80 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40022000 	.word	0x40022000

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x54>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x58>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001332:	fbb3 f3f1 	udiv	r3, r3, r1
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f8f5 	bl	800152a <HAL_SYSTICK_Config>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e00e      	b.n	8001368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d80a      	bhi.n	8001366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001350:	2200      	movs	r2, #0
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001358:	f000 f8cb 	bl	80014f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_InitTick+0x5c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000008 	.word	0x20000008
 8001374:	20000014 	.word	0x20000014
 8001378:	20000010 	.word	0x20000010

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a8:	d301      	bcc.n	80014ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <SysTick_Config+0x40>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b6:	210f      	movs	r1, #15
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014bc:	f7ff ff90 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <SysTick_Config+0x40>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <SysTick_Config+0x40>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff49 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff5e 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff90 	bl	8001434 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5f 	bl	80013e0 <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffb0 	bl	8001498 <SysTick_Config>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001544:	b480      	push	{r7}
 8001546:	b08b      	sub	sp, #44	; 0x2c
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001556:	e169      	b.n	800182c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001558:	2201      	movs	r2, #1
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	429a      	cmp	r2, r3
 8001572:	f040 8158 	bne.w	8001826 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4a9a      	ldr	r2, [pc, #616]	; (80017e4 <HAL_GPIO_Init+0x2a0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d05e      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 8001580:	4a98      	ldr	r2, [pc, #608]	; (80017e4 <HAL_GPIO_Init+0x2a0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d875      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 8001586:	4a98      	ldr	r2, [pc, #608]	; (80017e8 <HAL_GPIO_Init+0x2a4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d058      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 800158c:	4a96      	ldr	r2, [pc, #600]	; (80017e8 <HAL_GPIO_Init+0x2a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d86f      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 8001592:	4a96      	ldr	r2, [pc, #600]	; (80017ec <HAL_GPIO_Init+0x2a8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d052      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 8001598:	4a94      	ldr	r2, [pc, #592]	; (80017ec <HAL_GPIO_Init+0x2a8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d869      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 800159e:	4a94      	ldr	r2, [pc, #592]	; (80017f0 <HAL_GPIO_Init+0x2ac>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d04c      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 80015a4:	4a92      	ldr	r2, [pc, #584]	; (80017f0 <HAL_GPIO_Init+0x2ac>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d863      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 80015aa:	4a92      	ldr	r2, [pc, #584]	; (80017f4 <HAL_GPIO_Init+0x2b0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d046      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 80015b0:	4a90      	ldr	r2, [pc, #576]	; (80017f4 <HAL_GPIO_Init+0x2b0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d85d      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 80015b6:	2b12      	cmp	r3, #18
 80015b8:	d82a      	bhi.n	8001610 <HAL_GPIO_Init+0xcc>
 80015ba:	2b12      	cmp	r3, #18
 80015bc:	d859      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 80015be:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <HAL_GPIO_Init+0x80>)
 80015c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c4:	0800163f 	.word	0x0800163f
 80015c8:	08001619 	.word	0x08001619
 80015cc:	0800162b 	.word	0x0800162b
 80015d0:	0800166d 	.word	0x0800166d
 80015d4:	08001673 	.word	0x08001673
 80015d8:	08001673 	.word	0x08001673
 80015dc:	08001673 	.word	0x08001673
 80015e0:	08001673 	.word	0x08001673
 80015e4:	08001673 	.word	0x08001673
 80015e8:	08001673 	.word	0x08001673
 80015ec:	08001673 	.word	0x08001673
 80015f0:	08001673 	.word	0x08001673
 80015f4:	08001673 	.word	0x08001673
 80015f8:	08001673 	.word	0x08001673
 80015fc:	08001673 	.word	0x08001673
 8001600:	08001673 	.word	0x08001673
 8001604:	08001673 	.word	0x08001673
 8001608:	08001621 	.word	0x08001621
 800160c:	08001635 	.word	0x08001635
 8001610:	4a79      	ldr	r2, [pc, #484]	; (80017f8 <HAL_GPIO_Init+0x2b4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001616:	e02c      	b.n	8001672 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	623b      	str	r3, [r7, #32]
          break;
 800161e:	e029      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	3304      	adds	r3, #4
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e024      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	3308      	adds	r3, #8
 8001630:	623b      	str	r3, [r7, #32]
          break;
 8001632:	e01f      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	330c      	adds	r3, #12
 800163a:	623b      	str	r3, [r7, #32]
          break;
 800163c:	e01a      	b.n	8001674 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001646:	2304      	movs	r3, #4
 8001648:	623b      	str	r3, [r7, #32]
          break;
 800164a:	e013      	b.n	8001674 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d105      	bne.n	8001660 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001654:	2308      	movs	r3, #8
 8001656:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	611a      	str	r2, [r3, #16]
          break;
 800165e:	e009      	b.n	8001674 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001660:	2308      	movs	r3, #8
 8001662:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	615a      	str	r2, [r3, #20]
          break;
 800166a:	e003      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
          break;
 8001670:	e000      	b.n	8001674 <HAL_GPIO_Init+0x130>
          break;
 8001672:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2bff      	cmp	r3, #255	; 0xff
 8001678:	d801      	bhi.n	800167e <HAL_GPIO_Init+0x13a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	e001      	b.n	8001682 <HAL_GPIO_Init+0x13e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3304      	adds	r3, #4
 8001682:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2bff      	cmp	r3, #255	; 0xff
 8001688:	d802      	bhi.n	8001690 <HAL_GPIO_Init+0x14c>
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	e002      	b.n	8001696 <HAL_GPIO_Init+0x152>
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	3b08      	subs	r3, #8
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	210f      	movs	r1, #15
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	401a      	ands	r2, r3
 80016a8:	6a39      	ldr	r1, [r7, #32]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	431a      	orrs	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80b1 	beq.w	8001826 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016c4:	4b4d      	ldr	r3, [pc, #308]	; (80017fc <HAL_GPIO_Init+0x2b8>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a4c      	ldr	r2, [pc, #304]	; (80017fc <HAL_GPIO_Init+0x2b8>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b4a      	ldr	r3, [pc, #296]	; (80017fc <HAL_GPIO_Init+0x2b8>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016dc:	4a48      	ldr	r2, [pc, #288]	; (8001800 <HAL_GPIO_Init+0x2bc>)
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a40      	ldr	r2, [pc, #256]	; (8001804 <HAL_GPIO_Init+0x2c0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d013      	beq.n	8001730 <HAL_GPIO_Init+0x1ec>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a3f      	ldr	r2, [pc, #252]	; (8001808 <HAL_GPIO_Init+0x2c4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d00d      	beq.n	800172c <HAL_GPIO_Init+0x1e8>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a3e      	ldr	r2, [pc, #248]	; (800180c <HAL_GPIO_Init+0x2c8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d007      	beq.n	8001728 <HAL_GPIO_Init+0x1e4>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a3d      	ldr	r2, [pc, #244]	; (8001810 <HAL_GPIO_Init+0x2cc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_GPIO_Init+0x1e0>
 8001720:	2303      	movs	r3, #3
 8001722:	e006      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 8001724:	2304      	movs	r3, #4
 8001726:	e004      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 8001728:	2302      	movs	r3, #2
 800172a:	e002      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 8001730:	2300      	movs	r3, #0
 8001732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001734:	f002 0203 	and.w	r2, r2, #3
 8001738:	0092      	lsls	r2, r2, #2
 800173a:	4093      	lsls	r3, r2
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001742:	492f      	ldr	r1, [pc, #188]	; (8001800 <HAL_GPIO_Init+0x2bc>)
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	3302      	adds	r3, #2
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800175c:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	492c      	ldr	r1, [pc, #176]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	43db      	mvns	r3, r3
 8001772:	4928      	ldr	r1, [pc, #160]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 8001774:	4013      	ands	r3, r2
 8001776:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	4922      	ldr	r1, [pc, #136]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	60cb      	str	r3, [r1, #12]
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	43db      	mvns	r3, r3
 800179a:	491e      	ldr	r1, [pc, #120]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 800179c:	4013      	ands	r3, r2
 800179e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	4918      	ldr	r1, [pc, #96]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4914      	ldr	r1, [pc, #80]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d021      	beq.n	8001818 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	490e      	ldr	r1, [pc, #56]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
 80017e0:	e021      	b.n	8001826 <HAL_GPIO_Init+0x2e2>
 80017e2:	bf00      	nop
 80017e4:	10320000 	.word	0x10320000
 80017e8:	10310000 	.word	0x10310000
 80017ec:	10220000 	.word	0x10220000
 80017f0:	10210000 	.word	0x10210000
 80017f4:	10120000 	.word	0x10120000
 80017f8:	10110000 	.word	0x10110000
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000
 8001804:	40010800 	.word	0x40010800
 8001808:	40010c00 	.word	0x40010c00
 800180c:	40011000 	.word	0x40011000
 8001810:	40011400 	.word	0x40011400
 8001814:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_GPIO_Init+0x304>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	43db      	mvns	r3, r3
 8001820:	4909      	ldr	r1, [pc, #36]	; (8001848 <HAL_GPIO_Init+0x304>)
 8001822:	4013      	ands	r3, r2
 8001824:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	3301      	adds	r3, #1
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	fa22 f303 	lsr.w	r3, r2, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	f47f ae8e 	bne.w	8001558 <HAL_GPIO_Init+0x14>
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	372c      	adds	r7, #44	; 0x2c
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001868:	e003      	b.n	8001872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	611a      	str	r2, [r3, #16]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4013      	ands	r3, r2
 8001894:	041a      	lsls	r2, r3, #16
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43d9      	mvns	r1, r3
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	400b      	ands	r3, r1
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	611a      	str	r2, [r3, #16]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <memset>:
 80018ae:	4603      	mov	r3, r0
 80018b0:	4402      	add	r2, r0
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d100      	bne.n	80018b8 <memset+0xa>
 80018b6:	4770      	bx	lr
 80018b8:	f803 1b01 	strb.w	r1, [r3], #1
 80018bc:	e7f9      	b.n	80018b2 <memset+0x4>
	...

080018c0 <__libc_init_array>:
 80018c0:	b570      	push	{r4, r5, r6, lr}
 80018c2:	2600      	movs	r6, #0
 80018c4:	4d0c      	ldr	r5, [pc, #48]	; (80018f8 <__libc_init_array+0x38>)
 80018c6:	4c0d      	ldr	r4, [pc, #52]	; (80018fc <__libc_init_array+0x3c>)
 80018c8:	1b64      	subs	r4, r4, r5
 80018ca:	10a4      	asrs	r4, r4, #2
 80018cc:	42a6      	cmp	r6, r4
 80018ce:	d109      	bne.n	80018e4 <__libc_init_array+0x24>
 80018d0:	f000 f81a 	bl	8001908 <_init>
 80018d4:	2600      	movs	r6, #0
 80018d6:	4d0a      	ldr	r5, [pc, #40]	; (8001900 <__libc_init_array+0x40>)
 80018d8:	4c0a      	ldr	r4, [pc, #40]	; (8001904 <__libc_init_array+0x44>)
 80018da:	1b64      	subs	r4, r4, r5
 80018dc:	10a4      	asrs	r4, r4, #2
 80018de:	42a6      	cmp	r6, r4
 80018e0:	d105      	bne.n	80018ee <__libc_init_array+0x2e>
 80018e2:	bd70      	pop	{r4, r5, r6, pc}
 80018e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e8:	4798      	blx	r3
 80018ea:	3601      	adds	r6, #1
 80018ec:	e7ee      	b.n	80018cc <__libc_init_array+0xc>
 80018ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80018f2:	4798      	blx	r3
 80018f4:	3601      	adds	r6, #1
 80018f6:	e7f2      	b.n	80018de <__libc_init_array+0x1e>
 80018f8:	0800194c 	.word	0x0800194c
 80018fc:	0800194c 	.word	0x0800194c
 8001900:	0800194c 	.word	0x0800194c
 8001904:	08001950 	.word	0x08001950

08001908 <_init>:
 8001908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800190a:	bf00      	nop
 800190c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190e:	bc08      	pop	{r3}
 8001910:	469e      	mov	lr, r3
 8001912:	4770      	bx	lr

08001914 <_fini>:
 8001914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001916:	bf00      	nop
 8001918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800191a:	bc08      	pop	{r3}
 800191c:	469e      	mov	lr, r3
 800191e:	4770      	bx	lr
