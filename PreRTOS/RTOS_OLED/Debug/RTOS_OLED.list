
RTOS_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d44  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eac  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d00  08005d00  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005d00  08005d00  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d00  08005d00  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d00  08005d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d04  08005d04  00015d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002efc  2000007c  08005d84  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002f78  08005d84  00022f78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac9e  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a8  00000000  00000000  0002ad86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  0002d130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092e  00000000  00000000  0002dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016de8  00000000  00000000  0002e666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d726  00000000  00000000  0004544e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ca4c  00000000  00000000  00052b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a20  00000000  00000000  000df5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e2fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e3c 	.word	0x08004e3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08004e3c 	.word	0x08004e3c

08000150 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b08a      	sub	sp, #40	; 0x28
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 8000158:	2300      	movs	r3, #0
 800015a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800015c:	f001 fc8c 	bl	8001a78 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 8000160:	4b46      	ldr	r3, [pc, #280]	; (800027c <pvPortMalloc+0x12c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d104      	bne.n	8000172 <pvPortMalloc+0x22>
        {
            prvHeapInit();
 8000168:	f000 f8dc 	bl	8000324 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 800016c:	4b43      	ldr	r3, [pc, #268]	; (800027c <pvPortMalloc+0x12c>)
 800016e:	2201      	movs	r2, #1
 8000170:	601a      	str	r2, [r3, #0]
        }

        if( xWantedSize > 0 )
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d013      	beq.n	80001a0 <pvPortMalloc+0x50>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = heapSTRUCT_SIZE + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8000178:	2308      	movs	r3, #8
 800017a:	461a      	mov	r2, r3
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	f003 0307 	and.w	r3, r3, #7
 8000182:	1ad3      	subs	r3, r2, r3
 8000184:	3308      	adds	r3, #8
 8000186:	617b      	str	r3, [r7, #20]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8000188:	697b      	ldr	r3, [r7, #20]
 800018a:	43db      	mvns	r3, r3
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	429a      	cmp	r2, r3
 8000190:	d804      	bhi.n	800019c <pvPortMalloc+0x4c>
            {
                xWantedSize += xAdditionalRequiredSize;
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	697b      	ldr	r3, [r7, #20]
 8000196:	4413      	add	r3, r2
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	e001      	b.n	80001a0 <pvPortMalloc+0x50>
            }
            else
            {
                xWantedSize = 0;
 800019c:	2300      	movs	r3, #0
 800019e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	db63      	blt.n	800026e <pvPortMalloc+0x11e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d060      	beq.n	800026e <pvPortMalloc+0x11e>
 80001ac:	4b34      	ldr	r3, [pc, #208]	; (8000280 <pvPortMalloc+0x130>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	687a      	ldr	r2, [r7, #4]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d85b      	bhi.n	800026e <pvPortMalloc+0x11e>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80001b6:	4b33      	ldr	r3, [pc, #204]	; (8000284 <pvPortMalloc+0x134>)
 80001b8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80001ba:	4b32      	ldr	r3, [pc, #200]	; (8000284 <pvPortMalloc+0x134>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80001c0:	e004      	b.n	80001cc <pvPortMalloc+0x7c>
                {
                    pxPreviousBlock = pxBlock;
 80001c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001c4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80001c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80001cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d903      	bls.n	80001de <pvPortMalloc+0x8e>
 80001d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d1f1      	bne.n	80001c2 <pvPortMalloc+0x72>
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
 80001de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001e0:	4a29      	ldr	r2, [pc, #164]	; (8000288 <pvPortMalloc+0x138>)
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d043      	beq.n	800026e <pvPortMalloc+0x11e>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80001e6:	6a3b      	ldr	r3, [r7, #32]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2208      	movs	r2, #8
 80001ec:	4413      	add	r3, r2
 80001ee:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80001f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	6a3b      	ldr	r3, [r7, #32]
 80001f6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80001f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001fa:	685a      	ldr	r2, [r3, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	1ad3      	subs	r3, r2, r3
 8000200:	2208      	movs	r2, #8
 8000202:	0052      	lsls	r2, r2, #1
 8000204:	4293      	cmp	r3, r2
 8000206:	d922      	bls.n	800024e <pvPortMalloc+0xfe>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	613b      	str	r3, [r7, #16]

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000212:	685a      	ldr	r2, [r3, #4]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1ad2      	subs	r2, r2, r3
 8000218:	693b      	ldr	r3, [r7, #16]
 800021a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	4b16      	ldr	r3, [pc, #88]	; (8000284 <pvPortMalloc+0x134>)
 800022a:	61bb      	str	r3, [r7, #24]
 800022c:	e002      	b.n	8000234 <pvPortMalloc+0xe4>
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	61bb      	str	r3, [r7, #24]
 8000234:	69bb      	ldr	r3, [r7, #24]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	429a      	cmp	r2, r3
 800023e:	d8f6      	bhi.n	800022e <pvPortMalloc+0xde>
 8000240:	69bb      	ldr	r3, [r7, #24]
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	693b      	ldr	r3, [r7, #16]
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	69bb      	ldr	r3, [r7, #24]
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	601a      	str	r2, [r3, #0]
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <pvPortMalloc+0x130>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	1ad3      	subs	r3, r2, r3
 8000258:	4a09      	ldr	r2, [pc, #36]	; (8000280 <pvPortMalloc+0x130>)
 800025a:	6013      	str	r3, [r2, #0]

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000266:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800026e:	f001 fc11 	bl	8001a94 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8000272:	69fb      	ldr	r3, [r7, #28]
}
 8000274:	4618      	mov	r0, r3
 8000276:	3728      	adds	r7, #40	; 0x28
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	200028a8 	.word	0x200028a8
 8000280:	20000008 	.word	0x20000008
 8000284:	20002898 	.word	0x20002898
 8000288:	200028a0 	.word	0x200028a0

0800028c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d039      	beq.n	8000312 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 800029e:	2308      	movs	r3, #8
 80002a0:	425b      	negs	r3, r3
 80002a2:	693a      	ldr	r2, [r7, #16]
 80002a4:	4413      	add	r3, r2
 80002a6:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	60fb      	str	r3, [r7, #12]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	0fdb      	lsrs	r3, r3, #31
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d02a      	beq.n	8000312 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d126      	bne.n	8000312 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + heapSTRUCT_SIZE, 0, pxLink->xBlockSize - heapSTRUCT_SIZE );
                }
                #endif

                vTaskSuspendAll();
 80002d0:	f001 fbd2 	bl	8001a78 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <vPortFree+0x90>)
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	e002      	b.n	80002e6 <vPortFree+0x5a>
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d8f6      	bhi.n	80002e0 <vPortFree+0x54>
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	601a      	str	r2, [r3, #0]
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685a      	ldr	r2, [r3, #4]
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <vPortFree+0x94>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4413      	add	r3, r2
 800030a:	4a05      	ldr	r2, [pc, #20]	; (8000320 <vPortFree+0x94>)
 800030c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
 800030e:	f001 fbc1 	bl	8001a94 <xTaskResumeAll>
            }
        }
    }
}
 8000312:	bf00      	nop
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20002898 	.word	0x20002898
 8000320:	20000008 	.word	0x20000008

08000324 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <prvHeapInit+0x44>)
 800032c:	f023 0307 	bic.w	r3, r3, #7
 8000330:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000332:	4a0e      	ldr	r2, [pc, #56]	; (800036c <prvHeapInit+0x48>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <prvHeapInit+0x48>)
 800033a:	2200      	movs	r2, #0
 800033c:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <prvHeapInit+0x4c>)
 8000340:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000344:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 8000346:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <prvHeapInit+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000356:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	4a05      	ldr	r2, [pc, #20]	; (8000370 <prvHeapInit+0x4c>)
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	2000009f 	.word	0x2000009f
 800036c:	20002898 	.word	0x20002898
 8000370:	200028a0 	.word	0x200028a0

08000374 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f103 0208 	add.w	r2, r3, #8
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800038c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f103 0208 	add.w	r2, r3, #8
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f103 0208 	add.w	r2, r3, #8
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr

080003b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80003b2:	b480      	push	{r7}
 80003b4:	b083      	sub	sp, #12
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr

080003ca <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80003ca:	b480      	push	{r7}
 80003cc:	b085      	sub	sp, #20
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
 80003d2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80003e0:	d103      	bne.n	80003ea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	691b      	ldr	r3, [r3, #16]
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	e00c      	b.n	8000404 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3308      	adds	r3, #8
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	e002      	b.n	80003f8 <vListInsert+0x2e>
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	68ba      	ldr	r2, [r7, #8]
 8000400:	429a      	cmp	r2, r3
 8000402:	d2f6      	bcs.n	80003f2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	685a      	ldr	r2, [r3, #4]
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	683a      	ldr	r2, [r7, #0]
 800041e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	1c5a      	adds	r2, r3, #1
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	601a      	str	r2, [r3, #0]
}
 8000430:	bf00      	nop
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800043a:	b480      	push	{r7}
 800043c:	b085      	sub	sp, #20
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	691b      	ldr	r3, [r3, #16]
 8000446:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	6892      	ldr	r2, [r2, #8]
 8000450:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	6852      	ldr	r2, [r2, #4]
 800045a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	429a      	cmp	r2, r3
 8000464:	d103      	bne.n	800046e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	689a      	ldr	r2, [r3, #8]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	1e5a      	subs	r2, r3, #1
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	681b      	ldr	r3, [r3, #0]
}
 8000482:	4618      	mov	r0, r3
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af02      	add	r7, sp, #8
	pxDataToMonitor = xQueueCreate(3, sizeof(char));
 8000492:	2200      	movs	r2, #0
 8000494:	2101      	movs	r1, #1
 8000496:	2003      	movs	r0, #3
 8000498:	f000 fabe 	bl	8000a18 <xQueueGenericCreate>
 800049c:	4603      	mov	r3, r0
 800049e:	4a18      	ldr	r2, [pc, #96]	; (8000500 <main+0x74>)
 80004a0:	6013      	str	r3, [r2, #0]
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f002 f851 	bl	8002548 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f873 	bl	8000590 <SystemClock_Config>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f8db 	bl	8000664 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ae:	f000 f8ab 	bl	8000608 <MX_I2C1_Init>

  SSD1306_Init();
 80004b2:	f000 fd6f 	bl	8000f94 <SSD1306_Init>
  SSD1306_GotoXY(30, 20);
 80004b6:	2114      	movs	r1, #20
 80004b8:	201e      	movs	r0, #30
 80004ba:	f000 fed3 	bl	8001264 <SSD1306_GotoXY>
  SSD1306_Puts("init...", &Font_11x18, 1);
 80004be:	2201      	movs	r2, #1
 80004c0:	4910      	ldr	r1, [pc, #64]	; (8000504 <main+0x78>)
 80004c2:	4811      	ldr	r0, [pc, #68]	; (8000508 <main+0x7c>)
 80004c4:	f000 ff64 	bl	8001390 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80004c8:	f000 fe28 	bl	800111c <SSD1306_UpdateScreen>


  xTaskCreate(Sender, "Sender Task" , 300 , NULL , 1 , NULL);
 80004cc:	2300      	movs	r3, #0
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	2301      	movs	r3, #1
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	2300      	movs	r3, #0
 80004d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004da:	490c      	ldr	r1, [pc, #48]	; (800050c <main+0x80>)
 80004dc:	480c      	ldr	r0, [pc, #48]	; (8000510 <main+0x84>)
 80004de:	f001 f943 	bl	8001768 <xTaskCreate>
  xTaskCreate(Monitor, "Monitor Task" , 300 , NULL , 1 , NULL);
 80004e2:	2300      	movs	r3, #0
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	2301      	movs	r3, #1
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004f0:	4908      	ldr	r1, [pc, #32]	; (8000514 <main+0x88>)
 80004f2:	4809      	ldr	r0, [pc, #36]	; (8000518 <main+0x8c>)
 80004f4:	f001 f938 	bl	8001768 <xTaskCreate>
  vTaskStartScheduler();
 80004f8:	f001 fa82 	bl	8001a00 <vTaskStartScheduler>

  /* Infinite loop */
  while (1);
 80004fc:	e7fe      	b.n	80004fc <main+0x70>
 80004fe:	bf00      	nop
 8000500:	20002900 	.word	0x20002900
 8000504:	20000000 	.word	0x20000000
 8000508:	08004e54 	.word	0x08004e54
 800050c:	08004e5c 	.word	0x08004e5c
 8000510:	0800051d 	.word	0x0800051d
 8000514:	08004e68 	.word	0x08004e68
 8000518:	08000549 	.word	0x08000549

0800051c <Sender>:

}

void Sender ( void * pv )
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	char S_data = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
		S_data = printRandomAlphabet();
 8000528:	f000 f8b2 	bl	8000690 <printRandomAlphabet>
 800052c:	4603      	mov	r3, r0
 800052e:	73fb      	strb	r3, [r7, #15]
		xQueueSendToBack(pxDataToMonitor , &S_data , 10000);
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <Sender+0x28>)
 8000532:	6818      	ldr	r0, [r3, #0]
 8000534:	f107 010f 	add.w	r1, r7, #15
 8000538:	2300      	movs	r3, #0
 800053a:	f242 7210 	movw	r2, #10000	; 0x2710
 800053e:	f000 facd 	bl	8000adc <xQueueGenericSend>
		S_data = printRandomAlphabet();
 8000542:	e7f1      	b.n	8000528 <Sender+0xc>
 8000544:	20002900 	.word	0x20002900

08000548 <Monitor>:
	}

}

void Monitor ( void * pv )
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	char M_data = 0 ;
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]

	SSD1306_Clear();
 8000554:	f000 ff41 	bl	80013da <SSD1306_Clear>

	for(;;)
	{
		xQueueReceive(pxDataToMonitor, &M_data,10000);
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <Monitor+0x40>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f107 010f 	add.w	r1, r7, #15
 8000560:	f242 7210 	movw	r2, #10000	; 0x2710
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fb63 	bl	8000c30 <xQueueReceive>
		SSD1306_GotoXY(0, 10);
 800056a:	210a      	movs	r1, #10
 800056c:	2000      	movs	r0, #0
 800056e:	f000 fe79 	bl	8001264 <SSD1306_GotoXY>
		SSD1306_Puts( &M_data, &Font_11x18 , 1);
 8000572:	f107 030f 	add.w	r3, r7, #15
 8000576:	2201      	movs	r2, #1
 8000578:	4904      	ldr	r1, [pc, #16]	; (800058c <Monitor+0x44>)
 800057a:	4618      	mov	r0, r3
 800057c:	f000 ff08 	bl	8001390 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000580:	f000 fdcc 	bl	800111c <SSD1306_UpdateScreen>
		xQueueReceive(pxDataToMonitor, &M_data,10000);
 8000584:	e7e8      	b.n	8000558 <Monitor+0x10>
 8000586:	bf00      	nop
 8000588:	20002900 	.word	0x20002900
 800058c:	20000000 	.word	0x20000000

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b090      	sub	sp, #64	; 0x40
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	2228      	movs	r2, #40	; 0x28
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 fd93 	bl	80040ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b6:	2301      	movs	r3, #1
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	2310      	movs	r3, #16
 80005bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005be:	2300      	movs	r3, #0
 80005c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 f840 	bl	800364c <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005d2:	f000 f87d 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 faae 	bl	8003b50 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005fa:	f000 f869 	bl	80006d0 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3740      	adds	r7, #64	; 0x40
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_I2C1_Init+0x50>)
 800060e:	4a13      	ldr	r2, [pc, #76]	; (800065c <MX_I2C1_Init+0x54>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_I2C1_Init+0x50>)
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <MX_I2C1_Init+0x58>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_I2C1_Init+0x50>)
 8000626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800062a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_I2C1_Init+0x50>)
 8000646:	f002 fa37 	bl	8002ab8 <HAL_I2C_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000650:	f000 f83e 	bl	80006d0 <Error_Handler>
  }


}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200028ac 	.word	0x200028ac
 800065c:	40005400 	.word	0x40005400
 8000660:	000186a0 	.word	0x000186a0

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_GPIO_Init+0x28>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <MX_GPIO_Init+0x28>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6193      	str	r3, [r2, #24]
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <MX_GPIO_Init+0x28>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	40021000 	.word	0x40021000

08000690 <printRandomAlphabet>:


char printRandomAlphabet()
{
 8000690:	b5b0      	push	{r4, r5, r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
    char alphabet[] = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <printRandomAlphabet+0x3c>)
 8000698:	1d3c      	adds	r4, r7, #4
 800069a:	461d      	mov	r5, r3
 800069c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a4:	c403      	stmia	r4!, {r0, r1}
 80006a6:	8022      	strh	r2, [r4, #0]
                          'o', 'p', 'q', 'r', 's', 't', 'u',
                          'v', 'w', 'x', 'y', 'z' };

    return (alphabet[rand() % MAX]);
 80006a8:	f003 fbcc 	bl	8003e44 <rand>
 80006ac:	4603      	mov	r3, r0
 80006ae:	221a      	movs	r2, #26
 80006b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80006b4:	fb01 f202 	mul.w	r2, r1, r2
 80006b8:	1a9b      	subs	r3, r3, r2
 80006ba:	3320      	adds	r3, #32
 80006bc:	443b      	add	r3, r7
 80006be:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bdb0      	pop	{r4, r5, r7, pc}
 80006ca:	bf00      	nop
 80006cc:	08004e78 	.word	0x08004e78

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>
	...

080006dc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3b04      	subs	r3, #4
 80006ec:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3b04      	subs	r3, #4
 80006fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	f023 0201 	bic.w	r2, r3, #1
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3b04      	subs	r3, #4
 800070a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800070c:	4a08      	ldr	r2, [pc, #32]	; (8000730 <pxPortInitialiseStack+0x54>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3b14      	subs	r3, #20
 8000716:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3b20      	subs	r3, #32
 8000722:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000724:	68fb      	ldr	r3, [r7, #12]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	08000735 	.word	0x08000735

08000734 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800073e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000742:	f383 8811 	msr	BASEPRI, r3
 8000746:	f3bf 8f6f 	isb	sy
 800074a:	f3bf 8f4f 	dsb	sy
 800074e:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000750:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000752:	bf00      	nop
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d0fc      	beq.n	8000754 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
	...

08000770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <pxCurrentTCBConst2>)
 8000772:	6819      	ldr	r1, [r3, #0]
 8000774:	6808      	ldr	r0, [r1, #0]
 8000776:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800077a:	f380 8809 	msr	PSP, r0
 800077e:	f3bf 8f6f 	isb	sy
 8000782:	f04f 0000 	mov.w	r0, #0
 8000786:	f380 8811 	msr	BASEPRI, r0
 800078a:	f04e 0e0d 	orr.w	lr, lr, #13
 800078e:	4770      	bx	lr

08000790 <pxCurrentTCBConst2>:
 8000790:	20002d10 	.word	0x20002d10
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop

08000798 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000798:	4806      	ldr	r0, [pc, #24]	; (80007b4 <prvPortStartFirstTask+0x1c>)
 800079a:	6800      	ldr	r0, [r0, #0]
 800079c:	6800      	ldr	r0, [r0, #0]
 800079e:	f380 8808 	msr	MSP, r0
 80007a2:	b662      	cpsie	i
 80007a4:	b661      	cpsie	f
 80007a6:	f3bf 8f4f 	dsb	sy
 80007aa:	f3bf 8f6f 	isb	sy
 80007ae:	df00      	svc	0
 80007b0:	bf00      	nop
 80007b2:	0000      	.short	0x0000
 80007b4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop

080007bc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <xPortStartScheduler+0x38>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <xPortStartScheduler+0x38>)
 80007c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80007ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <xPortStartScheduler+0x38>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <xPortStartScheduler+0x38>)
 80007d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80007d6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80007d8:	f000 f890 	bl	80008fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <xPortStartScheduler+0x3c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80007e2:	f7ff ffd9 	bl	8000798 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80007e6:	f001 fb47 	bl	8001e78 <vTaskSwitchContext>
    prvTaskExitError();
 80007ea:	f7ff ffa3 	bl	8000734 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80007ee:	2300      	movs	r3, #0
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	e000ed20 	.word	0xe000ed20
 80007f8:	2000000c 	.word	0x2000000c

080007fc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
        __asm volatile
 8000802:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	607b      	str	r3, [r7, #4]
    }
 8000814:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <vPortEnterCritical+0x30>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	4a03      	ldr	r2, [pc, #12]	; (800082c <vPortEnterCritical+0x30>)
 800081e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	2000000c 	.word	0x2000000c

08000830 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <vPortExitCritical+0x30>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3b01      	subs	r3, #1
 800083c:	4a08      	ldr	r2, [pc, #32]	; (8000860 <vPortExitCritical+0x30>)
 800083e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <vPortExitCritical+0x30>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d105      	bne.n	8000854 <vPortExitCritical+0x24>
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000852:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	2000000c 	.word	0x2000000c
	...

08000870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000870:	f3ef 8009 	mrs	r0, PSP
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <pxCurrentTCBConst>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000880:	6010      	str	r0, [r2, #0]
 8000882:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000886:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800088a:	f380 8811 	msr	BASEPRI, r0
 800088e:	f001 faf3 	bl	8001e78 <vTaskSwitchContext>
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	f380 8811 	msr	BASEPRI, r0
 800089a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800089e:	6819      	ldr	r1, [r3, #0]
 80008a0:	6808      	ldr	r0, [r1, #0]
 80008a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80008a6:	f380 8809 	msr	PSP, r0
 80008aa:	f3bf 8f6f 	isb	sy
 80008ae:	4770      	bx	lr

080008b0 <pxCurrentTCBConst>:
 80008b0:	20002d10 	.word	0x20002d10
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop

080008b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
        __asm volatile
 80008be:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80008c2:	f383 8811 	msr	BASEPRI, r3
 80008c6:	f3bf 8f6f 	isb	sy
 80008ca:	f3bf 8f4f 	dsb	sy
 80008ce:	607b      	str	r3, [r7, #4]
    }
 80008d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80008d2:	f001 f9cb 	bl	8001c6c <xTaskIncrementTick>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d003      	beq.n	80008e4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <SysTick_Handler+0x40>)
 80008de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	f383 8811 	msr	BASEPRI, r3
    }
 80008ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	e000ed04 	.word	0xe000ed04

080008fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <vPortSetupTimerInterrupt+0x28>)
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <vPortSetupTimerInterrupt+0x2c>)
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <vPortSetupTimerInterrupt+0x30>)
 800090e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000912:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <vPortSetupTimerInterrupt+0x28>)
 8000916:	2207      	movs	r2, #7
 8000918:	601a      	str	r2, [r3, #0]
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e010 	.word	0xe000e010
 8000928:	e000e018 	.word	0xe000e018
 800092c:	e000e014 	.word	0xe000e014

08000930 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800093a:	2301      	movs	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d05d      	beq.n	8000a04 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800094c:	2b00      	cmp	r3, #0
 800094e:	d059      	beq.n	8000a04 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000958:	2100      	movs	r1, #0
 800095a:	fba3 2302 	umull	r2, r3, r3, r2
 800095e:	2b00      	cmp	r3, #0
 8000960:	d000      	beq.n	8000964 <xQueueGenericReset+0x34>
 8000962:	2101      	movs	r1, #1
 8000964:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14c      	bne.n	8000a04 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800096a:	f7ff ff47 	bl	80007fc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000976:	68b9      	ldr	r1, [r7, #8]
 8000978:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800097a:	fb01 f303 	mul.w	r3, r1, r3
 800097e:	441a      	add	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	2200      	movs	r2, #0
 8000988:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800099a:	3b01      	subs	r3, #1
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80009a0:	fb01 f303 	mul.w	r3, r1, r3
 80009a4:	441a      	add	r2, r3
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	22ff      	movs	r2, #255	; 0xff
 80009ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	22ff      	movs	r2, #255	; 0xff
 80009b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d114      	bne.n	80009ea <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	691b      	ldr	r3, [r3, #16]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d01a      	beq.n	80009fe <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	3310      	adds	r3, #16
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 faaf 	bl	8001f30 <xTaskRemoveFromEventList>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d012      	beq.n	80009fe <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <xQueueGenericReset+0xe4>)
 80009da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	f3bf 8f4f 	dsb	sy
 80009e4:	f3bf 8f6f 	isb	sy
 80009e8:	e009      	b.n	80009fe <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	3310      	adds	r3, #16
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fcc0 	bl	8000374 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	3324      	adds	r3, #36	; 0x24
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fcbb 	bl	8000374 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80009fe:	f7ff ff17 	bl	8000830 <vPortExitCritical>
 8000a02:	e001      	b.n	8000a08 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000a08:	68fb      	ldr	r3, [r7, #12]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	e000ed04 	.word	0xe000ed04

08000a18 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	4613      	mov	r3, r2
 8000a24:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d02d      	beq.n	8000a8c <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000a30:	2100      	movs	r1, #0
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	fba3 2302 	umull	r2, r3, r3, r2
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d000      	beq.n	8000a40 <xQueueGenericCreate+0x28>
 8000a3e:	2101      	movs	r1, #1
 8000a40:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d122      	bne.n	8000a8c <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000a4e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000a52:	d81b      	bhi.n	8000a8c <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	fb02 f303 	mul.w	r3, r2, r3
 8000a5c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	3350      	adds	r3, #80	; 0x50
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fb74 	bl	8000150 <pvPortMalloc>
 8000a68:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00d      	beq.n	8000a8c <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	3350      	adds	r3, #80	; 0x50
 8000a78:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000a7a:	79fa      	ldrb	r2, [r7, #7]
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	4613      	mov	r3, r2
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f000 f805 	bl	8000a96 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000a8c:	69fb      	ldr	r3, [r7, #28]
    }
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d103      	bne.n	8000ab2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	69ba      	ldr	r2, [r7, #24]
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e002      	b.n	8000ab8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	68ba      	ldr	r2, [r7, #8]
 8000ac2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	69b8      	ldr	r0, [r7, #24]
 8000ac8:	f7ff ff32 	bl	8000930 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	78fa      	ldrb	r2, [r7, #3]
 8000ad0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000af2:	f7ff fe83 	bl	80007fc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000af6:	6a3b      	ldr	r3, [r7, #32]
 8000af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d302      	bcc.n	8000b08 <xQueueGenericSend+0x2c>
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d129      	bne.n	8000b5c <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	68b9      	ldr	r1, [r7, #8]
 8000b0c:	6a38      	ldr	r0, [r7, #32]
 8000b0e:	f000 f931 	bl	8000d74 <prvCopyDataToQueue>
 8000b12:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b14:	6a3b      	ldr	r3, [r7, #32]
 8000b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d010      	beq.n	8000b3e <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b1c:	6a3b      	ldr	r3, [r7, #32]
 8000b1e:	3324      	adds	r3, #36	; 0x24
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 fa05 	bl	8001f30 <xTaskRemoveFromEventList>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d013      	beq.n	8000b54 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000b2c:	4b3f      	ldr	r3, [pc, #252]	; (8000c2c <xQueueGenericSend+0x150>)
 8000b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	f3bf 8f4f 	dsb	sy
 8000b38:	f3bf 8f6f 	isb	sy
 8000b3c:	e00a      	b.n	8000b54 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d007      	beq.n	8000b54 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000b44:	4b39      	ldr	r3, [pc, #228]	; (8000c2c <xQueueGenericSend+0x150>)
 8000b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000b54:	f7ff fe6c 	bl	8000830 <vPortExitCritical>
                return pdPASS;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e063      	b.n	8000c24 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d103      	bne.n	8000b6a <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000b62:	f7ff fe65 	bl	8000830 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e05c      	b.n	8000c24 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d106      	bne.n	8000b7e <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 faa3 	bl	80020c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000b7e:	f7ff fe57 	bl	8000830 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000b82:	f000 ff79 	bl	8001a78 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000b86:	f7ff fe39 	bl	80007fc <vPortEnterCritical>
 8000b8a:	6a3b      	ldr	r3, [r7, #32]
 8000b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b96:	d103      	bne.n	8000ba0 <xQueueGenericSend+0xc4>
 8000b98:	6a3b      	ldr	r3, [r7, #32]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bac:	d103      	bne.n	8000bb6 <xQueueGenericSend+0xda>
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000bb6:	f7ff fe3b 	bl	8000830 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000bba:	1d3a      	adds	r2, r7, #4
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 fa92 	bl	80020ec <xTaskCheckForTimeOut>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d124      	bne.n	8000c18 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000bce:	6a38      	ldr	r0, [r7, #32]
 8000bd0:	f000 f9c8 	bl	8000f64 <prvIsQueueFull>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d018      	beq.n	8000c0c <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000bda:	6a3b      	ldr	r3, [r7, #32]
 8000bdc:	3310      	adds	r3, #16
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 f98e 	bl	8001f04 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000be8:	6a38      	ldr	r0, [r7, #32]
 8000bea:	f000 f953 	bl	8000e94 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000bee:	f000 ff51 	bl	8001a94 <xTaskResumeAll>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f47f af7c 	bne.w	8000af2 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <xQueueGenericSend+0x150>)
 8000bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	f3bf 8f4f 	dsb	sy
 8000c06:	f3bf 8f6f 	isb	sy
 8000c0a:	e772      	b.n	8000af2 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000c0c:	6a38      	ldr	r0, [r7, #32]
 8000c0e:	f000 f941 	bl	8000e94 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000c12:	f000 ff3f 	bl	8001a94 <xTaskResumeAll>
 8000c16:	e76c      	b.n	8000af2 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000c18:	6a38      	ldr	r0, [r7, #32]
 8000c1a:	f000 f93b 	bl	8000e94 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000c1e:	f000 ff39 	bl	8001a94 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000c22:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	e000ed04 	.word	0xe000ed04

08000c30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c44:	f7ff fdda 	bl	80007fc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c48:	6a3b      	ldr	r3, [r7, #32]
 8000c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c4c:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d01f      	beq.n	8000c94 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6a38      	ldr	r0, [r7, #32]
 8000c58:	f000 f8f6 	bl	8000e48 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	1e5a      	subs	r2, r3, #1
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d00f      	beq.n	8000c8c <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	3310      	adds	r3, #16
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 f95d 	bl	8001f30 <xTaskRemoveFromEventList>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d007      	beq.n	8000c8c <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000c7c:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <xQueueReceive+0x140>)
 8000c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	f3bf 8f4f 	dsb	sy
 8000c88:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000c8c:	f7ff fdd0 	bl	8000830 <vPortExitCritical>
                return pdPASS;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e069      	b.n	8000d68 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000c9a:	f7ff fdc9 	bl	8000830 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e062      	b.n	8000d68 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d106      	bne.n	8000cb6 <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 fa07 	bl	80020c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000cb6:	f7ff fdbb 	bl	8000830 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000cba:	f000 fedd 	bl	8001a78 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000cbe:	f7ff fd9d 	bl	80007fc <vPortEnterCritical>
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cce:	d103      	bne.n	8000cd8 <xQueueReceive+0xa8>
 8000cd0:	6a3b      	ldr	r3, [r7, #32]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000cd8:	6a3b      	ldr	r3, [r7, #32]
 8000cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ce4:	d103      	bne.n	8000cee <xQueueReceive+0xbe>
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000cee:	f7ff fd9f 	bl	8000830 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000cf2:	1d3a      	adds	r2, r7, #4
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 f9f6 	bl	80020ec <xTaskCheckForTimeOut>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d123      	bne.n	8000d4e <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d06:	6a38      	ldr	r0, [r7, #32]
 8000d08:	f000 f916 	bl	8000f38 <prvIsQueueEmpty>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d017      	beq.n	8000d42 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d12:	6a3b      	ldr	r3, [r7, #32]
 8000d14:	3324      	adds	r3, #36	; 0x24
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f8f2 	bl	8001f04 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d20:	6a38      	ldr	r0, [r7, #32]
 8000d22:	f000 f8b7 	bl	8000e94 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d26:	f000 feb5 	bl	8001a94 <xTaskResumeAll>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d189      	bne.n	8000c44 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <xQueueReceive+0x140>)
 8000d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	f3bf 8f4f 	dsb	sy
 8000d3c:	f3bf 8f6f 	isb	sy
 8000d40:	e780      	b.n	8000c44 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000d42:	6a38      	ldr	r0, [r7, #32]
 8000d44:	f000 f8a6 	bl	8000e94 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000d48:	f000 fea4 	bl	8001a94 <xTaskResumeAll>
 8000d4c:	e77a      	b.n	8000c44 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000d4e:	6a38      	ldr	r0, [r7, #32]
 8000d50:	f000 f8a0 	bl	8000e94 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000d54:	f000 fe9e 	bl	8001a94 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d58:	6a38      	ldr	r0, [r7, #32]
 8000d5a:	f000 f8ed 	bl	8000f38 <prvIsQueueEmpty>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f43f af6f 	beq.w	8000c44 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000d66:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	e000ed04 	.word	0xe000ed04

08000d74 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d88:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10d      	bne.n	8000dae <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d14d      	bne.n	8000e36 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 faaa 	bl	80022f8 <xTaskPriorityDisinherit>
 8000da4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	e043      	b.n	8000e36 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d119      	bne.n	8000de8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6858      	ldr	r0, [r3, #4]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	f003 f9ff 	bl	80041c2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	441a      	add	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d32b      	bcc.n	8000e36 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	e026      	b.n	8000e36 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	68d8      	ldr	r0, [r3, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	461a      	mov	r2, r3
 8000df2:	68b9      	ldr	r1, [r7, #8]
 8000df4:	f003 f9e5 	bl	80041c2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	425b      	negs	r3, r3
 8000e02:	441a      	add	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d207      	bcs.n	8000e24 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	425b      	negs	r3, r3
 8000e1e:	441a      	add	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d105      	bne.n	8000e36 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d002      	beq.n	8000e36 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000e3e:	697b      	ldr	r3, [r7, #20]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d018      	beq.n	8000e8c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	441a      	add	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d303      	bcc.n	8000e7c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68d9      	ldr	r1, [r3, #12]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	461a      	mov	r2, r3
 8000e86:	6838      	ldr	r0, [r7, #0]
 8000e88:	f003 f99b 	bl	80041c2 <memcpy>
    }
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000e9c:	f7ff fcae 	bl	80007fc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ea6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ea8:	e011      	b.n	8000ece <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d012      	beq.n	8000ed8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3324      	adds	r3, #36	; 0x24
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 f83a 	bl	8001f30 <xTaskRemoveFromEventList>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000ec2:	f001 f95d 	bl	8002180 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	dce9      	bgt.n	8000eaa <prvUnlockQueue+0x16>
 8000ed6:	e000      	b.n	8000eda <prvUnlockQueue+0x46>
                    break;
 8000ed8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	22ff      	movs	r2, #255	; 0xff
 8000ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000ee2:	f7ff fca5 	bl	8000830 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000ee6:	f7ff fc89 	bl	80007fc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ef0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ef2:	e011      	b.n	8000f18 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d012      	beq.n	8000f22 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3310      	adds	r3, #16
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 f815 	bl	8001f30 <xTaskRemoveFromEventList>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000f0c:	f001 f938 	bl	8002180 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	dce9      	bgt.n	8000ef4 <prvUnlockQueue+0x60>
 8000f20:	e000      	b.n	8000f24 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000f22:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	22ff      	movs	r2, #255	; 0xff
 8000f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000f2c:	f7ff fc80 	bl	8000830 <vPortExitCritical>
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000f40:	f7ff fc5c 	bl	80007fc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	e001      	b.n	8000f56 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000f56:	f7ff fc6b 	bl	8000830 <vPortExitCritical>

    return xReturn;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000f6c:	f7ff fc46 	bl	80007fc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d102      	bne.n	8000f82 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	e001      	b.n	8000f86 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000f86:	f7ff fc53 	bl	8000830 <vPortExitCritical>

    return xReturn;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f9a:	f000 fa27 	bl	80013ec <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f9e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2178      	movs	r1, #120	; 0x78
 8000fa6:	485b      	ldr	r0, [pc, #364]	; (8001114 <SSD1306_Init+0x180>)
 8000fa8:	f001 ffc8 	bl	8002f3c <HAL_I2C_IsDeviceReady>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e0a9      	b.n	800110a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000fb6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000fba:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fbc:	e002      	b.n	8000fc4 <SSD1306_Init+0x30>
		p--;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f9      	bne.n	8000fbe <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000fca:	22ae      	movs	r2, #174	; 0xae
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2078      	movs	r0, #120	; 0x78
 8000fd0:	f000 fa86 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2078      	movs	r0, #120	; 0x78
 8000fda:	f000 fa81 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000fde:	2210      	movs	r2, #16
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2078      	movs	r0, #120	; 0x78
 8000fe4:	f000 fa7c 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fe8:	22b0      	movs	r2, #176	; 0xb0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2078      	movs	r0, #120	; 0x78
 8000fee:	f000 fa77 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000ff2:	22c8      	movs	r2, #200	; 0xc8
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2078      	movs	r0, #120	; 0x78
 8000ff8:	f000 fa72 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	2078      	movs	r0, #120	; 0x78
 8001002:	f000 fa6d 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001006:	2210      	movs	r2, #16
 8001008:	2100      	movs	r1, #0
 800100a:	2078      	movs	r0, #120	; 0x78
 800100c:	f000 fa68 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001010:	2240      	movs	r2, #64	; 0x40
 8001012:	2100      	movs	r1, #0
 8001014:	2078      	movs	r0, #120	; 0x78
 8001016:	f000 fa63 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800101a:	2281      	movs	r2, #129	; 0x81
 800101c:	2100      	movs	r1, #0
 800101e:	2078      	movs	r0, #120	; 0x78
 8001020:	f000 fa5e 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001024:	22ff      	movs	r2, #255	; 0xff
 8001026:	2100      	movs	r1, #0
 8001028:	2078      	movs	r0, #120	; 0x78
 800102a:	f000 fa59 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800102e:	22a1      	movs	r2, #161	; 0xa1
 8001030:	2100      	movs	r1, #0
 8001032:	2078      	movs	r0, #120	; 0x78
 8001034:	f000 fa54 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001038:	22a6      	movs	r2, #166	; 0xa6
 800103a:	2100      	movs	r1, #0
 800103c:	2078      	movs	r0, #120	; 0x78
 800103e:	f000 fa4f 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001042:	22a8      	movs	r2, #168	; 0xa8
 8001044:	2100      	movs	r1, #0
 8001046:	2078      	movs	r0, #120	; 0x78
 8001048:	f000 fa4a 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800104c:	223f      	movs	r2, #63	; 0x3f
 800104e:	2100      	movs	r1, #0
 8001050:	2078      	movs	r0, #120	; 0x78
 8001052:	f000 fa45 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001056:	22a4      	movs	r2, #164	; 0xa4
 8001058:	2100      	movs	r1, #0
 800105a:	2078      	movs	r0, #120	; 0x78
 800105c:	f000 fa40 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001060:	22d3      	movs	r2, #211	; 0xd3
 8001062:	2100      	movs	r1, #0
 8001064:	2078      	movs	r0, #120	; 0x78
 8001066:	f000 fa3b 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2078      	movs	r0, #120	; 0x78
 8001070:	f000 fa36 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001074:	22d5      	movs	r2, #213	; 0xd5
 8001076:	2100      	movs	r1, #0
 8001078:	2078      	movs	r0, #120	; 0x78
 800107a:	f000 fa31 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800107e:	22f0      	movs	r2, #240	; 0xf0
 8001080:	2100      	movs	r1, #0
 8001082:	2078      	movs	r0, #120	; 0x78
 8001084:	f000 fa2c 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001088:	22d9      	movs	r2, #217	; 0xd9
 800108a:	2100      	movs	r1, #0
 800108c:	2078      	movs	r0, #120	; 0x78
 800108e:	f000 fa27 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001092:	2222      	movs	r2, #34	; 0x22
 8001094:	2100      	movs	r1, #0
 8001096:	2078      	movs	r0, #120	; 0x78
 8001098:	f000 fa22 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800109c:	22da      	movs	r2, #218	; 0xda
 800109e:	2100      	movs	r1, #0
 80010a0:	2078      	movs	r0, #120	; 0x78
 80010a2:	f000 fa1d 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80010a6:	2212      	movs	r2, #18
 80010a8:	2100      	movs	r1, #0
 80010aa:	2078      	movs	r0, #120	; 0x78
 80010ac:	f000 fa18 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80010b0:	22db      	movs	r2, #219	; 0xdb
 80010b2:	2100      	movs	r1, #0
 80010b4:	2078      	movs	r0, #120	; 0x78
 80010b6:	f000 fa13 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80010ba:	2220      	movs	r2, #32
 80010bc:	2100      	movs	r1, #0
 80010be:	2078      	movs	r0, #120	; 0x78
 80010c0:	f000 fa0e 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80010c4:	228d      	movs	r2, #141	; 0x8d
 80010c6:	2100      	movs	r1, #0
 80010c8:	2078      	movs	r0, #120	; 0x78
 80010ca:	f000 fa09 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80010ce:	2214      	movs	r2, #20
 80010d0:	2100      	movs	r1, #0
 80010d2:	2078      	movs	r0, #120	; 0x78
 80010d4:	f000 fa04 	bl	80014e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80010d8:	22af      	movs	r2, #175	; 0xaf
 80010da:	2100      	movs	r1, #0
 80010dc:	2078      	movs	r0, #120	; 0x78
 80010de:	f000 f9ff 	bl	80014e0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80010e2:	222e      	movs	r2, #46	; 0x2e
 80010e4:	2100      	movs	r1, #0
 80010e6:	2078      	movs	r0, #120	; 0x78
 80010e8:	f000 f9fa 	bl	80014e0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010ec:	2000      	movs	r0, #0
 80010ee:	f000 f843 	bl	8001178 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80010f2:	f000 f813 	bl	800111c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <SSD1306_Init+0x184>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <SSD1306_Init+0x184>)
 80010fe:	2200      	movs	r2, #0
 8001100:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SSD1306_Init+0x184>)
 8001104:	2201      	movs	r2, #1
 8001106:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001108:	2301      	movs	r3, #1
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200028ac 	.word	0x200028ac
 8001118:	20002d04 	.word	0x20002d04

0800111c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001122:	2300      	movs	r3, #0
 8001124:	71fb      	strb	r3, [r7, #7]
 8001126:	e01d      	b.n	8001164 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	3b50      	subs	r3, #80	; 0x50
 800112c:	b2db      	uxtb	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	2100      	movs	r1, #0
 8001132:	2078      	movs	r0, #120	; 0x78
 8001134:	f000 f9d4 	bl	80014e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2078      	movs	r0, #120	; 0x78
 800113e:	f000 f9cf 	bl	80014e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001142:	2210      	movs	r2, #16
 8001144:	2100      	movs	r1, #0
 8001146:	2078      	movs	r0, #120	; 0x78
 8001148:	f000 f9ca 	bl	80014e0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	01db      	lsls	r3, r3, #7
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <SSD1306_UpdateScreen+0x58>)
 8001152:	441a      	add	r2, r3
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	2140      	movs	r1, #64	; 0x40
 8001158:	2078      	movs	r0, #120	; 0x78
 800115a:	f000 f95b 	bl	8001414 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	3301      	adds	r3, #1
 8001162:	71fb      	strb	r3, [r7, #7]
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b07      	cmp	r3, #7
 8001168:	d9de      	bls.n	8001128 <SSD1306_UpdateScreen+0xc>
	}
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20002904 	.word	0x20002904

08001178 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <SSD1306_Fill+0x14>
 8001188:	2300      	movs	r3, #0
 800118a:	e000      	b.n	800118e <SSD1306_Fill+0x16>
 800118c:	23ff      	movs	r3, #255	; 0xff
 800118e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001192:	4619      	mov	r1, r3
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <SSD1306_Fill+0x2c>)
 8001196:	f002 ff98 	bl	80040ca <memset>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20002904 	.word	0x20002904

080011a8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
 80011b2:	460b      	mov	r3, r1
 80011b4:	80bb      	strh	r3, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	70fb      	strb	r3, [r7, #3]
	if (
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	2b7f      	cmp	r3, #127	; 0x7f
 80011be:	d848      	bhi.n	8001252 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80011c0:	88bb      	ldrh	r3, [r7, #4]
 80011c2:	2b3f      	cmp	r3, #63	; 0x3f
 80011c4:	d845      	bhi.n	8001252 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <SSD1306_DrawPixel+0xb4>)
 80011c8:	791b      	ldrb	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d11a      	bne.n	8001218 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011e2:	88fa      	ldrh	r2, [r7, #6]
 80011e4:	88bb      	ldrh	r3, [r7, #4]
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	b298      	uxth	r0, r3
 80011ea:	4603      	mov	r3, r0
 80011ec:	01db      	lsls	r3, r3, #7
 80011ee:	4413      	add	r3, r2
 80011f0:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <SSD1306_DrawPixel+0xb8>)
 80011f2:	5cd3      	ldrb	r3, [r2, r3]
 80011f4:	b25a      	sxtb	r2, r3
 80011f6:	88bb      	ldrh	r3, [r7, #4]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	2101      	movs	r1, #1
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	b25b      	sxtb	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b259      	sxtb	r1, r3
 8001208:	88fa      	ldrh	r2, [r7, #6]
 800120a:	4603      	mov	r3, r0
 800120c:	01db      	lsls	r3, r3, #7
 800120e:	4413      	add	r3, r2
 8001210:	b2c9      	uxtb	r1, r1
 8001212:	4a13      	ldr	r2, [pc, #76]	; (8001260 <SSD1306_DrawPixel+0xb8>)
 8001214:	54d1      	strb	r1, [r2, r3]
 8001216:	e01d      	b.n	8001254 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001218:	88fa      	ldrh	r2, [r7, #6]
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	08db      	lsrs	r3, r3, #3
 800121e:	b298      	uxth	r0, r3
 8001220:	4603      	mov	r3, r0
 8001222:	01db      	lsls	r3, r3, #7
 8001224:	4413      	add	r3, r2
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <SSD1306_DrawPixel+0xb8>)
 8001228:	5cd3      	ldrb	r3, [r2, r3]
 800122a:	b25a      	sxtb	r2, r3
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	2101      	movs	r1, #1
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	b25b      	sxtb	r3, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	b25b      	sxtb	r3, r3
 800123e:	4013      	ands	r3, r2
 8001240:	b259      	sxtb	r1, r3
 8001242:	88fa      	ldrh	r2, [r7, #6]
 8001244:	4603      	mov	r3, r0
 8001246:	01db      	lsls	r3, r3, #7
 8001248:	4413      	add	r3, r2
 800124a:	b2c9      	uxtb	r1, r1
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <SSD1306_DrawPixel+0xb8>)
 800124e:	54d1      	strb	r1, [r2, r3]
 8001250:	e000      	b.n	8001254 <SSD1306_DrawPixel+0xac>
		return;
 8001252:	bf00      	nop
	}
}
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	20002d04 	.word	0x20002d04
 8001260:	20002904 	.word	0x20002904

08001264 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	460a      	mov	r2, r1
 800126e:	80fb      	strh	r3, [r7, #6]
 8001270:	4613      	mov	r3, r2
 8001272:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001274:	4a05      	ldr	r2, [pc, #20]	; (800128c <SSD1306_GotoXY+0x28>)
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <SSD1306_GotoXY+0x28>)
 800127c:	88bb      	ldrh	r3, [r7, #4]
 800127e:	8053      	strh	r3, [r2, #2]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20002d04 	.word	0x20002d04

08001290 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	4613      	mov	r3, r2
 800129e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012a0:	4b3a      	ldr	r3, [pc, #232]	; (800138c <SSD1306_Putc+0xfc>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
	if (
 80012ac:	2b7f      	cmp	r3, #127	; 0x7f
 80012ae:	dc07      	bgt.n	80012c0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <SSD1306_Putc+0xfc>)
 80012b2:	885b      	ldrh	r3, [r3, #2]
 80012b4:	461a      	mov	r2, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	785b      	ldrb	r3, [r3, #1]
 80012ba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012bc:	2b3f      	cmp	r3, #63	; 0x3f
 80012be:	dd01      	ble.n	80012c4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e05e      	b.n	8001382 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	e04b      	b.n	8001362 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	3b20      	subs	r3, #32
 80012d2:	6839      	ldr	r1, [r7, #0]
 80012d4:	7849      	ldrb	r1, [r1, #1]
 80012d6:	fb01 f303 	mul.w	r3, r1, r3
 80012da:	4619      	mov	r1, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	440b      	add	r3, r1
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	e030      	b.n	8001350 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d010      	beq.n	8001320 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012fe:	4b23      	ldr	r3, [pc, #140]	; (800138c <SSD1306_Putc+0xfc>)
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	b298      	uxth	r0, r3
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <SSD1306_Putc+0xfc>)
 800130c:	885a      	ldrh	r2, [r3, #2]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	b29b      	uxth	r3, r3
 8001312:	4413      	add	r3, r2
 8001314:	b29b      	uxth	r3, r3
 8001316:	79ba      	ldrb	r2, [r7, #6]
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff ff45 	bl	80011a8 <SSD1306_DrawPixel>
 800131e:	e014      	b.n	800134a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <SSD1306_Putc+0xfc>)
 8001322:	881a      	ldrh	r2, [r3, #0]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	b29b      	uxth	r3, r3
 8001328:	4413      	add	r3, r2
 800132a:	b298      	uxth	r0, r3
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <SSD1306_Putc+0xfc>)
 800132e:	885a      	ldrh	r2, [r3, #2]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	b29b      	uxth	r3, r3
 8001334:	4413      	add	r3, r2
 8001336:	b299      	uxth	r1, r3
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	2b00      	cmp	r3, #0
 800133c:	bf0c      	ite	eq
 800133e:	2301      	moveq	r3, #1
 8001340:	2300      	movne	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	f7ff ff2f 	bl	80011a8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	3301      	adds	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4293      	cmp	r3, r2
 800135a:	d3c8      	bcc.n	80012ee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	785b      	ldrb	r3, [r3, #1]
 8001366:	461a      	mov	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	4293      	cmp	r3, r2
 800136c:	d3ad      	bcc.n	80012ca <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <SSD1306_Putc+0xfc>)
 8001370:	881a      	ldrh	r2, [r3, #0]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4413      	add	r3, r2
 800137a:	b29a      	uxth	r2, r3
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <SSD1306_Putc+0xfc>)
 800137e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001380:	79fb      	ldrb	r3, [r7, #7]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20002d04 	.word	0x20002d04

08001390 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	4613      	mov	r3, r2
 800139c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800139e:	e012      	b.n	80013c6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	79fa      	ldrb	r2, [r7, #7]
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff71 	bl	8001290 <SSD1306_Putc>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d002      	beq.n	80013c0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	e008      	b.n	80013d2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3301      	adds	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1e8      	bne.n	80013a0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	781b      	ldrb	r3, [r3, #0]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80013de:	2000      	movs	r0, #0
 80013e0:	f7ff feca 	bl	8001178 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80013e4:	f7ff fe9a 	bl	800111c <SSD1306_UpdateScreen>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <ssd1306_I2C_Init+0x24>)
 80013f4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013f6:	e002      	b.n	80013fe <ssd1306_I2C_Init+0x12>
		p--;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f9      	bne.n	80013f8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	0003d090 	.word	0x0003d090

08001414 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b0c7      	sub	sp, #284	; 0x11c
 8001418:	af02      	add	r7, sp, #8
 800141a:	4604      	mov	r4, r0
 800141c:	4608      	mov	r0, r1
 800141e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001422:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001426:	600a      	str	r2, [r1, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800142e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001432:	4622      	mov	r2, r4
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800143a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800143e:	4602      	mov	r2, r0
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001446:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800144a:	460a      	mov	r2, r1
 800144c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800144e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001456:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800145a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001462:	2300      	movs	r3, #0
 8001464:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001468:	e015      	b.n	8001496 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800146a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800146e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001472:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	441a      	add	r2, r3
 800147a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800147e:	3301      	adds	r3, #1
 8001480:	7811      	ldrb	r1, [r2, #0]
 8001482:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001486:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800148a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800148c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001490:	3301      	adds	r3, #1
 8001492:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001496:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800149a:	b29b      	uxth	r3, r3
 800149c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80014a0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80014a4:	8812      	ldrh	r2, [r2, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d8df      	bhi.n	800146a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80014aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014ae:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b299      	uxth	r1, r3
 80014b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f107 020c 	add.w	r2, r7, #12
 80014c8:	200a      	movs	r0, #10
 80014ca:	9000      	str	r0, [sp, #0]
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <ssd1306_I2C_WriteMulti+0xc8>)
 80014ce:	f001 fc37 	bl	8002d40 <HAL_I2C_Master_Transmit>
}
 80014d2:	bf00      	nop
 80014d4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd90      	pop	{r4, r7, pc}
 80014dc:	200028ac 	.word	0x200028ac

080014e0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	460b      	mov	r3, r1
 80014ec:	71bb      	strb	r3, [r7, #6]
 80014ee:	4613      	mov	r3, r2
 80014f0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80014f2:	79bb      	ldrb	r3, [r7, #6]
 80014f4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80014f6:	797b      	ldrb	r3, [r7, #5]
 80014f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	b299      	uxth	r1, r3
 80014fe:	f107 020c 	add.w	r2, r7, #12
 8001502:	230a      	movs	r3, #10
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2302      	movs	r3, #2
 8001508:	4803      	ldr	r0, [pc, #12]	; (8001518 <ssd1306_I2C_Write+0x38>)
 800150a:	f001 fc19 	bl	8002d40 <HAL_I2C_Master_Transmit>
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200028ac 	.word	0x200028ac

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_MspInit+0x40>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	4a0d      	ldr	r2, [pc, #52]	; (800155c <HAL_MspInit+0x40>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6193      	str	r3, [r2, #24]
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_MspInit+0x40>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_MspInit+0x40>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_MspInit+0x40>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_MspInit+0x40>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000

08001560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <HAL_I2C_MspInit+0x70>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d123      	bne.n	80015c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001598:	23c0      	movs	r3, #192	; 0xc0
 800159a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159c:	2312      	movs	r3, #18
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <HAL_I2C_MspInit+0x78>)
 80015ac:	f001 f900 	bl	80027b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 80015b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ba:	61d3      	str	r3, [r2, #28]
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_I2C_MspInit+0x74>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40005400 	.word	0x40005400
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010c00 	.word	0x40010c00

080015dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return 1;
 80015e0:	2301      	movs	r3, #1
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <_kill>:

int _kill(int pid, int sig)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015f4:	f002 fdb8 	bl	8004168 <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2216      	movs	r2, #22
 80015fc:	601a      	str	r2, [r3, #0]
  return -1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_exit>:

void _exit (int status)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001612:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffe7 	bl	80015ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800161c:	e7fe      	b.n	800161c <_exit+0x12>

0800161e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e00a      	b.n	8001646 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001630:	f3af 8000 	nop.w
 8001634:	4601      	mov	r1, r0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	60ba      	str	r2, [r7, #8]
 800163c:	b2ca      	uxtb	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	dbf0      	blt.n	8001630 <_read+0x12>
  }

  return len;
 800164e:	687b      	ldr	r3, [r7, #4]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e009      	b.n	800167e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	429a      	cmp	r2, r3
 8001684:	dbf1      	blt.n	800166a <_write+0x12>
  }
  return len;
 8001686:	687b      	ldr	r3, [r7, #4]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_close>:

int _close(int file)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b6:	605a      	str	r2, [r3, #4]
  return 0;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <_isatty>:

int _isatty(int file)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016cc:	2301      	movs	r3, #1
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f002 fd22 	bl	8004168 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20005000 	.word	0x20005000
 8001750:	00000400 	.word	0x00000400
 8001754:	20002d0c 	.word	0x20002d0c
 8001758:	20002f78 	.word	0x20002f78

0800175c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001768:	b580      	push	{r7, lr}
 800176a:	b08c      	sub	sp, #48	; 0x30
 800176c:	af04      	add	r7, sp, #16
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	4613      	mov	r3, r2
 8001776:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fce7 	bl	8000150 <pvPortMalloc>
 8001782:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d013      	beq.n	80017b2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800178a:	205c      	movs	r0, #92	; 0x5c
 800178c:	f7fe fce0 	bl	8000150 <pvPortMalloc>
 8001790:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001798:	225c      	movs	r2, #92	; 0x5c
 800179a:	2100      	movs	r1, #0
 800179c:	69f8      	ldr	r0, [r7, #28]
 800179e:	f002 fc94 	bl	80040ca <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
 80017a8:	e005      	b.n	80017b6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7fe fd6e 	bl	800028c <vPortFree>
 80017b0:	e001      	b.n	80017b6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80017bc:	88fa      	ldrh	r2, [r7, #6]
 80017be:	2300      	movs	r3, #0
 80017c0:	9303      	str	r3, [sp, #12]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f80e 	bl	80017f4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80017d8:	69f8      	ldr	r0, [r7, #28]
 80017da:	f000 f87b 	bl	80018d4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80017de:	2301      	movs	r3, #1
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	e002      	b.n	80017ea <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017e8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80017ea:	69bb      	ldr	r3, [r7, #24]
    }
 80017ec:	4618      	mov	r0, r3
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	461a      	mov	r2, r3
 800180c:	21a5      	movs	r1, #165	; 0xa5
 800180e:	f002 fc5c 	bl	80040ca <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800181c:	3b01      	subs	r3, #1
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f023 0307 	bic.w	r3, r3, #7
 800182a:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d01e      	beq.n	8001870 <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e012      	b.n	800185e <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	4413      	add	r3, r2
 800183e:	7819      	ldrb	r1, [r3, #0]
 8001840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4413      	add	r3, r2
 8001846:	3334      	adds	r3, #52	; 0x34
 8001848:	460a      	mov	r2, r1
 800184a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	4413      	add	r3, r2
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3301      	adds	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d9e9      	bls.n	8001838 <prvInitialiseNewTask+0x44>
 8001864:	e000      	b.n	8001868 <prvInitialiseNewTask+0x74>
            {
                break;
 8001866:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	2b05      	cmp	r3, #5
 8001874:	d901      	bls.n	800187a <prvInitialiseNewTask+0x86>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001876:	2305      	movs	r3, #5
 8001878:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187c:	6a3a      	ldr	r2, [r7, #32]
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001882:	6a3a      	ldr	r2, [r7, #32]
 8001884:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001888:	3304      	adds	r3, #4
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fd91 	bl	80003b2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001892:	3318      	adds	r3, #24
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fd8c 	bl	80003b2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800189a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800189e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	f1c3 0206 	rsb	r2, r3, #6
 80018a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80018aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	68f9      	ldr	r1, [r7, #12]
 80018b4:	6938      	ldr	r0, [r7, #16]
 80018b6:	f7fe ff11 	bl	80006dc <pxPortInitialiseStack>
 80018ba:	4602      	mov	r2, r0
 80018bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018be:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <prvInitialiseNewTask+0xd8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ca:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80018cc:	bf00      	nop
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80018dc:	f7fe ff8e 	bl	80007fc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80018e0:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <prvAddNewTaskToReadyList+0x110>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a3f      	ldr	r2, [pc, #252]	; (80019e4 <prvAddNewTaskToReadyList+0x110>)
 80018e8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80018ea:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <prvAddNewTaskToReadyList+0x114>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80018f2:	4a3d      	ldr	r2, [pc, #244]	; (80019e8 <prvAddNewTaskToReadyList+0x114>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80018f8:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <prvAddNewTaskToReadyList+0x110>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d110      	bne.n	8001922 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001900:	f000 fc62 	bl	80021c8 <prvInitialiseTaskLists>
 8001904:	e00d      	b.n	8001922 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001906:	4b39      	ldr	r3, [pc, #228]	; (80019ec <prvAddNewTaskToReadyList+0x118>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800190e:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <prvAddNewTaskToReadyList+0x114>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	429a      	cmp	r2, r3
 800191a:	d802      	bhi.n	8001922 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800191c:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <prvAddNewTaskToReadyList+0x114>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001922:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <prvAddNewTaskToReadyList+0x11c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3301      	adds	r3, #1
 8001928:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <prvAddNewTaskToReadyList+0x11c>)
 800192a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800192c:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <prvAddNewTaskToReadyList+0x11c>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	2201      	movs	r2, #1
 800193a:	409a      	lsls	r2, r3
 800193c:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <prvAddNewTaskToReadyList+0x120>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4313      	orrs	r3, r2
 8001942:	4a2c      	ldr	r2, [pc, #176]	; (80019f4 <prvAddNewTaskToReadyList+0x120>)
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194a:	492b      	ldr	r1, [pc, #172]	; (80019f8 <prvAddNewTaskToReadyList+0x124>)
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	3304      	adds	r3, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	3204      	adds	r2, #4
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	1d1a      	adds	r2, r3, #4
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <prvAddNewTaskToReadyList+0x124>)
 800198a:	441a      	add	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	615a      	str	r2, [r3, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001994:	4918      	ldr	r1, [pc, #96]	; (80019f8 <prvAddNewTaskToReadyList+0x124>)
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	1c59      	adds	r1, r3, #1
 80019a4:	4814      	ldr	r0, [pc, #80]	; (80019f8 <prvAddNewTaskToReadyList+0x124>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4403      	add	r3, r0
 80019b0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80019b2:	f7fe ff3d 	bl	8000830 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <prvAddNewTaskToReadyList+0x118>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00e      	beq.n	80019dc <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <prvAddNewTaskToReadyList+0x114>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d207      	bcs.n	80019dc <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <prvAddNewTaskToReadyList+0x128>)
 80019ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	f3bf 8f4f 	dsb	sy
 80019d8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20002dfc 	.word	0x20002dfc
 80019e8:	20002d10 	.word	0x20002d10
 80019ec:	20002e08 	.word	0x20002e08
 80019f0:	20002e18 	.word	0x20002e18
 80019f4:	20002e04 	.word	0x20002e04
 80019f8:	20002d14 	.word	0x20002d14
 80019fc:	e000ed04 	.word	0xe000ed04

08001a00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <vTaskStartScheduler+0x5c>)
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a14:	4912      	ldr	r1, [pc, #72]	; (8001a60 <vTaskStartScheduler+0x60>)
 8001a16:	4813      	ldr	r0, [pc, #76]	; (8001a64 <vTaskStartScheduler+0x64>)
 8001a18:	f7ff fea6 	bl	8001768 <xTaskCreate>
 8001a1c:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d115      	bne.n	8001a50 <vTaskStartScheduler+0x50>
        __asm volatile
 8001a24:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001a28:	f383 8811 	msr	BASEPRI, r3
 8001a2c:	f3bf 8f6f 	isb	sy
 8001a30:	f3bf 8f4f 	dsb	sy
 8001a34:	603b      	str	r3, [r7, #0]
    }
 8001a36:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <vTaskStartScheduler+0x68>)
 8001a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a3e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <vTaskStartScheduler+0x6c>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <vTaskStartScheduler+0x70>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001a4c:	f7fe feb6 	bl	80007bc <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <vTaskStartScheduler+0x74>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20002e20 	.word	0x20002e20
 8001a60:	08004e94 	.word	0x08004e94
 8001a64:	08002199 	.word	0x08002199
 8001a68:	20002e1c 	.word	0x20002e1c
 8001a6c:	20002e08 	.word	0x20002e08
 8001a70:	20002e00 	.word	0x20002e00
 8001a74:	20000014 	.word	0x20000014

08001a78 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <vTaskSuspendAll+0x18>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	4a03      	ldr	r2, [pc, #12]	; (8001a90 <vTaskSuspendAll+0x18>)
 8001a84:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20002e24 	.word	0x20002e24

08001a94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001aa2:	f7fe feab 	bl	80007fc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001aa6:	4b68      	ldr	r3, [pc, #416]	; (8001c48 <xTaskResumeAll+0x1b4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	4a66      	ldr	r2, [pc, #408]	; (8001c48 <xTaskResumeAll+0x1b4>)
 8001aae:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ab0:	4b65      	ldr	r3, [pc, #404]	; (8001c48 <xTaskResumeAll+0x1b4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f040 80c0 	bne.w	8001c3a <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001aba:	4b64      	ldr	r3, [pc, #400]	; (8001c4c <xTaskResumeAll+0x1b8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80bb 	beq.w	8001c3a <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ac4:	e08a      	b.n	8001bdc <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ac6:	4b62      	ldr	r3, [pc, #392]	; (8001c50 <xTaskResumeAll+0x1bc>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	6a12      	ldr	r2, [r2, #32]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	69d2      	ldr	r2, [r2, #28]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3318      	adds	r3, #24
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d103      	bne.n	8001afc <xTaskResumeAll+0x68>
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	6a1a      	ldr	r2, [r3, #32]
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2200      	movs	r2, #0
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	1e5a      	subs	r2, r3, #1
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	68d2      	ldr	r2, [r2, #12]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	6892      	ldr	r2, [r2, #8]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d103      	bne.n	8001b3a <xTaskResumeAll+0xa6>
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	1e5a      	subs	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	2201      	movs	r2, #1
 8001b50:	409a      	lsls	r2, r3
 8001b52:	4b40      	ldr	r3, [pc, #256]	; (8001c54 <xTaskResumeAll+0x1c0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	4a3e      	ldr	r2, [pc, #248]	; (8001c54 <xTaskResumeAll+0x1c0>)
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b60:	493d      	ldr	r1, [pc, #244]	; (8001c58 <xTaskResumeAll+0x1c4>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	3204      	adds	r2, #4
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	1d1a      	adds	r2, r3, #4
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4a2e      	ldr	r2, [pc, #184]	; (8001c58 <xTaskResumeAll+0x1c4>)
 8001ba0:	441a      	add	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	615a      	str	r2, [r3, #20]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001baa:	492b      	ldr	r1, [pc, #172]	; (8001c58 <xTaskResumeAll+0x1c4>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	1c59      	adds	r1, r3, #1
 8001bba:	4827      	ldr	r0, [pc, #156]	; (8001c58 <xTaskResumeAll+0x1c4>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4403      	add	r3, r0
 8001bc6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <xTaskResumeAll+0x1c8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d302      	bcc.n	8001bdc <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8001bd6:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <xTaskResumeAll+0x1cc>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <xTaskResumeAll+0x1bc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f47f af70 	bne.w	8001ac6 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001bec:	f000 fb6a 	bl	80022c4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <xTaskResumeAll+0x1d0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d010      	beq.n	8001c1e <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001bfc:	f000 f836 	bl	8001c6c <xTaskIncrementTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <xTaskResumeAll+0x1cc>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f1      	bne.n	8001bfc <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <xTaskResumeAll+0x1d0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <xTaskResumeAll+0x1cc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001c26:	2301      	movs	r3, #1
 8001c28:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <xTaskResumeAll+0x1d4>)
 8001c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f3bf 8f4f 	dsb	sy
 8001c36:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001c3a:	f7fe fdf9 	bl	8000830 <vPortExitCritical>

    return xAlreadyYielded;
 8001c3e:	693b      	ldr	r3, [r7, #16]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20002e24 	.word	0x20002e24
 8001c4c:	20002dfc 	.word	0x20002dfc
 8001c50:	20002dbc 	.word	0x20002dbc
 8001c54:	20002e04 	.word	0x20002e04
 8001c58:	20002d14 	.word	0x20002d14
 8001c5c:	20002d10 	.word	0x20002d10
 8001c60:	20002e10 	.word	0x20002e10
 8001c64:	20002e0c 	.word	0x20002e0c
 8001c68:	e000ed04 	.word	0xe000ed04

08001c6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c76:	4b75      	ldr	r3, [pc, #468]	; (8001e4c <xTaskIncrementTick+0x1e0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 80dc 	bne.w	8001e38 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c80:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <xTaskIncrementTick+0x1e4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001c88:	4a71      	ldr	r2, [pc, #452]	; (8001e50 <xTaskIncrementTick+0x1e4>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d110      	bne.n	8001cb6 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001c94:	4b6f      	ldr	r3, [pc, #444]	; (8001e54 <xTaskIncrementTick+0x1e8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	4b6f      	ldr	r3, [pc, #444]	; (8001e58 <xTaskIncrementTick+0x1ec>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6d      	ldr	r2, [pc, #436]	; (8001e54 <xTaskIncrementTick+0x1e8>)
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4a6d      	ldr	r2, [pc, #436]	; (8001e58 <xTaskIncrementTick+0x1ec>)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b6c      	ldr	r3, [pc, #432]	; (8001e5c <xTaskIncrementTick+0x1f0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	4a6b      	ldr	r2, [pc, #428]	; (8001e5c <xTaskIncrementTick+0x1f0>)
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	f000 fb07 	bl	80022c4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001cb6:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <xTaskIncrementTick+0x1f4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f0c0 80a6 	bcc.w	8001e0e <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cc2:	4b64      	ldr	r3, [pc, #400]	; (8001e54 <xTaskIncrementTick+0x1e8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d104      	bne.n	8001cd6 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ccc:	4b64      	ldr	r3, [pc, #400]	; (8001e60 <xTaskIncrementTick+0x1f4>)
 8001cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cd2:	601a      	str	r2, [r3, #0]
                    break;
 8001cd4:	e09b      	b.n	8001e0e <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cd6:	4b5f      	ldr	r3, [pc, #380]	; (8001e54 <xTaskIncrementTick+0x1e8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d203      	bcs.n	8001cf6 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001cee:	4a5c      	ldr	r2, [pc, #368]	; (8001e60 <xTaskIncrementTick+0x1f4>)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001cf4:	e08b      	b.n	8001e0e <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	68d2      	ldr	r2, [r2, #12]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	6892      	ldr	r2, [r2, #8]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	3304      	adds	r3, #4
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d103      	bne.n	8001d24 <xTaskIncrementTick+0xb8>
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2200      	movs	r2, #0
 8001d28:	615a      	str	r2, [r3, #20]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	1e5a      	subs	r2, r3, #1
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01e      	beq.n	8001d7a <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	6a12      	ldr	r2, [r2, #32]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	69d2      	ldr	r2, [r2, #28]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	3318      	adds	r3, #24
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d103      	bne.n	8001d6a <xTaskIncrementTick+0xfe>
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	6a1a      	ldr	r2, [r3, #32]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	2201      	movs	r2, #1
 8001d80:	409a      	lsls	r2, r3
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <xTaskIncrementTick+0x1f8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	4a36      	ldr	r2, [pc, #216]	; (8001e64 <xTaskIncrementTick+0x1f8>)
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d90:	4935      	ldr	r1, [pc, #212]	; (8001e68 <xTaskIncrementTick+0x1fc>)
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	3204      	adds	r2, #4
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1d1a      	adds	r2, r3, #4
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <xTaskIncrementTick+0x1fc>)
 8001dd0:	441a      	add	r2, r3
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	615a      	str	r2, [r3, #20]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dda:	4923      	ldr	r1, [pc, #140]	; (8001e68 <xTaskIncrementTick+0x1fc>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	1c59      	adds	r1, r3, #1
 8001dea:	481f      	ldr	r0, [pc, #124]	; (8001e68 <xTaskIncrementTick+0x1fc>)
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4403      	add	r3, r0
 8001df6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <xTaskIncrementTick+0x200>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	429a      	cmp	r2, r3
 8001e04:	f67f af5d 	bls.w	8001cc2 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e0c:	e759      	b.n	8001cc2 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <xTaskIncrementTick+0x200>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e14:	4914      	ldr	r1, [pc, #80]	; (8001e68 <xTaskIncrementTick+0x1fc>)
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d901      	bls.n	8001e2a <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <xTaskIncrementTick+0x204>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8001e32:	2301      	movs	r3, #1
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e004      	b.n	8001e42 <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <xTaskIncrementTick+0x208>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <xTaskIncrementTick+0x208>)
 8001e40:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001e42:	69fb      	ldr	r3, [r7, #28]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20002e24 	.word	0x20002e24
 8001e50:	20002e00 	.word	0x20002e00
 8001e54:	20002db4 	.word	0x20002db4
 8001e58:	20002db8 	.word	0x20002db8
 8001e5c:	20002e14 	.word	0x20002e14
 8001e60:	20002e1c 	.word	0x20002e1c
 8001e64:	20002e04 	.word	0x20002e04
 8001e68:	20002d14 	.word	0x20002d14
 8001e6c:	20002d10 	.word	0x20002d10
 8001e70:	20002e10 	.word	0x20002e10
 8001e74:	20002e0c 	.word	0x20002e0c

08001e78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <vTaskSwitchContext+0x78>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <vTaskSwitchContext+0x7c>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001e8c:	e02a      	b.n	8001ee4 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <vTaskSwitchContext+0x7c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <vTaskSwitchContext+0x80>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	f1c3 031f 	rsb	r3, r3, #31
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4a11      	ldr	r2, [pc, #68]	; (8001efc <vTaskSwitchContext+0x84>)
 8001eb6:	4413      	add	r3, r2
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3308      	adds	r3, #8
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d104      	bne.n	8001eda <vTaskSwitchContext+0x62>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <vTaskSwitchContext+0x88>)
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20002e24 	.word	0x20002e24
 8001ef4:	20002e10 	.word	0x20002e10
 8001ef8:	20002e04 	.word	0x20002e04
 8001efc:	20002d14 	.word	0x20002d14
 8001f00:	20002d10 	.word	0x20002d10

08001f04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <vTaskPlaceOnEventList+0x28>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3318      	adds	r3, #24
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fa57 	bl	80003ca <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	6838      	ldr	r0, [r7, #0]
 8001f20:	f000 fa6c 	bl	80023fc <prvAddCurrentTaskToDelayedList>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20002d10 	.word	0x20002d10

08001f30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	6a12      	ldr	r2, [r2, #32]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	69d2      	ldr	r2, [r2, #28]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	3318      	adds	r3, #24
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d103      	bne.n	8001f6e <xTaskRemoveFromEventList+0x3e>
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	6a1a      	ldr	r2, [r3, #32]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2200      	movs	r2, #0
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	1e5a      	subs	r2, r3, #1
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f7e:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <xTaskRemoveFromEventList+0x178>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d15e      	bne.n	8002044 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	68d2      	ldr	r2, [r2, #12]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	6892      	ldr	r2, [r2, #8]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d103      	bne.n	8001fb4 <xTaskRemoveFromEventList+0x84>
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	1e5a      	subs	r2, r3, #1
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	2201      	movs	r2, #1
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	4b37      	ldr	r3, [pc, #220]	; (80020ac <xTaskRemoveFromEventList+0x17c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4a36      	ldr	r2, [pc, #216]	; (80020ac <xTaskRemoveFromEventList+0x17c>)
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fda:	4935      	ldr	r1, [pc, #212]	; (80020b0 <xTaskRemoveFromEventList+0x180>)
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	3204      	adds	r2, #4
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	1d1a      	adds	r2, r3, #4
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4a25      	ldr	r2, [pc, #148]	; (80020b0 <xTaskRemoveFromEventList+0x180>)
 800201a:	441a      	add	r2, r3
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	615a      	str	r2, [r3, #20]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002024:	4922      	ldr	r1, [pc, #136]	; (80020b0 <xTaskRemoveFromEventList+0x180>)
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	1c59      	adds	r1, r3, #1
 8002034:	481e      	ldr	r0, [pc, #120]	; (80020b0 <xTaskRemoveFromEventList+0x180>)
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4403      	add	r3, r0
 8002040:	6019      	str	r1, [r3, #0]
 8002042:	e01b      	b.n	800207c <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002044:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <xTaskRemoveFromEventList+0x184>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	61da      	str	r2, [r3, #28]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	621a      	str	r2, [r3, #32]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	3218      	adds	r2, #24
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	f103 0218 	add.w	r2, r3, #24
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	4a11      	ldr	r2, [pc, #68]	; (80020b4 <xTaskRemoveFromEventList+0x184>)
 8002070:	629a      	str	r2, [r3, #40]	; 0x28
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <xTaskRemoveFromEventList+0x184>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <xTaskRemoveFromEventList+0x184>)
 800207a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <xTaskRemoveFromEventList+0x188>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	429a      	cmp	r2, r3
 8002088:	d905      	bls.n	8002096 <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800208a:	2301      	movs	r3, #1
 800208c:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <xTaskRemoveFromEventList+0x18c>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e001      	b.n	800209a <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800209a:	69fb      	ldr	r3, [r7, #28]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3724      	adds	r7, #36	; 0x24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20002e24 	.word	0x20002e24
 80020ac:	20002e04 	.word	0x20002e04
 80020b0:	20002d14 	.word	0x20002d14
 80020b4:	20002dbc 	.word	0x20002dbc
 80020b8:	20002d10 	.word	0x20002d10
 80020bc:	20002e10 	.word	0x20002e10

080020c0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <vTaskInternalSetTimeOutState+0x24>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <vTaskInternalSetTimeOutState+0x28>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	605a      	str	r2, [r3, #4]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20002e14 	.word	0x20002e14
 80020e8:	20002e00 	.word	0x20002e00

080020ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 80020f6:	f7fe fb81 	bl	80007fc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <xTaskCheckForTimeOut+0x8c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002112:	d102      	bne.n	800211a <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	e026      	b.n	8002168 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <xTaskCheckForTimeOut+0x90>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d00a      	beq.n	800213c <xTaskCheckForTimeOut+0x50>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	429a      	cmp	r2, r3
 800212e:	d305      	bcc.n	800213c <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002130:	2301      	movs	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e015      	b.n	8002168 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	429a      	cmp	r2, r3
 8002144:	d20b      	bcs.n	800215e <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad2      	subs	r2, r2, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffb4 	bl	80020c0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	e004      	b.n	8002168 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002164:	2301      	movs	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002168:	f7fe fb62 	bl	8000830 <vPortExitCritical>

    return xReturn;
 800216c:	697b      	ldr	r3, [r7, #20]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20002e00 	.word	0x20002e00
 800217c:	20002e14 	.word	0x20002e14

08002180 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <vTaskMissedYield+0x14>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20002e10 	.word	0x20002e10

08002198 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80021a0:	f000 f852 	bl	8002248 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <prvIdleTask+0x28>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d9f9      	bls.n	80021a0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <prvIdleTask+0x2c>)
 80021ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80021bc:	e7f0      	b.n	80021a0 <prvIdleTask+0x8>
 80021be:	bf00      	nop
 80021c0:	20002d14 	.word	0x20002d14
 80021c4:	e000ed04 	.word	0xe000ed04

080021c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	e00c      	b.n	80021ee <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <prvInitialiseTaskLists+0x60>)
 80021e0:	4413      	add	r3, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f8c6 	bl	8000374 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3301      	adds	r3, #1
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d9ef      	bls.n	80021d4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <prvInitialiseTaskLists+0x64>)
 80021f6:	f7fe f8bd 	bl	8000374 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80021fa:	480d      	ldr	r0, [pc, #52]	; (8002230 <prvInitialiseTaskLists+0x68>)
 80021fc:	f7fe f8ba 	bl	8000374 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002200:	480c      	ldr	r0, [pc, #48]	; (8002234 <prvInitialiseTaskLists+0x6c>)
 8002202:	f7fe f8b7 	bl	8000374 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002206:	480c      	ldr	r0, [pc, #48]	; (8002238 <prvInitialiseTaskLists+0x70>)
 8002208:	f7fe f8b4 	bl	8000374 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800220c:	480b      	ldr	r0, [pc, #44]	; (800223c <prvInitialiseTaskLists+0x74>)
 800220e:	f7fe f8b1 	bl	8000374 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <prvInitialiseTaskLists+0x78>)
 8002214:	4a05      	ldr	r2, [pc, #20]	; (800222c <prvInitialiseTaskLists+0x64>)
 8002216:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <prvInitialiseTaskLists+0x7c>)
 800221a:	4a05      	ldr	r2, [pc, #20]	; (8002230 <prvInitialiseTaskLists+0x68>)
 800221c:	601a      	str	r2, [r3, #0]
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20002d14 	.word	0x20002d14
 800222c:	20002d8c 	.word	0x20002d8c
 8002230:	20002da0 	.word	0x20002da0
 8002234:	20002dbc 	.word	0x20002dbc
 8002238:	20002dd0 	.word	0x20002dd0
 800223c:	20002de8 	.word	0x20002de8
 8002240:	20002db4 	.word	0x20002db4
 8002244:	20002db8 	.word	0x20002db8

08002248 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800224e:	e019      	b.n	8002284 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002250:	f7fe fad4 	bl	80007fc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <prvCheckTasksWaitingTermination+0x50>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3304      	adds	r3, #4
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f8ea 	bl	800043a <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <prvCheckTasksWaitingTermination+0x54>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3b01      	subs	r3, #1
 800226c:	4a0b      	ldr	r2, [pc, #44]	; (800229c <prvCheckTasksWaitingTermination+0x54>)
 800226e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <prvCheckTasksWaitingTermination+0x58>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3b01      	subs	r3, #1
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <prvCheckTasksWaitingTermination+0x58>)
 8002278:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800227a:	f7fe fad9 	bl	8000830 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f810 	bl	80022a4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <prvCheckTasksWaitingTermination+0x58>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e1      	bne.n	8002250 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20002dd0 	.word	0x20002dd0
 800229c:	20002dfc 	.word	0x20002dfc
 80022a0:	20002de4 	.word	0x20002de4

080022a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fd ffeb 	bl	800028c <vPortFree>
            vPortFree( pxTCB );
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fd ffe8 	bl	800028c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <prvResetNextTaskUnblockTime+0x2c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d104      	bne.n	80022dc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <prvResetNextTaskUnblockTime+0x30>)
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022d8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80022da:	e005      	b.n	80022e8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <prvResetNextTaskUnblockTime+0x2c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a03      	ldr	r2, [pc, #12]	; (80022f4 <prvResetNextTaskUnblockTime+0x30>)
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	20002db4 	.word	0x20002db4
 80022f4:	20002e1c 	.word	0x20002e1c

080022f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d06c      	beq.n	80023e8 <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002312:	1e5a      	subs	r2, r3, #1
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002320:	429a      	cmp	r2, r3
 8002322:	d061      	beq.n	80023e8 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002328:	2b00      	cmp	r3, #0
 800232a:	d15d      	bne.n	80023e8 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	3304      	adds	r3, #4
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f882 	bl	800043a <uxListRemove>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10a      	bne.n	8002352 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	2201      	movs	r2, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <xTaskPriorityDisinherit+0xfc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4013      	ands	r3, r2
 800234e:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <xTaskPriorityDisinherit+0xfc>)
 8002350:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	f1c3 0206 	rsb	r2, r3, #6
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	2201      	movs	r2, #1
 800236c:	409a      	lsls	r2, r3
 800236e:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <xTaskPriorityDisinherit+0xfc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4313      	orrs	r3, r2
 8002374:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <xTaskPriorityDisinherit+0xfc>)
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237c:	491e      	ldr	r1, [pc, #120]	; (80023f8 <xTaskPriorityDisinherit+0x100>)
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	3304      	adds	r3, #4
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	3204      	adds	r2, #4
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1d1a      	adds	r2, r3, #4
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4a0f      	ldr	r2, [pc, #60]	; (80023f8 <xTaskPriorityDisinherit+0x100>)
 80023bc:	441a      	add	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	615a      	str	r2, [r3, #20]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c6:	490c      	ldr	r1, [pc, #48]	; (80023f8 <xTaskPriorityDisinherit+0x100>)
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	1c59      	adds	r1, r3, #1
 80023d6:	4808      	ldr	r0, [pc, #32]	; (80023f8 <xTaskPriorityDisinherit+0x100>)
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4403      	add	r3, r0
 80023e2:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80023e4:	2301      	movs	r3, #1
 80023e6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80023e8:	697b      	ldr	r3, [r7, #20]
    }
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20002e04 	.word	0x20002e04
 80023f8:	20002d14 	.word	0x20002d14

080023fc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002406:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800240c:	4b35      	ldr	r3, [pc, #212]	; (80024e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3304      	adds	r3, #4
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f811 	bl	800043a <uxListRemove>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10b      	bne.n	8002436 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800241e:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	2201      	movs	r2, #1
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <prvAddCurrentTaskToDelayedList+0xec>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4013      	ands	r3, r2
 8002432:	4a2d      	ldr	r2, [pc, #180]	; (80024e8 <prvAddCurrentTaskToDelayedList+0xec>)
 8002434:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800243c:	d124      	bne.n	8002488 <prvAddCurrentTaskToDelayedList+0x8c>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d021      	beq.n	8002488 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002444:	4b29      	ldr	r3, [pc, #164]	; (80024ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	6892      	ldr	r2, [r2, #8]
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	3204      	adds	r2, #4
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	1d1a      	adds	r2, r3, #4
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8002478:	615a      	str	r2, [r3, #20]
 800247a:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <prvAddCurrentTaskToDelayedList+0xf0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	3301      	adds	r3, #1
 8002480:	4a1a      	ldr	r2, [pc, #104]	; (80024ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002486:	e026      	b.n	80024d6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	d209      	bcs.n	80024b4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <prvAddCurrentTaskToDelayedList+0xf4>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3304      	adds	r3, #4
 80024aa:	4619      	mov	r1, r3
 80024ac:	4610      	mov	r0, r2
 80024ae:	f7fd ff8c 	bl	80003ca <vListInsert>
}
 80024b2:	e010      	b.n	80024d6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <prvAddCurrentTaskToDelayedList+0xf8>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3304      	adds	r3, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f7fd ff82 	bl	80003ca <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d202      	bcs.n	80024d6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80024d0:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6013      	str	r3, [r2, #0]
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20002e00 	.word	0x20002e00
 80024e4:	20002d10 	.word	0x20002d10
 80024e8:	20002e04 	.word	0x20002e04
 80024ec:	20002de8 	.word	0x20002de8
 80024f0:	20002db8 	.word	0x20002db8
 80024f4:	20002db4 	.word	0x20002db4
 80024f8:	20002e1c 	.word	0x20002e1c

080024fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024fc:	f7ff f92e 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002500:	480b      	ldr	r0, [pc, #44]	; (8002530 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002502:	490c      	ldr	r1, [pc, #48]	; (8002534 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002504:	4a0c      	ldr	r2, [pc, #48]	; (8002538 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002508:	e002      	b.n	8002510 <LoopCopyDataInit>

0800250a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800250c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800250e:	3304      	adds	r3, #4

08002510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002514:	d3f9      	bcc.n	800250a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002516:	4a09      	ldr	r2, [pc, #36]	; (800253c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002518:	4c09      	ldr	r4, [pc, #36]	; (8002540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800251a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800251c:	e001      	b.n	8002522 <LoopFillZerobss>

0800251e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800251e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002520:	3204      	adds	r2, #4

08002522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002524:	d3fb      	bcc.n	800251e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002526:	f001 fe25 	bl	8004174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800252a:	f7fd ffaf 	bl	800048c <main>
  bx lr
 800252e:	4770      	bx	lr
  ldr r0, =_sdata
 8002530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002534:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002538:	08005d08 	.word	0x08005d08
  ldr r2, =_sbss
 800253c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002540:	20002f78 	.word	0x20002f78

08002544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002544:	e7fe      	b.n	8002544 <ADC1_2_IRQHandler>
	...

08002548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_Init+0x28>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a07      	ldr	r2, [pc, #28]	; (8002570 <HAL_Init+0x28>)
 8002552:	f043 0310 	orr.w	r3, r3, #16
 8002556:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002558:	2003      	movs	r0, #3
 800255a:	f000 f8f5 	bl	8002748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800255e:	200f      	movs	r0, #15
 8002560:	f000 f808 	bl	8002574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002564:	f7fe ffda 	bl	800151c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40022000 	.word	0x40022000

08002574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_InitTick+0x54>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_InitTick+0x58>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258a:	fbb3 f3f1 	udiv	r3, r3, r1
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f8ff 	bl	8002796 <HAL_SYSTICK_Config>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e00e      	b.n	80025c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b0f      	cmp	r3, #15
 80025a6:	d80a      	bhi.n	80025be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a8:	2200      	movs	r2, #0
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b0:	f000 f8d5 	bl	800275e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b4:	4a06      	ldr	r2, [pc, #24]	; (80025d0 <HAL_InitTick+0x5c>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e000      	b.n	80025c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000010 	.word	0x20000010
 80025cc:	2000001c 	.word	0x2000001c
 80025d0:	20000018 	.word	0x20000018

080025d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return uwTick;
 80025d8:	4b02      	ldr	r3, [pc, #8]	; (80025e4 <HAL_GetTick+0x10>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	20002e28 	.word	0x20002e28

080025e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <__NVIC_SetPriorityGrouping+0x44>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002604:	4013      	ands	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261a:	4a04      	ldr	r2, [pc, #16]	; (800262c <__NVIC_SetPriorityGrouping+0x44>)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	60d3      	str	r3, [r2, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <__NVIC_GetPriorityGrouping+0x18>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	f003 0307 	and.w	r3, r3, #7
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	db0a      	blt.n	8002676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	490c      	ldr	r1, [pc, #48]	; (8002698 <__NVIC_SetPriority+0x4c>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	0112      	lsls	r2, r2, #4
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	440b      	add	r3, r1
 8002670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002674:	e00a      	b.n	800268c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4908      	ldr	r1, [pc, #32]	; (800269c <__NVIC_SetPriority+0x50>)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3b04      	subs	r3, #4
 8002684:	0112      	lsls	r2, r2, #4
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	440b      	add	r3, r1
 800268a:	761a      	strb	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000e100 	.word	0xe000e100
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	; 0x24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f1c3 0307 	rsb	r3, r3, #7
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	bf28      	it	cs
 80026be:	2304      	movcs	r3, #4
 80026c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3304      	adds	r3, #4
 80026c6:	2b06      	cmp	r3, #6
 80026c8:	d902      	bls.n	80026d0 <NVIC_EncodePriority+0x30>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3b03      	subs	r3, #3
 80026ce:	e000      	b.n	80026d2 <NVIC_EncodePriority+0x32>
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	401a      	ands	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43d9      	mvns	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	4313      	orrs	r3, r2
         );
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002714:	d301      	bcc.n	800271a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002716:	2301      	movs	r3, #1
 8002718:	e00f      	b.n	800273a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <SysTick_Config+0x40>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002722:	210f      	movs	r1, #15
 8002724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002728:	f7ff ff90 	bl	800264c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <SysTick_Config+0x40>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002732:	4b04      	ldr	r3, [pc, #16]	; (8002744 <SysTick_Config+0x40>)
 8002734:	2207      	movs	r2, #7
 8002736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	e000e010 	.word	0xe000e010

08002748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ff49 	bl	80025e8 <__NVIC_SetPriorityGrouping>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275e:	b580      	push	{r7, lr}
 8002760:	b086      	sub	sp, #24
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002770:	f7ff ff5e 	bl	8002630 <__NVIC_GetPriorityGrouping>
 8002774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	6978      	ldr	r0, [r7, #20]
 800277c:	f7ff ff90 	bl	80026a0 <NVIC_EncodePriority>
 8002780:	4602      	mov	r2, r0
 8002782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff5f 	bl	800264c <__NVIC_SetPriority>
}
 800278e:	bf00      	nop
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ffb0 	bl	8002704 <SysTick_Config>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b08b      	sub	sp, #44	; 0x2c
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c2:	e169      	b.n	8002a98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027c4:	2201      	movs	r2, #1
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	429a      	cmp	r2, r3
 80027de:	f040 8158 	bne.w	8002a92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4a9a      	ldr	r2, [pc, #616]	; (8002a50 <HAL_GPIO_Init+0x2a0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d05e      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 80027ec:	4a98      	ldr	r2, [pc, #608]	; (8002a50 <HAL_GPIO_Init+0x2a0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d875      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 80027f2:	4a98      	ldr	r2, [pc, #608]	; (8002a54 <HAL_GPIO_Init+0x2a4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d058      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 80027f8:	4a96      	ldr	r2, [pc, #600]	; (8002a54 <HAL_GPIO_Init+0x2a4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d86f      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 80027fe:	4a96      	ldr	r2, [pc, #600]	; (8002a58 <HAL_GPIO_Init+0x2a8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d052      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 8002804:	4a94      	ldr	r2, [pc, #592]	; (8002a58 <HAL_GPIO_Init+0x2a8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d869      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 800280a:	4a94      	ldr	r2, [pc, #592]	; (8002a5c <HAL_GPIO_Init+0x2ac>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d04c      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 8002810:	4a92      	ldr	r2, [pc, #584]	; (8002a5c <HAL_GPIO_Init+0x2ac>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d863      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 8002816:	4a92      	ldr	r2, [pc, #584]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d046      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
 800281c:	4a90      	ldr	r2, [pc, #576]	; (8002a60 <HAL_GPIO_Init+0x2b0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d85d      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 8002822:	2b12      	cmp	r3, #18
 8002824:	d82a      	bhi.n	800287c <HAL_GPIO_Init+0xcc>
 8002826:	2b12      	cmp	r3, #18
 8002828:	d859      	bhi.n	80028de <HAL_GPIO_Init+0x12e>
 800282a:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <HAL_GPIO_Init+0x80>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	080028ab 	.word	0x080028ab
 8002834:	08002885 	.word	0x08002885
 8002838:	08002897 	.word	0x08002897
 800283c:	080028d9 	.word	0x080028d9
 8002840:	080028df 	.word	0x080028df
 8002844:	080028df 	.word	0x080028df
 8002848:	080028df 	.word	0x080028df
 800284c:	080028df 	.word	0x080028df
 8002850:	080028df 	.word	0x080028df
 8002854:	080028df 	.word	0x080028df
 8002858:	080028df 	.word	0x080028df
 800285c:	080028df 	.word	0x080028df
 8002860:	080028df 	.word	0x080028df
 8002864:	080028df 	.word	0x080028df
 8002868:	080028df 	.word	0x080028df
 800286c:	080028df 	.word	0x080028df
 8002870:	080028df 	.word	0x080028df
 8002874:	0800288d 	.word	0x0800288d
 8002878:	080028a1 	.word	0x080028a1
 800287c:	4a79      	ldr	r2, [pc, #484]	; (8002a64 <HAL_GPIO_Init+0x2b4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002882:	e02c      	b.n	80028de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	623b      	str	r3, [r7, #32]
          break;
 800288a:	e029      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	3304      	adds	r3, #4
 8002892:	623b      	str	r3, [r7, #32]
          break;
 8002894:	e024      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	3308      	adds	r3, #8
 800289c:	623b      	str	r3, [r7, #32]
          break;
 800289e:	e01f      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	330c      	adds	r3, #12
 80028a6:	623b      	str	r3, [r7, #32]
          break;
 80028a8:	e01a      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028b2:	2304      	movs	r3, #4
 80028b4:	623b      	str	r3, [r7, #32]
          break;
 80028b6:	e013      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028c0:	2308      	movs	r3, #8
 80028c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	611a      	str	r2, [r3, #16]
          break;
 80028ca:	e009      	b.n	80028e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028cc:	2308      	movs	r3, #8
 80028ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	615a      	str	r2, [r3, #20]
          break;
 80028d6:	e003      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
          break;
 80028dc:	e000      	b.n	80028e0 <HAL_GPIO_Init+0x130>
          break;
 80028de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2bff      	cmp	r3, #255	; 0xff
 80028e4:	d801      	bhi.n	80028ea <HAL_GPIO_Init+0x13a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	e001      	b.n	80028ee <HAL_GPIO_Init+0x13e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2bff      	cmp	r3, #255	; 0xff
 80028f4:	d802      	bhi.n	80028fc <HAL_GPIO_Init+0x14c>
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	e002      	b.n	8002902 <HAL_GPIO_Init+0x152>
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	3b08      	subs	r3, #8
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	210f      	movs	r1, #15
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	fa01 f303 	lsl.w	r3, r1, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	401a      	ands	r2, r3
 8002914:	6a39      	ldr	r1, [r7, #32]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	431a      	orrs	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80b1 	beq.w	8002a92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002930:	4b4d      	ldr	r3, [pc, #308]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4a4c      	ldr	r2, [pc, #304]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6193      	str	r3, [r2, #24]
 800293c:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002948:	4a48      	ldr	r2, [pc, #288]	; (8002a6c <HAL_GPIO_Init+0x2bc>)
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	089b      	lsrs	r3, r3, #2
 800294e:	3302      	adds	r3, #2
 8002950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002954:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	220f      	movs	r2, #15
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4013      	ands	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a40      	ldr	r2, [pc, #256]	; (8002a70 <HAL_GPIO_Init+0x2c0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d013      	beq.n	800299c <HAL_GPIO_Init+0x1ec>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a3f      	ldr	r2, [pc, #252]	; (8002a74 <HAL_GPIO_Init+0x2c4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00d      	beq.n	8002998 <HAL_GPIO_Init+0x1e8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a3e      	ldr	r2, [pc, #248]	; (8002a78 <HAL_GPIO_Init+0x2c8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <HAL_GPIO_Init+0x1e4>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a3d      	ldr	r2, [pc, #244]	; (8002a7c <HAL_GPIO_Init+0x2cc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d101      	bne.n	8002990 <HAL_GPIO_Init+0x1e0>
 800298c:	2303      	movs	r3, #3
 800298e:	e006      	b.n	800299e <HAL_GPIO_Init+0x1ee>
 8002990:	2304      	movs	r3, #4
 8002992:	e004      	b.n	800299e <HAL_GPIO_Init+0x1ee>
 8002994:	2302      	movs	r3, #2
 8002996:	e002      	b.n	800299e <HAL_GPIO_Init+0x1ee>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_GPIO_Init+0x1ee>
 800299c:	2300      	movs	r3, #0
 800299e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a0:	f002 0203 	and.w	r2, r2, #3
 80029a4:	0092      	lsls	r2, r2, #2
 80029a6:	4093      	lsls	r3, r2
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029ae:	492f      	ldr	r1, [pc, #188]	; (8002a6c <HAL_GPIO_Init+0x2bc>)
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d006      	beq.n	80029d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029c8:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	492c      	ldr	r1, [pc, #176]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029d6:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	43db      	mvns	r3, r3
 80029de:	4928      	ldr	r1, [pc, #160]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d006      	beq.n	80029fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029f0:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	4922      	ldr	r1, [pc, #136]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60cb      	str	r3, [r1, #12]
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	491e      	ldr	r1, [pc, #120]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d006      	beq.n	8002a26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4918      	ldr	r1, [pc, #96]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a26:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	4914      	ldr	r1, [pc, #80]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d021      	beq.n	8002a84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	490e      	ldr	r1, [pc, #56]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	600b      	str	r3, [r1, #0]
 8002a4c:	e021      	b.n	8002a92 <HAL_GPIO_Init+0x2e2>
 8002a4e:	bf00      	nop
 8002a50:	10320000 	.word	0x10320000
 8002a54:	10310000 	.word	0x10310000
 8002a58:	10220000 	.word	0x10220000
 8002a5c:	10210000 	.word	0x10210000
 8002a60:	10120000 	.word	0x10120000
 8002a64:	10110000 	.word	0x10110000
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40010800 	.word	0x40010800
 8002a74:	40010c00 	.word	0x40010c00
 8002a78:	40011000 	.word	0x40011000
 8002a7c:	40011400 	.word	0x40011400
 8002a80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_GPIO_Init+0x304>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	4909      	ldr	r1, [pc, #36]	; (8002ab4 <HAL_GPIO_Init+0x304>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	3301      	adds	r3, #1
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f47f ae8e 	bne.w	80027c4 <HAL_GPIO_Init+0x14>
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	372c      	adds	r7, #44	; 0x2c
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	40010400 	.word	0x40010400

08002ab8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e12b      	b.n	8002d22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fe fd3e 	bl	8001560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2224      	movs	r2, #36	; 0x24
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b1c:	f001 f960 	bl	8003de0 <HAL_RCC_GetPCLK1Freq>
 8002b20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4a81      	ldr	r2, [pc, #516]	; (8002d2c <HAL_I2C_Init+0x274>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d807      	bhi.n	8002b3c <HAL_I2C_Init+0x84>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4a80      	ldr	r2, [pc, #512]	; (8002d30 <HAL_I2C_Init+0x278>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	bf94      	ite	ls
 8002b34:	2301      	movls	r3, #1
 8002b36:	2300      	movhi	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e006      	b.n	8002b4a <HAL_I2C_Init+0x92>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4a7d      	ldr	r2, [pc, #500]	; (8002d34 <HAL_I2C_Init+0x27c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	bf94      	ite	ls
 8002b44:	2301      	movls	r3, #1
 8002b46:	2300      	movhi	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0e7      	b.n	8002d22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4a78      	ldr	r2, [pc, #480]	; (8002d38 <HAL_I2C_Init+0x280>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	0c9b      	lsrs	r3, r3, #18
 8002b5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4a6a      	ldr	r2, [pc, #424]	; (8002d2c <HAL_I2C_Init+0x274>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d802      	bhi.n	8002b8c <HAL_I2C_Init+0xd4>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	e009      	b.n	8002ba0 <HAL_I2C_Init+0xe8>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b92:	fb02 f303 	mul.w	r3, r2, r3
 8002b96:	4a69      	ldr	r2, [pc, #420]	; (8002d3c <HAL_I2C_Init+0x284>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	099b      	lsrs	r3, r3, #6
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	495c      	ldr	r1, [pc, #368]	; (8002d2c <HAL_I2C_Init+0x274>)
 8002bbc:	428b      	cmp	r3, r1
 8002bbe:	d819      	bhi.n	8002bf4 <HAL_I2C_Init+0x13c>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1e59      	subs	r1, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bce:	1c59      	adds	r1, r3, #1
 8002bd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bd4:	400b      	ands	r3, r1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_I2C_Init+0x138>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1e59      	subs	r1, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be8:	3301      	adds	r3, #1
 8002bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bee:	e051      	b.n	8002c94 <HAL_I2C_Init+0x1dc>
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	e04f      	b.n	8002c94 <HAL_I2C_Init+0x1dc>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d111      	bne.n	8002c20 <HAL_I2C_Init+0x168>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1e58      	subs	r0, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	440b      	add	r3, r1
 8002c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	e012      	b.n	8002c46 <HAL_I2C_Init+0x18e>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1e58      	subs	r0, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	0099      	lsls	r1, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c36:	3301      	adds	r3, #1
 8002c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_I2C_Init+0x196>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e022      	b.n	8002c94 <HAL_I2C_Init+0x1dc>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10e      	bne.n	8002c74 <HAL_I2C_Init+0x1bc>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1e58      	subs	r0, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	440b      	add	r3, r1
 8002c64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c68:	3301      	adds	r3, #1
 8002c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c72:	e00f      	b.n	8002c94 <HAL_I2C_Init+0x1dc>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1e58      	subs	r0, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6859      	ldr	r1, [r3, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	0099      	lsls	r1, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	6809      	ldr	r1, [r1, #0]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6911      	ldr	r1, [r2, #16]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68d2      	ldr	r2, [r2, #12]
 8002cce:	4311      	orrs	r1, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	000186a0 	.word	0x000186a0
 8002d30:	001e847f 	.word	0x001e847f
 8002d34:	003d08ff 	.word	0x003d08ff
 8002d38:	431bde83 	.word	0x431bde83
 8002d3c:	10624dd3 	.word	0x10624dd3

08002d40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	817b      	strh	r3, [r7, #10]
 8002d50:	4613      	mov	r3, r2
 8002d52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d54:	f7ff fc3e 	bl	80025d4 <HAL_GetTick>
 8002d58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	f040 80e0 	bne.w	8002f28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	2319      	movs	r3, #25
 8002d6e:	2201      	movs	r2, #1
 8002d70:	4970      	ldr	r1, [pc, #448]	; (8002f34 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fa92 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e0d3      	b.n	8002f2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_I2C_Master_Transmit+0x50>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e0cc      	b.n	8002f2a <HAL_I2C_Master_Transmit+0x1ea>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d007      	beq.n	8002db6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0201 	orr.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2221      	movs	r2, #33	; 0x21
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	893a      	ldrh	r2, [r7, #8]
 8002de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4a50      	ldr	r2, [pc, #320]	; (8002f38 <HAL_I2C_Master_Transmit+0x1f8>)
 8002df6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002df8:	8979      	ldrh	r1, [r7, #10]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	6a3a      	ldr	r2, [r7, #32]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f9ca 	bl	8003198 <I2C_MasterRequestWrite>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e08d      	b.n	8002f2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e24:	e066      	b.n	8002ef4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	6a39      	ldr	r1, [r7, #32]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fb50 	bl	80034d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00d      	beq.n	8002e52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d107      	bne.n	8002e4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e06b      	b.n	8002f2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_I2C_Master_Transmit+0x188>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d017      	beq.n	8002ec8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	781a      	ldrb	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	6a39      	ldr	r1, [r7, #32]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fb47 	bl	8003560 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d107      	bne.n	8002ef0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e01a      	b.n	8002f2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d194      	bne.n	8002e26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e000      	b.n	8002f2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
  }
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	00100002 	.word	0x00100002
 8002f38:	ffff0000 	.word	0xffff0000

08002f3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f4c:	f7ff fb42 	bl	80025d4 <HAL_GetTick>
 8002f50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	f040 8111 	bne.w	8003186 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2319      	movs	r3, #25
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4988      	ldr	r1, [pc, #544]	; (8003190 <HAL_I2C_IsDeviceReady+0x254>)
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f994 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e104      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_I2C_IsDeviceReady+0x50>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e0fd      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d007      	beq.n	8002fb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2224      	movs	r2, #36	; 0x24
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a70      	ldr	r2, [pc, #448]	; (8003194 <HAL_I2C_IsDeviceReady+0x258>)
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f952 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300c:	d103      	bne.n	8003016 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0b6      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003028:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800302a:	f7ff fad3 	bl	80025d4 <HAL_GetTick>
 800302e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b02      	cmp	r3, #2
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800305e:	e025      	b.n	80030ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003060:	f7ff fab8 	bl	80025d4 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d302      	bcc.n	8003076 <HAL_I2C_IsDeviceReady+0x13a>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	22a0      	movs	r2, #160	; 0xa0
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2ba0      	cmp	r3, #160	; 0xa0
 80030b6:	d005      	beq.n	80030c4 <HAL_I2C_IsDeviceReady+0x188>
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d102      	bne.n	80030c4 <HAL_I2C_IsDeviceReady+0x188>
 80030be:	7dbb      	ldrb	r3, [r7, #22]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0cd      	beq.n	8003060 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d129      	bne.n	800312e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2319      	movs	r3, #25
 8003106:	2201      	movs	r2, #1
 8003108:	4921      	ldr	r1, [pc, #132]	; (8003190 <HAL_I2C_IsDeviceReady+0x254>)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f8c6 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e036      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e02c      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003146:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2319      	movs	r3, #25
 800314e:	2201      	movs	r2, #1
 8003150:	490f      	ldr	r1, [pc, #60]	; (8003190 <HAL_I2C_IsDeviceReady+0x254>)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f8a2 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e012      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	3301      	adds	r3, #1
 8003166:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	f4ff af32 	bcc.w	8002fd6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
  }
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	00100002 	.word	0x00100002
 8003194:	ffff0000 	.word	0xffff0000

08003198 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	460b      	mov	r3, r1
 80031a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d006      	beq.n	80031c2 <I2C_MasterRequestWrite+0x2a>
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d003      	beq.n	80031c2 <I2C_MasterRequestWrite+0x2a>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031c0:	d108      	bne.n	80031d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	e00b      	b.n	80031ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	2b12      	cmp	r3, #18
 80031da:	d107      	bne.n	80031ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f84f 	bl	800329c <I2C_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00d      	beq.n	8003220 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003212:	d103      	bne.n	800321c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e035      	b.n	800328c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003228:	d108      	bne.n	800323c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800322a:	897b      	ldrh	r3, [r7, #10]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003238:	611a      	str	r2, [r3, #16]
 800323a:	e01b      	b.n	8003274 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800323c:	897b      	ldrh	r3, [r7, #10]
 800323e:	11db      	asrs	r3, r3, #7
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f003 0306 	and.w	r3, r3, #6
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f063 030f 	orn	r3, r3, #15
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	490e      	ldr	r1, [pc, #56]	; (8003294 <I2C_MasterRequestWrite+0xfc>)
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f898 	bl	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e010      	b.n	800328c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4907      	ldr	r1, [pc, #28]	; (8003298 <I2C_MasterRequestWrite+0x100>)
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f888 	bl	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	00010008 	.word	0x00010008
 8003298:	00010002 	.word	0x00010002

0800329c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ac:	e048      	b.n	8003340 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b4:	d044      	beq.n	8003340 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b6:	f7ff f98d 	bl	80025d4 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d302      	bcc.n	80032cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d139      	bne.n	8003340 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	0c1b      	lsrs	r3, r3, #16
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d10d      	bne.n	80032f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	43da      	mvns	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4013      	ands	r3, r2
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	e00c      	b.n	800330c <I2C_WaitOnFlagUntilTimeout+0x70>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	43da      	mvns	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4013      	ands	r3, r2
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	429a      	cmp	r2, r3
 8003310:	d116      	bne.n	8003340 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f043 0220 	orr.w	r2, r3, #32
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e023      	b.n	8003388 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	0c1b      	lsrs	r3, r3, #16
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b01      	cmp	r3, #1
 8003348:	d10d      	bne.n	8003366 <I2C_WaitOnFlagUntilTimeout+0xca>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	43da      	mvns	r2, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	4013      	ands	r3, r2
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	bf0c      	ite	eq
 800335c:	2301      	moveq	r3, #1
 800335e:	2300      	movne	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	e00c      	b.n	8003380 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	43da      	mvns	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4013      	ands	r3, r2
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	429a      	cmp	r2, r3
 8003384:	d093      	beq.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800339e:	e071      	b.n	8003484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ae:	d123      	bne.n	80033f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f043 0204 	orr.w	r2, r3, #4
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e067      	b.n	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033fe:	d041      	beq.n	8003484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003400:	f7ff f8e8 	bl	80025d4 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	429a      	cmp	r2, r3
 800340e:	d302      	bcc.n	8003416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d136      	bne.n	8003484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	0c1b      	lsrs	r3, r3, #16
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d10c      	bne.n	800343a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	43da      	mvns	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	bf14      	ite	ne
 8003432:	2301      	movne	r3, #1
 8003434:	2300      	moveq	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	e00b      	b.n	8003452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	43da      	mvns	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4013      	ands	r3, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d016      	beq.n	8003484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e021      	b.n	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	0c1b      	lsrs	r3, r3, #16
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d10c      	bne.n	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	43da      	mvns	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4013      	ands	r3, r2
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	e00b      	b.n	80034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	43da      	mvns	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4013      	ands	r3, r2
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf14      	ite	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	2300      	moveq	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f47f af6d 	bne.w	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034dc:	e034      	b.n	8003548 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f886 	bl	80035f0 <I2C_IsAcknowledgeFailed>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e034      	b.n	8003558 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034f4:	d028      	beq.n	8003548 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7ff f86d 	bl	80025d4 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d11d      	bne.n	8003548 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003516:	2b80      	cmp	r3, #128	; 0x80
 8003518:	d016      	beq.n	8003548 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e007      	b.n	8003558 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003552:	2b80      	cmp	r3, #128	; 0x80
 8003554:	d1c3      	bne.n	80034de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800356c:	e034      	b.n	80035d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f83e 	bl	80035f0 <I2C_IsAcknowledgeFailed>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e034      	b.n	80035e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003584:	d028      	beq.n	80035d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7ff f825 	bl	80025d4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d11d      	bne.n	80035d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d016      	beq.n	80035d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e007      	b.n	80035e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d1c3      	bne.n	800356e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003606:	d11b      	bne.n	8003640 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003610:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f043 0204 	orr.w	r2, r3, #4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e272      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8087 	beq.w	800377a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800366c:	4b92      	ldr	r3, [pc, #584]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b04      	cmp	r3, #4
 8003676:	d00c      	beq.n	8003692 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003678:	4b8f      	ldr	r3, [pc, #572]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 030c 	and.w	r3, r3, #12
 8003680:	2b08      	cmp	r3, #8
 8003682:	d112      	bne.n	80036aa <HAL_RCC_OscConfig+0x5e>
 8003684:	4b8c      	ldr	r3, [pc, #560]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003690:	d10b      	bne.n	80036aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003692:	4b89      	ldr	r3, [pc, #548]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d06c      	beq.n	8003778 <HAL_RCC_OscConfig+0x12c>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d168      	bne.n	8003778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e24c      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x76>
 80036b4:	4b80      	ldr	r3, [pc, #512]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a7f      	ldr	r2, [pc, #508]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	e02e      	b.n	8003720 <HAL_RCC_OscConfig+0xd4>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x98>
 80036ca:	4b7b      	ldr	r3, [pc, #492]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a7a      	ldr	r2, [pc, #488]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b78      	ldr	r3, [pc, #480]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a77      	ldr	r2, [pc, #476]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e01d      	b.n	8003720 <HAL_RCC_OscConfig+0xd4>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0xbc>
 80036ee:	4b72      	ldr	r3, [pc, #456]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a71      	ldr	r2, [pc, #452]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b6f      	ldr	r3, [pc, #444]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6e      	ldr	r2, [pc, #440]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e00b      	b.n	8003720 <HAL_RCC_OscConfig+0xd4>
 8003708:	4b6b      	ldr	r3, [pc, #428]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a6a      	ldr	r2, [pc, #424]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800370e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b68      	ldr	r3, [pc, #416]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a67      	ldr	r2, [pc, #412]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800371a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fe ff54 	bl	80025d4 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe ff50 	bl	80025d4 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e200      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b5d      	ldr	r3, [pc, #372]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0xe4>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fe ff40 	bl	80025d4 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe ff3c 	bl	80025d4 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e1ec      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376a:	4b53      	ldr	r3, [pc, #332]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x10c>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d063      	beq.n	800384e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003786:	4b4c      	ldr	r3, [pc, #304]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003792:	4b49      	ldr	r3, [pc, #292]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b08      	cmp	r3, #8
 800379c:	d11c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x18c>
 800379e:	4b46      	ldr	r3, [pc, #280]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d116      	bne.n	80037d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	4b43      	ldr	r3, [pc, #268]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_RCC_OscConfig+0x176>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d001      	beq.n	80037c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e1c0      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c2:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4939      	ldr	r1, [pc, #228]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d6:	e03a      	b.n	800384e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d020      	beq.n	8003822 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e0:	4b36      	ldr	r3, [pc, #216]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e6:	f7fe fef5 	bl	80025d4 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ee:	f7fe fef1 	bl	80025d4 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e1a1      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003800:	4b2d      	ldr	r3, [pc, #180]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380c:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4927      	ldr	r1, [pc, #156]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 800381c:	4313      	orrs	r3, r2
 800381e:	600b      	str	r3, [r1, #0]
 8003820:	e015      	b.n	800384e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003822:	4b26      	ldr	r3, [pc, #152]	; (80038bc <HAL_RCC_OscConfig+0x270>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7fe fed4 	bl	80025d4 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003830:	f7fe fed0 	bl	80025d4 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e180      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d03a      	beq.n	80038d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d019      	beq.n	8003896 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003862:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003864:	2201      	movs	r2, #1
 8003866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003868:	f7fe feb4 	bl	80025d4 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003870:	f7fe feb0 	bl	80025d4 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e160      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <HAL_RCC_OscConfig+0x26c>)
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800388e:	2001      	movs	r0, #1
 8003890:	f000 faba 	bl	8003e08 <RCC_Delay>
 8003894:	e01c      	b.n	80038d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003896:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <HAL_RCC_OscConfig+0x274>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389c:	f7fe fe9a 	bl	80025d4 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a2:	e00f      	b.n	80038c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a4:	f7fe fe96 	bl	80025d4 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d908      	bls.n	80038c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e146      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
 80038bc:	42420000 	.word	0x42420000
 80038c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c4:	4b92      	ldr	r3, [pc, #584]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e9      	bne.n	80038a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80a6 	beq.w	8003a2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038de:	2300      	movs	r3, #0
 80038e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e2:	4b8b      	ldr	r3, [pc, #556]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10d      	bne.n	800390a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ee:	4b88      	ldr	r3, [pc, #544]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	4a87      	ldr	r2, [pc, #540]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f8:	61d3      	str	r3, [r2, #28]
 80038fa:	4b85      	ldr	r3, [pc, #532]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003906:	2301      	movs	r3, #1
 8003908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390a:	4b82      	ldr	r3, [pc, #520]	; (8003b14 <HAL_RCC_OscConfig+0x4c8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d118      	bne.n	8003948 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003916:	4b7f      	ldr	r3, [pc, #508]	; (8003b14 <HAL_RCC_OscConfig+0x4c8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a7e      	ldr	r2, [pc, #504]	; (8003b14 <HAL_RCC_OscConfig+0x4c8>)
 800391c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003922:	f7fe fe57 	bl	80025d4 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392a:	f7fe fe53 	bl	80025d4 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b64      	cmp	r3, #100	; 0x64
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e103      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393c:	4b75      	ldr	r3, [pc, #468]	; (8003b14 <HAL_RCC_OscConfig+0x4c8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d106      	bne.n	800395e <HAL_RCC_OscConfig+0x312>
 8003950:	4b6f      	ldr	r3, [pc, #444]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	4a6e      	ldr	r2, [pc, #440]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	6213      	str	r3, [r2, #32]
 800395c:	e02d      	b.n	80039ba <HAL_RCC_OscConfig+0x36e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0x334>
 8003966:	4b6a      	ldr	r3, [pc, #424]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	4a69      	ldr	r2, [pc, #420]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	6213      	str	r3, [r2, #32]
 8003972:	4b67      	ldr	r3, [pc, #412]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	4a66      	ldr	r2, [pc, #408]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003978:	f023 0304 	bic.w	r3, r3, #4
 800397c:	6213      	str	r3, [r2, #32]
 800397e:	e01c      	b.n	80039ba <HAL_RCC_OscConfig+0x36e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	2b05      	cmp	r3, #5
 8003986:	d10c      	bne.n	80039a2 <HAL_RCC_OscConfig+0x356>
 8003988:	4b61      	ldr	r3, [pc, #388]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4a60      	ldr	r2, [pc, #384]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 800398e:	f043 0304 	orr.w	r3, r3, #4
 8003992:	6213      	str	r3, [r2, #32]
 8003994:	4b5e      	ldr	r3, [pc, #376]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	4a5d      	ldr	r2, [pc, #372]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6213      	str	r3, [r2, #32]
 80039a0:	e00b      	b.n	80039ba <HAL_RCC_OscConfig+0x36e>
 80039a2:	4b5b      	ldr	r3, [pc, #364]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	4a5a      	ldr	r2, [pc, #360]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	6213      	str	r3, [r2, #32]
 80039ae:	4b58      	ldr	r3, [pc, #352]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	4a57      	ldr	r2, [pc, #348]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	f023 0304 	bic.w	r3, r3, #4
 80039b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d015      	beq.n	80039ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c2:	f7fe fe07 	bl	80025d4 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c8:	e00a      	b.n	80039e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ca:	f7fe fe03 	bl	80025d4 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d8:	4293      	cmp	r3, r2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e0b1      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e0:	4b4b      	ldr	r3, [pc, #300]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0ee      	beq.n	80039ca <HAL_RCC_OscConfig+0x37e>
 80039ec:	e014      	b.n	8003a18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ee:	f7fe fdf1 	bl	80025d4 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fe fded 	bl	80025d4 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e09b      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0c:	4b40      	ldr	r3, [pc, #256]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1ee      	bne.n	80039f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d105      	bne.n	8003a2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1e:	4b3c      	ldr	r3, [pc, #240]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	4a3b      	ldr	r2, [pc, #236]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8087 	beq.w	8003b42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a34:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 030c 	and.w	r3, r3, #12
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d061      	beq.n	8003b04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d146      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a48:	4b33      	ldr	r3, [pc, #204]	; (8003b18 <HAL_RCC_OscConfig+0x4cc>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7fe fdc1 	bl	80025d4 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a56:	f7fe fdbd 	bl	80025d4 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e06d      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a68:	4b29      	ldr	r3, [pc, #164]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f0      	bne.n	8003a56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7c:	d108      	bne.n	8003a90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a7e:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4921      	ldr	r1, [pc, #132]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a90:	4b1f      	ldr	r3, [pc, #124]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a19      	ldr	r1, [r3, #32]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	491b      	ldr	r1, [pc, #108]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa8:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <HAL_RCC_OscConfig+0x4cc>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aae:	f7fe fd91 	bl	80025d4 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab6:	f7fe fd8d 	bl	80025d4 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e03d      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac8:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x46a>
 8003ad4:	e035      	b.n	8003b42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <HAL_RCC_OscConfig+0x4cc>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003adc:	f7fe fd7a 	bl	80025d4 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fe fd76 	bl	80025d4 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e026      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x498>
 8003b02:	e01e      	b.n	8003b42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d107      	bne.n	8003b1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e019      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40007000 	.word	0x40007000
 8003b18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_OscConfig+0x500>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d106      	bne.n	8003b3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d001      	beq.n	8003b42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000

08003b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0d0      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b64:	4b6a      	ldr	r3, [pc, #424]	; (8003d10 <HAL_RCC_ClockConfig+0x1c0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d910      	bls.n	8003b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b67      	ldr	r3, [pc, #412]	; (8003d10 <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 0207 	bic.w	r2, r3, #7
 8003b7a:	4965      	ldr	r1, [pc, #404]	; (8003d10 <HAL_RCC_ClockConfig+0x1c0>)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b63      	ldr	r3, [pc, #396]	; (8003d10 <HAL_RCC_ClockConfig+0x1c0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0b8      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d020      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bac:	4b59      	ldr	r3, [pc, #356]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4a58      	ldr	r2, [pc, #352]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc4:	4b53      	ldr	r3, [pc, #332]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4a52      	ldr	r2, [pc, #328]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd0:	4b50      	ldr	r3, [pc, #320]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	494d      	ldr	r1, [pc, #308]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d040      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d107      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	4b47      	ldr	r3, [pc, #284]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d115      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e07f      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0e:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e073      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1e:	4b3d      	ldr	r3, [pc, #244]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e06b      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c2e:	4b39      	ldr	r3, [pc, #228]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f023 0203 	bic.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4936      	ldr	r1, [pc, #216]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c40:	f7fe fcc8 	bl	80025d4 <HAL_GetTick>
 8003c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c46:	e00a      	b.n	8003c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c48:	f7fe fcc4 	bl	80025d4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e053      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	4b2d      	ldr	r3, [pc, #180]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 020c 	and.w	r2, r3, #12
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d1eb      	bne.n	8003c48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c70:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <HAL_RCC_ClockConfig+0x1c0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d210      	bcs.n	8003ca0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	4b24      	ldr	r3, [pc, #144]	; (8003d10 <HAL_RCC_ClockConfig+0x1c0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 0207 	bic.w	r2, r3, #7
 8003c86:	4922      	ldr	r1, [pc, #136]	; (8003d10 <HAL_RCC_ClockConfig+0x1c0>)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8e:	4b20      	ldr	r3, [pc, #128]	; (8003d10 <HAL_RCC_ClockConfig+0x1c0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e032      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cac:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4916      	ldr	r1, [pc, #88]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cca:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	490e      	ldr	r1, [pc, #56]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cde:	f000 f821 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	490a      	ldr	r1, [pc, #40]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf0:	5ccb      	ldrb	r3, [r1, r3]
 8003cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf6:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <HAL_RCC_ClockConfig+0x1cc>)
 8003cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cfa:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <HAL_RCC_ClockConfig+0x1d0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe fc38 	bl	8002574 <HAL_InitTick>

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40022000 	.word	0x40022000
 8003d14:	40021000 	.word	0x40021000
 8003d18:	08005bf8 	.word	0x08005bf8
 8003d1c:	20000010 	.word	0x20000010
 8003d20:	20000018 	.word	0x20000018

08003d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	2300      	movs	r3, #0
 8003d38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d002      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0x30>
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x36>
 8003d52:	e027      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d54:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8003d56:	613b      	str	r3, [r7, #16]
      break;
 8003d58:	e027      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	0c9b      	lsrs	r3, r3, #18
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d64:	5cd3      	ldrb	r3, [r2, r3]
 8003d66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d010      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	0c5b      	lsrs	r3, r3, #17
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	4a11      	ldr	r2, [pc, #68]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d7e:	5cd3      	ldrb	r3, [r2, r3]
 8003d80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a0d      	ldr	r2, [pc, #52]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8003d86:	fb03 f202 	mul.w	r2, r3, r2
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	e004      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a0c      	ldr	r2, [pc, #48]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	613b      	str	r3, [r7, #16]
      break;
 8003da2:	e002      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8003da6:	613b      	str	r3, [r7, #16]
      break;
 8003da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003daa:	693b      	ldr	r3, [r7, #16]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	007a1200 	.word	0x007a1200
 8003dc0:	08005c10 	.word	0x08005c10
 8003dc4:	08005c20 	.word	0x08005c20
 8003dc8:	003d0900 	.word	0x003d0900

08003dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd0:	4b02      	ldr	r3, [pc, #8]	; (8003ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr
 8003ddc:	20000010 	.word	0x20000010

08003de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003de4:	f7ff fff2 	bl	8003dcc <HAL_RCC_GetHCLKFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4903      	ldr	r1, [pc, #12]	; (8003e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000
 8003e04:	08005c08 	.word	0x08005c08

08003e08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e10:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <RCC_Delay+0x34>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <RCC_Delay+0x38>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	0a5b      	lsrs	r3, r3, #9
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e24:	bf00      	nop
  }
  while (Delay --);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1e5a      	subs	r2, r3, #1
 8003e2a:	60fa      	str	r2, [r7, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f9      	bne.n	8003e24 <RCC_Delay+0x1c>
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	20000010 	.word	0x20000010
 8003e40:	10624dd3 	.word	0x10624dd3

08003e44 <rand>:
 8003e44:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <rand+0x5c>)
 8003e46:	b510      	push	{r4, lr}
 8003e48:	681c      	ldr	r4, [r3, #0]
 8003e4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e4c:	b9b3      	cbnz	r3, 8003e7c <rand+0x38>
 8003e4e:	2018      	movs	r0, #24
 8003e50:	f000 fa2c 	bl	80042ac <malloc>
 8003e54:	4602      	mov	r2, r0
 8003e56:	6320      	str	r0, [r4, #48]	; 0x30
 8003e58:	b920      	cbnz	r0, 8003e64 <rand+0x20>
 8003e5a:	2152      	movs	r1, #82	; 0x52
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <rand+0x60>)
 8003e5e:	4812      	ldr	r0, [pc, #72]	; (8003ea8 <rand+0x64>)
 8003e60:	f000 f9be 	bl	80041e0 <__assert_func>
 8003e64:	4911      	ldr	r1, [pc, #68]	; (8003eac <rand+0x68>)
 8003e66:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <rand+0x6c>)
 8003e68:	e9c0 1300 	strd	r1, r3, [r0]
 8003e6c:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <rand+0x70>)
 8003e6e:	2100      	movs	r1, #0
 8003e70:	6083      	str	r3, [r0, #8]
 8003e72:	230b      	movs	r3, #11
 8003e74:	8183      	strh	r3, [r0, #12]
 8003e76:	2001      	movs	r0, #1
 8003e78:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003e7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003e7e:	480e      	ldr	r0, [pc, #56]	; (8003eb8 <rand+0x74>)
 8003e80:	690b      	ldr	r3, [r1, #16]
 8003e82:	694c      	ldr	r4, [r1, #20]
 8003e84:	4358      	muls	r0, r3
 8003e86:	4a0d      	ldr	r2, [pc, #52]	; (8003ebc <rand+0x78>)
 8003e88:	fb02 0004 	mla	r0, r2, r4, r0
 8003e8c:	fba3 3202 	umull	r3, r2, r3, r2
 8003e90:	3301      	adds	r3, #1
 8003e92:	eb40 0002 	adc.w	r0, r0, r2
 8003e96:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003e9a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003e9e:	bd10      	pop	{r4, pc}
 8003ea0:	20000078 	.word	0x20000078
 8003ea4:	08005c22 	.word	0x08005c22
 8003ea8:	08005c39 	.word	0x08005c39
 8003eac:	abcd330e 	.word	0xabcd330e
 8003eb0:	e66d1234 	.word	0xe66d1234
 8003eb4:	0005deec 	.word	0x0005deec
 8003eb8:	5851f42d 	.word	0x5851f42d
 8003ebc:	4c957f2d 	.word	0x4c957f2d

08003ec0 <std>:
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	b510      	push	{r4, lr}
 8003ec4:	4604      	mov	r4, r0
 8003ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8003eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ece:	6083      	str	r3, [r0, #8]
 8003ed0:	8181      	strh	r1, [r0, #12]
 8003ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8003ed4:	81c2      	strh	r2, [r0, #14]
 8003ed6:	6183      	str	r3, [r0, #24]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	2208      	movs	r2, #8
 8003edc:	305c      	adds	r0, #92	; 0x5c
 8003ede:	f000 f8f4 	bl	80040ca <memset>
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <std+0x58>)
 8003ee4:	6224      	str	r4, [r4, #32]
 8003ee6:	6263      	str	r3, [r4, #36]	; 0x24
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <std+0x5c>)
 8003eea:	62a3      	str	r3, [r4, #40]	; 0x28
 8003eec:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <std+0x60>)
 8003eee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <std+0x64>)
 8003ef2:	6323      	str	r3, [r4, #48]	; 0x30
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <std+0x68>)
 8003ef6:	429c      	cmp	r4, r3
 8003ef8:	d006      	beq.n	8003f08 <std+0x48>
 8003efa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003efe:	4294      	cmp	r4, r2
 8003f00:	d002      	beq.n	8003f08 <std+0x48>
 8003f02:	33d0      	adds	r3, #208	; 0xd0
 8003f04:	429c      	cmp	r4, r3
 8003f06:	d105      	bne.n	8003f14 <std+0x54>
 8003f08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f10:	f000 b954 	b.w	80041bc <__retarget_lock_init_recursive>
 8003f14:	bd10      	pop	{r4, pc}
 8003f16:	bf00      	nop
 8003f18:	08004045 	.word	0x08004045
 8003f1c:	08004067 	.word	0x08004067
 8003f20:	0800409f 	.word	0x0800409f
 8003f24:	080040c3 	.word	0x080040c3
 8003f28:	20002e2c 	.word	0x20002e2c

08003f2c <stdio_exit_handler>:
 8003f2c:	4a02      	ldr	r2, [pc, #8]	; (8003f38 <stdio_exit_handler+0xc>)
 8003f2e:	4903      	ldr	r1, [pc, #12]	; (8003f3c <stdio_exit_handler+0x10>)
 8003f30:	4803      	ldr	r0, [pc, #12]	; (8003f40 <stdio_exit_handler+0x14>)
 8003f32:	f000 b869 	b.w	8004008 <_fwalk_sglue>
 8003f36:	bf00      	nop
 8003f38:	20000020 	.word	0x20000020
 8003f3c:	08004519 	.word	0x08004519
 8003f40:	2000002c 	.word	0x2000002c

08003f44 <cleanup_stdio>:
 8003f44:	6841      	ldr	r1, [r0, #4]
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <cleanup_stdio+0x34>)
 8003f48:	b510      	push	{r4, lr}
 8003f4a:	4299      	cmp	r1, r3
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	d001      	beq.n	8003f54 <cleanup_stdio+0x10>
 8003f50:	f000 fae2 	bl	8004518 <_fflush_r>
 8003f54:	68a1      	ldr	r1, [r4, #8]
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <cleanup_stdio+0x38>)
 8003f58:	4299      	cmp	r1, r3
 8003f5a:	d002      	beq.n	8003f62 <cleanup_stdio+0x1e>
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f000 fadb 	bl	8004518 <_fflush_r>
 8003f62:	68e1      	ldr	r1, [r4, #12]
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <cleanup_stdio+0x3c>)
 8003f66:	4299      	cmp	r1, r3
 8003f68:	d004      	beq.n	8003f74 <cleanup_stdio+0x30>
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f70:	f000 bad2 	b.w	8004518 <_fflush_r>
 8003f74:	bd10      	pop	{r4, pc}
 8003f76:	bf00      	nop
 8003f78:	20002e2c 	.word	0x20002e2c
 8003f7c:	20002e94 	.word	0x20002e94
 8003f80:	20002efc 	.word	0x20002efc

08003f84 <global_stdio_init.part.0>:
 8003f84:	b510      	push	{r4, lr}
 8003f86:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <global_stdio_init.part.0+0x30>)
 8003f88:	4c0b      	ldr	r4, [pc, #44]	; (8003fb8 <global_stdio_init.part.0+0x34>)
 8003f8a:	4a0c      	ldr	r2, [pc, #48]	; (8003fbc <global_stdio_init.part.0+0x38>)
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	2104      	movs	r1, #4
 8003f92:	2200      	movs	r2, #0
 8003f94:	f7ff ff94 	bl	8003ec0 <std>
 8003f98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	2109      	movs	r1, #9
 8003fa0:	f7ff ff8e 	bl	8003ec0 <std>
 8003fa4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003fa8:	2202      	movs	r2, #2
 8003faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fae:	2112      	movs	r1, #18
 8003fb0:	f7ff bf86 	b.w	8003ec0 <std>
 8003fb4:	20002f64 	.word	0x20002f64
 8003fb8:	20002e2c 	.word	0x20002e2c
 8003fbc:	08003f2d 	.word	0x08003f2d

08003fc0 <__sfp_lock_acquire>:
 8003fc0:	4801      	ldr	r0, [pc, #4]	; (8003fc8 <__sfp_lock_acquire+0x8>)
 8003fc2:	f000 b8fc 	b.w	80041be <__retarget_lock_acquire_recursive>
 8003fc6:	bf00      	nop
 8003fc8:	20002f6d 	.word	0x20002f6d

08003fcc <__sfp_lock_release>:
 8003fcc:	4801      	ldr	r0, [pc, #4]	; (8003fd4 <__sfp_lock_release+0x8>)
 8003fce:	f000 b8f7 	b.w	80041c0 <__retarget_lock_release_recursive>
 8003fd2:	bf00      	nop
 8003fd4:	20002f6d 	.word	0x20002f6d

08003fd8 <__sinit>:
 8003fd8:	b510      	push	{r4, lr}
 8003fda:	4604      	mov	r4, r0
 8003fdc:	f7ff fff0 	bl	8003fc0 <__sfp_lock_acquire>
 8003fe0:	6a23      	ldr	r3, [r4, #32]
 8003fe2:	b11b      	cbz	r3, 8003fec <__sinit+0x14>
 8003fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fe8:	f7ff bff0 	b.w	8003fcc <__sfp_lock_release>
 8003fec:	4b04      	ldr	r3, [pc, #16]	; (8004000 <__sinit+0x28>)
 8003fee:	6223      	str	r3, [r4, #32]
 8003ff0:	4b04      	ldr	r3, [pc, #16]	; (8004004 <__sinit+0x2c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f5      	bne.n	8003fe4 <__sinit+0xc>
 8003ff8:	f7ff ffc4 	bl	8003f84 <global_stdio_init.part.0>
 8003ffc:	e7f2      	b.n	8003fe4 <__sinit+0xc>
 8003ffe:	bf00      	nop
 8004000:	08003f45 	.word	0x08003f45
 8004004:	20002f64 	.word	0x20002f64

08004008 <_fwalk_sglue>:
 8004008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800400c:	4607      	mov	r7, r0
 800400e:	4688      	mov	r8, r1
 8004010:	4614      	mov	r4, r2
 8004012:	2600      	movs	r6, #0
 8004014:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004018:	f1b9 0901 	subs.w	r9, r9, #1
 800401c:	d505      	bpl.n	800402a <_fwalk_sglue+0x22>
 800401e:	6824      	ldr	r4, [r4, #0]
 8004020:	2c00      	cmp	r4, #0
 8004022:	d1f7      	bne.n	8004014 <_fwalk_sglue+0xc>
 8004024:	4630      	mov	r0, r6
 8004026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800402a:	89ab      	ldrh	r3, [r5, #12]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d907      	bls.n	8004040 <_fwalk_sglue+0x38>
 8004030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004034:	3301      	adds	r3, #1
 8004036:	d003      	beq.n	8004040 <_fwalk_sglue+0x38>
 8004038:	4629      	mov	r1, r5
 800403a:	4638      	mov	r0, r7
 800403c:	47c0      	blx	r8
 800403e:	4306      	orrs	r6, r0
 8004040:	3568      	adds	r5, #104	; 0x68
 8004042:	e7e9      	b.n	8004018 <_fwalk_sglue+0x10>

08004044 <__sread>:
 8004044:	b510      	push	{r4, lr}
 8004046:	460c      	mov	r4, r1
 8004048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800404c:	f000 f868 	bl	8004120 <_read_r>
 8004050:	2800      	cmp	r0, #0
 8004052:	bfab      	itete	ge
 8004054:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004056:	89a3      	ldrhlt	r3, [r4, #12]
 8004058:	181b      	addge	r3, r3, r0
 800405a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800405e:	bfac      	ite	ge
 8004060:	6563      	strge	r3, [r4, #84]	; 0x54
 8004062:	81a3      	strhlt	r3, [r4, #12]
 8004064:	bd10      	pop	{r4, pc}

08004066 <__swrite>:
 8004066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800406a:	461f      	mov	r7, r3
 800406c:	898b      	ldrh	r3, [r1, #12]
 800406e:	4605      	mov	r5, r0
 8004070:	05db      	lsls	r3, r3, #23
 8004072:	460c      	mov	r4, r1
 8004074:	4616      	mov	r6, r2
 8004076:	d505      	bpl.n	8004084 <__swrite+0x1e>
 8004078:	2302      	movs	r3, #2
 800407a:	2200      	movs	r2, #0
 800407c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004080:	f000 f83c 	bl	80040fc <_lseek_r>
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	4632      	mov	r2, r6
 8004088:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800408c:	81a3      	strh	r3, [r4, #12]
 800408e:	4628      	mov	r0, r5
 8004090:	463b      	mov	r3, r7
 8004092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800409a:	f000 b853 	b.w	8004144 <_write_r>

0800409e <__sseek>:
 800409e:	b510      	push	{r4, lr}
 80040a0:	460c      	mov	r4, r1
 80040a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a6:	f000 f829 	bl	80040fc <_lseek_r>
 80040aa:	1c43      	adds	r3, r0, #1
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	bf15      	itete	ne
 80040b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80040b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040ba:	81a3      	strheq	r3, [r4, #12]
 80040bc:	bf18      	it	ne
 80040be:	81a3      	strhne	r3, [r4, #12]
 80040c0:	bd10      	pop	{r4, pc}

080040c2 <__sclose>:
 80040c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040c6:	f000 b809 	b.w	80040dc <_close_r>

080040ca <memset>:
 80040ca:	4603      	mov	r3, r0
 80040cc:	4402      	add	r2, r0
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d100      	bne.n	80040d4 <memset+0xa>
 80040d2:	4770      	bx	lr
 80040d4:	f803 1b01 	strb.w	r1, [r3], #1
 80040d8:	e7f9      	b.n	80040ce <memset+0x4>
	...

080040dc <_close_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	2300      	movs	r3, #0
 80040e0:	4d05      	ldr	r5, [pc, #20]	; (80040f8 <_close_r+0x1c>)
 80040e2:	4604      	mov	r4, r0
 80040e4:	4608      	mov	r0, r1
 80040e6:	602b      	str	r3, [r5, #0]
 80040e8:	f7fd fad2 	bl	8001690 <_close>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_close_r+0x1a>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_close_r+0x1a>
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	20002f68 	.word	0x20002f68

080040fc <_lseek_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4604      	mov	r4, r0
 8004100:	4608      	mov	r0, r1
 8004102:	4611      	mov	r1, r2
 8004104:	2200      	movs	r2, #0
 8004106:	4d05      	ldr	r5, [pc, #20]	; (800411c <_lseek_r+0x20>)
 8004108:	602a      	str	r2, [r5, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	f7fd fae4 	bl	80016d8 <_lseek>
 8004110:	1c43      	adds	r3, r0, #1
 8004112:	d102      	bne.n	800411a <_lseek_r+0x1e>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	b103      	cbz	r3, 800411a <_lseek_r+0x1e>
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	bd38      	pop	{r3, r4, r5, pc}
 800411c:	20002f68 	.word	0x20002f68

08004120 <_read_r>:
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	4604      	mov	r4, r0
 8004124:	4608      	mov	r0, r1
 8004126:	4611      	mov	r1, r2
 8004128:	2200      	movs	r2, #0
 800412a:	4d05      	ldr	r5, [pc, #20]	; (8004140 <_read_r+0x20>)
 800412c:	602a      	str	r2, [r5, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	f7fd fa75 	bl	800161e <_read>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d102      	bne.n	800413e <_read_r+0x1e>
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	b103      	cbz	r3, 800413e <_read_r+0x1e>
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	bd38      	pop	{r3, r4, r5, pc}
 8004140:	20002f68 	.word	0x20002f68

08004144 <_write_r>:
 8004144:	b538      	push	{r3, r4, r5, lr}
 8004146:	4604      	mov	r4, r0
 8004148:	4608      	mov	r0, r1
 800414a:	4611      	mov	r1, r2
 800414c:	2200      	movs	r2, #0
 800414e:	4d05      	ldr	r5, [pc, #20]	; (8004164 <_write_r+0x20>)
 8004150:	602a      	str	r2, [r5, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	f7fd fa80 	bl	8001658 <_write>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d102      	bne.n	8004162 <_write_r+0x1e>
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	b103      	cbz	r3, 8004162 <_write_r+0x1e>
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	bd38      	pop	{r3, r4, r5, pc}
 8004164:	20002f68 	.word	0x20002f68

08004168 <__errno>:
 8004168:	4b01      	ldr	r3, [pc, #4]	; (8004170 <__errno+0x8>)
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000078 	.word	0x20000078

08004174 <__libc_init_array>:
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	2600      	movs	r6, #0
 8004178:	4d0c      	ldr	r5, [pc, #48]	; (80041ac <__libc_init_array+0x38>)
 800417a:	4c0d      	ldr	r4, [pc, #52]	; (80041b0 <__libc_init_array+0x3c>)
 800417c:	1b64      	subs	r4, r4, r5
 800417e:	10a4      	asrs	r4, r4, #2
 8004180:	42a6      	cmp	r6, r4
 8004182:	d109      	bne.n	8004198 <__libc_init_array+0x24>
 8004184:	f000 fe5a 	bl	8004e3c <_init>
 8004188:	2600      	movs	r6, #0
 800418a:	4d0a      	ldr	r5, [pc, #40]	; (80041b4 <__libc_init_array+0x40>)
 800418c:	4c0a      	ldr	r4, [pc, #40]	; (80041b8 <__libc_init_array+0x44>)
 800418e:	1b64      	subs	r4, r4, r5
 8004190:	10a4      	asrs	r4, r4, #2
 8004192:	42a6      	cmp	r6, r4
 8004194:	d105      	bne.n	80041a2 <__libc_init_array+0x2e>
 8004196:	bd70      	pop	{r4, r5, r6, pc}
 8004198:	f855 3b04 	ldr.w	r3, [r5], #4
 800419c:	4798      	blx	r3
 800419e:	3601      	adds	r6, #1
 80041a0:	e7ee      	b.n	8004180 <__libc_init_array+0xc>
 80041a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a6:	4798      	blx	r3
 80041a8:	3601      	adds	r6, #1
 80041aa:	e7f2      	b.n	8004192 <__libc_init_array+0x1e>
 80041ac:	08005d00 	.word	0x08005d00
 80041b0:	08005d00 	.word	0x08005d00
 80041b4:	08005d00 	.word	0x08005d00
 80041b8:	08005d04 	.word	0x08005d04

080041bc <__retarget_lock_init_recursive>:
 80041bc:	4770      	bx	lr

080041be <__retarget_lock_acquire_recursive>:
 80041be:	4770      	bx	lr

080041c0 <__retarget_lock_release_recursive>:
 80041c0:	4770      	bx	lr

080041c2 <memcpy>:
 80041c2:	440a      	add	r2, r1
 80041c4:	4291      	cmp	r1, r2
 80041c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80041ca:	d100      	bne.n	80041ce <memcpy+0xc>
 80041cc:	4770      	bx	lr
 80041ce:	b510      	push	{r4, lr}
 80041d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041d4:	4291      	cmp	r1, r2
 80041d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041da:	d1f9      	bne.n	80041d0 <memcpy+0xe>
 80041dc:	bd10      	pop	{r4, pc}
	...

080041e0 <__assert_func>:
 80041e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041e2:	4614      	mov	r4, r2
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b09      	ldr	r3, [pc, #36]	; (800420c <__assert_func+0x2c>)
 80041e8:	4605      	mov	r5, r0
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68d8      	ldr	r0, [r3, #12]
 80041ee:	b14c      	cbz	r4, 8004204 <__assert_func+0x24>
 80041f0:	4b07      	ldr	r3, [pc, #28]	; (8004210 <__assert_func+0x30>)
 80041f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80041f6:	9100      	str	r1, [sp, #0]
 80041f8:	462b      	mov	r3, r5
 80041fa:	4906      	ldr	r1, [pc, #24]	; (8004214 <__assert_func+0x34>)
 80041fc:	f000 f9b4 	bl	8004568 <fiprintf>
 8004200:	f000 f9d4 	bl	80045ac <abort>
 8004204:	4b04      	ldr	r3, [pc, #16]	; (8004218 <__assert_func+0x38>)
 8004206:	461c      	mov	r4, r3
 8004208:	e7f3      	b.n	80041f2 <__assert_func+0x12>
 800420a:	bf00      	nop
 800420c:	20000078 	.word	0x20000078
 8004210:	08005c91 	.word	0x08005c91
 8004214:	08005c9e 	.word	0x08005c9e
 8004218:	08005ccc 	.word	0x08005ccc

0800421c <_free_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	4605      	mov	r5, r0
 8004220:	2900      	cmp	r1, #0
 8004222:	d040      	beq.n	80042a6 <_free_r+0x8a>
 8004224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004228:	1f0c      	subs	r4, r1, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	bfb8      	it	lt
 800422e:	18e4      	addlt	r4, r4, r3
 8004230:	f000 f8e4 	bl	80043fc <__malloc_lock>
 8004234:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <_free_r+0x8c>)
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	b933      	cbnz	r3, 8004248 <_free_r+0x2c>
 800423a:	6063      	str	r3, [r4, #4]
 800423c:	6014      	str	r4, [r2, #0]
 800423e:	4628      	mov	r0, r5
 8004240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004244:	f000 b8e0 	b.w	8004408 <__malloc_unlock>
 8004248:	42a3      	cmp	r3, r4
 800424a:	d908      	bls.n	800425e <_free_r+0x42>
 800424c:	6820      	ldr	r0, [r4, #0]
 800424e:	1821      	adds	r1, r4, r0
 8004250:	428b      	cmp	r3, r1
 8004252:	bf01      	itttt	eq
 8004254:	6819      	ldreq	r1, [r3, #0]
 8004256:	685b      	ldreq	r3, [r3, #4]
 8004258:	1809      	addeq	r1, r1, r0
 800425a:	6021      	streq	r1, [r4, #0]
 800425c:	e7ed      	b.n	800423a <_free_r+0x1e>
 800425e:	461a      	mov	r2, r3
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	b10b      	cbz	r3, 8004268 <_free_r+0x4c>
 8004264:	42a3      	cmp	r3, r4
 8004266:	d9fa      	bls.n	800425e <_free_r+0x42>
 8004268:	6811      	ldr	r1, [r2, #0]
 800426a:	1850      	adds	r0, r2, r1
 800426c:	42a0      	cmp	r0, r4
 800426e:	d10b      	bne.n	8004288 <_free_r+0x6c>
 8004270:	6820      	ldr	r0, [r4, #0]
 8004272:	4401      	add	r1, r0
 8004274:	1850      	adds	r0, r2, r1
 8004276:	4283      	cmp	r3, r0
 8004278:	6011      	str	r1, [r2, #0]
 800427a:	d1e0      	bne.n	800423e <_free_r+0x22>
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	4408      	add	r0, r1
 8004282:	6010      	str	r0, [r2, #0]
 8004284:	6053      	str	r3, [r2, #4]
 8004286:	e7da      	b.n	800423e <_free_r+0x22>
 8004288:	d902      	bls.n	8004290 <_free_r+0x74>
 800428a:	230c      	movs	r3, #12
 800428c:	602b      	str	r3, [r5, #0]
 800428e:	e7d6      	b.n	800423e <_free_r+0x22>
 8004290:	6820      	ldr	r0, [r4, #0]
 8004292:	1821      	adds	r1, r4, r0
 8004294:	428b      	cmp	r3, r1
 8004296:	bf01      	itttt	eq
 8004298:	6819      	ldreq	r1, [r3, #0]
 800429a:	685b      	ldreq	r3, [r3, #4]
 800429c:	1809      	addeq	r1, r1, r0
 800429e:	6021      	streq	r1, [r4, #0]
 80042a0:	6063      	str	r3, [r4, #4]
 80042a2:	6054      	str	r4, [r2, #4]
 80042a4:	e7cb      	b.n	800423e <_free_r+0x22>
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	20002f70 	.word	0x20002f70

080042ac <malloc>:
 80042ac:	4b02      	ldr	r3, [pc, #8]	; (80042b8 <malloc+0xc>)
 80042ae:	4601      	mov	r1, r0
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	f000 b823 	b.w	80042fc <_malloc_r>
 80042b6:	bf00      	nop
 80042b8:	20000078 	.word	0x20000078

080042bc <sbrk_aligned>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	4e0e      	ldr	r6, [pc, #56]	; (80042f8 <sbrk_aligned+0x3c>)
 80042c0:	460c      	mov	r4, r1
 80042c2:	6831      	ldr	r1, [r6, #0]
 80042c4:	4605      	mov	r5, r0
 80042c6:	b911      	cbnz	r1, 80042ce <sbrk_aligned+0x12>
 80042c8:	f000 f960 	bl	800458c <_sbrk_r>
 80042cc:	6030      	str	r0, [r6, #0]
 80042ce:	4621      	mov	r1, r4
 80042d0:	4628      	mov	r0, r5
 80042d2:	f000 f95b 	bl	800458c <_sbrk_r>
 80042d6:	1c43      	adds	r3, r0, #1
 80042d8:	d00a      	beq.n	80042f0 <sbrk_aligned+0x34>
 80042da:	1cc4      	adds	r4, r0, #3
 80042dc:	f024 0403 	bic.w	r4, r4, #3
 80042e0:	42a0      	cmp	r0, r4
 80042e2:	d007      	beq.n	80042f4 <sbrk_aligned+0x38>
 80042e4:	1a21      	subs	r1, r4, r0
 80042e6:	4628      	mov	r0, r5
 80042e8:	f000 f950 	bl	800458c <_sbrk_r>
 80042ec:	3001      	adds	r0, #1
 80042ee:	d101      	bne.n	80042f4 <sbrk_aligned+0x38>
 80042f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80042f4:	4620      	mov	r0, r4
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
 80042f8:	20002f74 	.word	0x20002f74

080042fc <_malloc_r>:
 80042fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004300:	1ccd      	adds	r5, r1, #3
 8004302:	f025 0503 	bic.w	r5, r5, #3
 8004306:	3508      	adds	r5, #8
 8004308:	2d0c      	cmp	r5, #12
 800430a:	bf38      	it	cc
 800430c:	250c      	movcc	r5, #12
 800430e:	2d00      	cmp	r5, #0
 8004310:	4607      	mov	r7, r0
 8004312:	db01      	blt.n	8004318 <_malloc_r+0x1c>
 8004314:	42a9      	cmp	r1, r5
 8004316:	d905      	bls.n	8004324 <_malloc_r+0x28>
 8004318:	230c      	movs	r3, #12
 800431a:	2600      	movs	r6, #0
 800431c:	603b      	str	r3, [r7, #0]
 800431e:	4630      	mov	r0, r6
 8004320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004324:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043f8 <_malloc_r+0xfc>
 8004328:	f000 f868 	bl	80043fc <__malloc_lock>
 800432c:	f8d8 3000 	ldr.w	r3, [r8]
 8004330:	461c      	mov	r4, r3
 8004332:	bb5c      	cbnz	r4, 800438c <_malloc_r+0x90>
 8004334:	4629      	mov	r1, r5
 8004336:	4638      	mov	r0, r7
 8004338:	f7ff ffc0 	bl	80042bc <sbrk_aligned>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	4604      	mov	r4, r0
 8004340:	d155      	bne.n	80043ee <_malloc_r+0xf2>
 8004342:	f8d8 4000 	ldr.w	r4, [r8]
 8004346:	4626      	mov	r6, r4
 8004348:	2e00      	cmp	r6, #0
 800434a:	d145      	bne.n	80043d8 <_malloc_r+0xdc>
 800434c:	2c00      	cmp	r4, #0
 800434e:	d048      	beq.n	80043e2 <_malloc_r+0xe6>
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	4631      	mov	r1, r6
 8004354:	4638      	mov	r0, r7
 8004356:	eb04 0903 	add.w	r9, r4, r3
 800435a:	f000 f917 	bl	800458c <_sbrk_r>
 800435e:	4581      	cmp	r9, r0
 8004360:	d13f      	bne.n	80043e2 <_malloc_r+0xe6>
 8004362:	6821      	ldr	r1, [r4, #0]
 8004364:	4638      	mov	r0, r7
 8004366:	1a6d      	subs	r5, r5, r1
 8004368:	4629      	mov	r1, r5
 800436a:	f7ff ffa7 	bl	80042bc <sbrk_aligned>
 800436e:	3001      	adds	r0, #1
 8004370:	d037      	beq.n	80043e2 <_malloc_r+0xe6>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	442b      	add	r3, r5
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	f8d8 3000 	ldr.w	r3, [r8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d038      	beq.n	80043f2 <_malloc_r+0xf6>
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	42a2      	cmp	r2, r4
 8004384:	d12b      	bne.n	80043de <_malloc_r+0xe2>
 8004386:	2200      	movs	r2, #0
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	e00f      	b.n	80043ac <_malloc_r+0xb0>
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	1b52      	subs	r2, r2, r5
 8004390:	d41f      	bmi.n	80043d2 <_malloc_r+0xd6>
 8004392:	2a0b      	cmp	r2, #11
 8004394:	d917      	bls.n	80043c6 <_malloc_r+0xca>
 8004396:	1961      	adds	r1, r4, r5
 8004398:	42a3      	cmp	r3, r4
 800439a:	6025      	str	r5, [r4, #0]
 800439c:	bf18      	it	ne
 800439e:	6059      	strne	r1, [r3, #4]
 80043a0:	6863      	ldr	r3, [r4, #4]
 80043a2:	bf08      	it	eq
 80043a4:	f8c8 1000 	streq.w	r1, [r8]
 80043a8:	5162      	str	r2, [r4, r5]
 80043aa:	604b      	str	r3, [r1, #4]
 80043ac:	4638      	mov	r0, r7
 80043ae:	f104 060b 	add.w	r6, r4, #11
 80043b2:	f000 f829 	bl	8004408 <__malloc_unlock>
 80043b6:	f026 0607 	bic.w	r6, r6, #7
 80043ba:	1d23      	adds	r3, r4, #4
 80043bc:	1af2      	subs	r2, r6, r3
 80043be:	d0ae      	beq.n	800431e <_malloc_r+0x22>
 80043c0:	1b9b      	subs	r3, r3, r6
 80043c2:	50a3      	str	r3, [r4, r2]
 80043c4:	e7ab      	b.n	800431e <_malloc_r+0x22>
 80043c6:	42a3      	cmp	r3, r4
 80043c8:	6862      	ldr	r2, [r4, #4]
 80043ca:	d1dd      	bne.n	8004388 <_malloc_r+0x8c>
 80043cc:	f8c8 2000 	str.w	r2, [r8]
 80043d0:	e7ec      	b.n	80043ac <_malloc_r+0xb0>
 80043d2:	4623      	mov	r3, r4
 80043d4:	6864      	ldr	r4, [r4, #4]
 80043d6:	e7ac      	b.n	8004332 <_malloc_r+0x36>
 80043d8:	4634      	mov	r4, r6
 80043da:	6876      	ldr	r6, [r6, #4]
 80043dc:	e7b4      	b.n	8004348 <_malloc_r+0x4c>
 80043de:	4613      	mov	r3, r2
 80043e0:	e7cc      	b.n	800437c <_malloc_r+0x80>
 80043e2:	230c      	movs	r3, #12
 80043e4:	4638      	mov	r0, r7
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	f000 f80e 	bl	8004408 <__malloc_unlock>
 80043ec:	e797      	b.n	800431e <_malloc_r+0x22>
 80043ee:	6025      	str	r5, [r4, #0]
 80043f0:	e7dc      	b.n	80043ac <_malloc_r+0xb0>
 80043f2:	605b      	str	r3, [r3, #4]
 80043f4:	deff      	udf	#255	; 0xff
 80043f6:	bf00      	nop
 80043f8:	20002f70 	.word	0x20002f70

080043fc <__malloc_lock>:
 80043fc:	4801      	ldr	r0, [pc, #4]	; (8004404 <__malloc_lock+0x8>)
 80043fe:	f7ff bede 	b.w	80041be <__retarget_lock_acquire_recursive>
 8004402:	bf00      	nop
 8004404:	20002f6c 	.word	0x20002f6c

08004408 <__malloc_unlock>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__malloc_unlock+0x8>)
 800440a:	f7ff bed9 	b.w	80041c0 <__retarget_lock_release_recursive>
 800440e:	bf00      	nop
 8004410:	20002f6c 	.word	0x20002f6c

08004414 <__sflush_r>:
 8004414:	898a      	ldrh	r2, [r1, #12]
 8004416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004418:	4605      	mov	r5, r0
 800441a:	0710      	lsls	r0, r2, #28
 800441c:	460c      	mov	r4, r1
 800441e:	d457      	bmi.n	80044d0 <__sflush_r+0xbc>
 8004420:	684b      	ldr	r3, [r1, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	dc04      	bgt.n	8004430 <__sflush_r+0x1c>
 8004426:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	dc01      	bgt.n	8004430 <__sflush_r+0x1c>
 800442c:	2000      	movs	r0, #0
 800442e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004432:	2e00      	cmp	r6, #0
 8004434:	d0fa      	beq.n	800442c <__sflush_r+0x18>
 8004436:	2300      	movs	r3, #0
 8004438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800443c:	682f      	ldr	r7, [r5, #0]
 800443e:	6a21      	ldr	r1, [r4, #32]
 8004440:	602b      	str	r3, [r5, #0]
 8004442:	d032      	beq.n	80044aa <__sflush_r+0x96>
 8004444:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	075a      	lsls	r2, r3, #29
 800444a:	d505      	bpl.n	8004458 <__sflush_r+0x44>
 800444c:	6863      	ldr	r3, [r4, #4]
 800444e:	1ac0      	subs	r0, r0, r3
 8004450:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004452:	b10b      	cbz	r3, 8004458 <__sflush_r+0x44>
 8004454:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004456:	1ac0      	subs	r0, r0, r3
 8004458:	2300      	movs	r3, #0
 800445a:	4602      	mov	r2, r0
 800445c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800445e:	4628      	mov	r0, r5
 8004460:	6a21      	ldr	r1, [r4, #32]
 8004462:	47b0      	blx	r6
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	d106      	bne.n	8004478 <__sflush_r+0x64>
 800446a:	6829      	ldr	r1, [r5, #0]
 800446c:	291d      	cmp	r1, #29
 800446e:	d82b      	bhi.n	80044c8 <__sflush_r+0xb4>
 8004470:	4a28      	ldr	r2, [pc, #160]	; (8004514 <__sflush_r+0x100>)
 8004472:	410a      	asrs	r2, r1
 8004474:	07d6      	lsls	r6, r2, #31
 8004476:	d427      	bmi.n	80044c8 <__sflush_r+0xb4>
 8004478:	2200      	movs	r2, #0
 800447a:	6062      	str	r2, [r4, #4]
 800447c:	6922      	ldr	r2, [r4, #16]
 800447e:	04d9      	lsls	r1, r3, #19
 8004480:	6022      	str	r2, [r4, #0]
 8004482:	d504      	bpl.n	800448e <__sflush_r+0x7a>
 8004484:	1c42      	adds	r2, r0, #1
 8004486:	d101      	bne.n	800448c <__sflush_r+0x78>
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	b903      	cbnz	r3, 800448e <__sflush_r+0x7a>
 800448c:	6560      	str	r0, [r4, #84]	; 0x54
 800448e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004490:	602f      	str	r7, [r5, #0]
 8004492:	2900      	cmp	r1, #0
 8004494:	d0ca      	beq.n	800442c <__sflush_r+0x18>
 8004496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800449a:	4299      	cmp	r1, r3
 800449c:	d002      	beq.n	80044a4 <__sflush_r+0x90>
 800449e:	4628      	mov	r0, r5
 80044a0:	f7ff febc 	bl	800421c <_free_r>
 80044a4:	2000      	movs	r0, #0
 80044a6:	6360      	str	r0, [r4, #52]	; 0x34
 80044a8:	e7c1      	b.n	800442e <__sflush_r+0x1a>
 80044aa:	2301      	movs	r3, #1
 80044ac:	4628      	mov	r0, r5
 80044ae:	47b0      	blx	r6
 80044b0:	1c41      	adds	r1, r0, #1
 80044b2:	d1c8      	bne.n	8004446 <__sflush_r+0x32>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0c5      	beq.n	8004446 <__sflush_r+0x32>
 80044ba:	2b1d      	cmp	r3, #29
 80044bc:	d001      	beq.n	80044c2 <__sflush_r+0xae>
 80044be:	2b16      	cmp	r3, #22
 80044c0:	d101      	bne.n	80044c6 <__sflush_r+0xb2>
 80044c2:	602f      	str	r7, [r5, #0]
 80044c4:	e7b2      	b.n	800442c <__sflush_r+0x18>
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044cc:	81a3      	strh	r3, [r4, #12]
 80044ce:	e7ae      	b.n	800442e <__sflush_r+0x1a>
 80044d0:	690f      	ldr	r7, [r1, #16]
 80044d2:	2f00      	cmp	r7, #0
 80044d4:	d0aa      	beq.n	800442c <__sflush_r+0x18>
 80044d6:	0793      	lsls	r3, r2, #30
 80044d8:	bf18      	it	ne
 80044da:	2300      	movne	r3, #0
 80044dc:	680e      	ldr	r6, [r1, #0]
 80044de:	bf08      	it	eq
 80044e0:	694b      	ldreq	r3, [r1, #20]
 80044e2:	1bf6      	subs	r6, r6, r7
 80044e4:	600f      	str	r7, [r1, #0]
 80044e6:	608b      	str	r3, [r1, #8]
 80044e8:	2e00      	cmp	r6, #0
 80044ea:	dd9f      	ble.n	800442c <__sflush_r+0x18>
 80044ec:	4633      	mov	r3, r6
 80044ee:	463a      	mov	r2, r7
 80044f0:	4628      	mov	r0, r5
 80044f2:	6a21      	ldr	r1, [r4, #32]
 80044f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80044f8:	47e0      	blx	ip
 80044fa:	2800      	cmp	r0, #0
 80044fc:	dc06      	bgt.n	800450c <__sflush_r+0xf8>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004508:	81a3      	strh	r3, [r4, #12]
 800450a:	e790      	b.n	800442e <__sflush_r+0x1a>
 800450c:	4407      	add	r7, r0
 800450e:	1a36      	subs	r6, r6, r0
 8004510:	e7ea      	b.n	80044e8 <__sflush_r+0xd4>
 8004512:	bf00      	nop
 8004514:	dfbffffe 	.word	0xdfbffffe

08004518 <_fflush_r>:
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	690b      	ldr	r3, [r1, #16]
 800451c:	4605      	mov	r5, r0
 800451e:	460c      	mov	r4, r1
 8004520:	b913      	cbnz	r3, 8004528 <_fflush_r+0x10>
 8004522:	2500      	movs	r5, #0
 8004524:	4628      	mov	r0, r5
 8004526:	bd38      	pop	{r3, r4, r5, pc}
 8004528:	b118      	cbz	r0, 8004532 <_fflush_r+0x1a>
 800452a:	6a03      	ldr	r3, [r0, #32]
 800452c:	b90b      	cbnz	r3, 8004532 <_fflush_r+0x1a>
 800452e:	f7ff fd53 	bl	8003fd8 <__sinit>
 8004532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f3      	beq.n	8004522 <_fflush_r+0xa>
 800453a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800453c:	07d0      	lsls	r0, r2, #31
 800453e:	d404      	bmi.n	800454a <_fflush_r+0x32>
 8004540:	0599      	lsls	r1, r3, #22
 8004542:	d402      	bmi.n	800454a <_fflush_r+0x32>
 8004544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004546:	f7ff fe3a 	bl	80041be <__retarget_lock_acquire_recursive>
 800454a:	4628      	mov	r0, r5
 800454c:	4621      	mov	r1, r4
 800454e:	f7ff ff61 	bl	8004414 <__sflush_r>
 8004552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004554:	4605      	mov	r5, r0
 8004556:	07da      	lsls	r2, r3, #31
 8004558:	d4e4      	bmi.n	8004524 <_fflush_r+0xc>
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	059b      	lsls	r3, r3, #22
 800455e:	d4e1      	bmi.n	8004524 <_fflush_r+0xc>
 8004560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004562:	f7ff fe2d 	bl	80041c0 <__retarget_lock_release_recursive>
 8004566:	e7dd      	b.n	8004524 <_fflush_r+0xc>

08004568 <fiprintf>:
 8004568:	b40e      	push	{r1, r2, r3}
 800456a:	b503      	push	{r0, r1, lr}
 800456c:	4601      	mov	r1, r0
 800456e:	ab03      	add	r3, sp, #12
 8004570:	4805      	ldr	r0, [pc, #20]	; (8004588 <fiprintf+0x20>)
 8004572:	f853 2b04 	ldr.w	r2, [r3], #4
 8004576:	6800      	ldr	r0, [r0, #0]
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	f000 f845 	bl	8004608 <_vfiprintf_r>
 800457e:	b002      	add	sp, #8
 8004580:	f85d eb04 	ldr.w	lr, [sp], #4
 8004584:	b003      	add	sp, #12
 8004586:	4770      	bx	lr
 8004588:	20000078 	.word	0x20000078

0800458c <_sbrk_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	2300      	movs	r3, #0
 8004590:	4d05      	ldr	r5, [pc, #20]	; (80045a8 <_sbrk_r+0x1c>)
 8004592:	4604      	mov	r4, r0
 8004594:	4608      	mov	r0, r1
 8004596:	602b      	str	r3, [r5, #0]
 8004598:	f7fd f8aa 	bl	80016f0 <_sbrk>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_sbrk_r+0x1a>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_sbrk_r+0x1a>
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	20002f68 	.word	0x20002f68

080045ac <abort>:
 80045ac:	2006      	movs	r0, #6
 80045ae:	b508      	push	{r3, lr}
 80045b0:	f000 fb96 	bl	8004ce0 <raise>
 80045b4:	2001      	movs	r0, #1
 80045b6:	f7fd f828 	bl	800160a <_exit>

080045ba <__sfputc_r>:
 80045ba:	6893      	ldr	r3, [r2, #8]
 80045bc:	b410      	push	{r4}
 80045be:	3b01      	subs	r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	6093      	str	r3, [r2, #8]
 80045c4:	da07      	bge.n	80045d6 <__sfputc_r+0x1c>
 80045c6:	6994      	ldr	r4, [r2, #24]
 80045c8:	42a3      	cmp	r3, r4
 80045ca:	db01      	blt.n	80045d0 <__sfputc_r+0x16>
 80045cc:	290a      	cmp	r1, #10
 80045ce:	d102      	bne.n	80045d6 <__sfputc_r+0x1c>
 80045d0:	bc10      	pop	{r4}
 80045d2:	f000 bac7 	b.w	8004b64 <__swbuf_r>
 80045d6:	6813      	ldr	r3, [r2, #0]
 80045d8:	1c58      	adds	r0, r3, #1
 80045da:	6010      	str	r0, [r2, #0]
 80045dc:	7019      	strb	r1, [r3, #0]
 80045de:	4608      	mov	r0, r1
 80045e0:	bc10      	pop	{r4}
 80045e2:	4770      	bx	lr

080045e4 <__sfputs_r>:
 80045e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e6:	4606      	mov	r6, r0
 80045e8:	460f      	mov	r7, r1
 80045ea:	4614      	mov	r4, r2
 80045ec:	18d5      	adds	r5, r2, r3
 80045ee:	42ac      	cmp	r4, r5
 80045f0:	d101      	bne.n	80045f6 <__sfputs_r+0x12>
 80045f2:	2000      	movs	r0, #0
 80045f4:	e007      	b.n	8004606 <__sfputs_r+0x22>
 80045f6:	463a      	mov	r2, r7
 80045f8:	4630      	mov	r0, r6
 80045fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045fe:	f7ff ffdc 	bl	80045ba <__sfputc_r>
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	d1f3      	bne.n	80045ee <__sfputs_r+0xa>
 8004606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004608 <_vfiprintf_r>:
 8004608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800460c:	460d      	mov	r5, r1
 800460e:	4614      	mov	r4, r2
 8004610:	4698      	mov	r8, r3
 8004612:	4606      	mov	r6, r0
 8004614:	b09d      	sub	sp, #116	; 0x74
 8004616:	b118      	cbz	r0, 8004620 <_vfiprintf_r+0x18>
 8004618:	6a03      	ldr	r3, [r0, #32]
 800461a:	b90b      	cbnz	r3, 8004620 <_vfiprintf_r+0x18>
 800461c:	f7ff fcdc 	bl	8003fd8 <__sinit>
 8004620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004622:	07d9      	lsls	r1, r3, #31
 8004624:	d405      	bmi.n	8004632 <_vfiprintf_r+0x2a>
 8004626:	89ab      	ldrh	r3, [r5, #12]
 8004628:	059a      	lsls	r2, r3, #22
 800462a:	d402      	bmi.n	8004632 <_vfiprintf_r+0x2a>
 800462c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800462e:	f7ff fdc6 	bl	80041be <__retarget_lock_acquire_recursive>
 8004632:	89ab      	ldrh	r3, [r5, #12]
 8004634:	071b      	lsls	r3, r3, #28
 8004636:	d501      	bpl.n	800463c <_vfiprintf_r+0x34>
 8004638:	692b      	ldr	r3, [r5, #16]
 800463a:	b99b      	cbnz	r3, 8004664 <_vfiprintf_r+0x5c>
 800463c:	4629      	mov	r1, r5
 800463e:	4630      	mov	r0, r6
 8004640:	f000 face 	bl	8004be0 <__swsetup_r>
 8004644:	b170      	cbz	r0, 8004664 <_vfiprintf_r+0x5c>
 8004646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004648:	07dc      	lsls	r4, r3, #31
 800464a:	d504      	bpl.n	8004656 <_vfiprintf_r+0x4e>
 800464c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004650:	b01d      	add	sp, #116	; 0x74
 8004652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004656:	89ab      	ldrh	r3, [r5, #12]
 8004658:	0598      	lsls	r0, r3, #22
 800465a:	d4f7      	bmi.n	800464c <_vfiprintf_r+0x44>
 800465c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800465e:	f7ff fdaf 	bl	80041c0 <__retarget_lock_release_recursive>
 8004662:	e7f3      	b.n	800464c <_vfiprintf_r+0x44>
 8004664:	2300      	movs	r3, #0
 8004666:	9309      	str	r3, [sp, #36]	; 0x24
 8004668:	2320      	movs	r3, #32
 800466a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800466e:	2330      	movs	r3, #48	; 0x30
 8004670:	f04f 0901 	mov.w	r9, #1
 8004674:	f8cd 800c 	str.w	r8, [sp, #12]
 8004678:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004828 <_vfiprintf_r+0x220>
 800467c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004680:	4623      	mov	r3, r4
 8004682:	469a      	mov	sl, r3
 8004684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004688:	b10a      	cbz	r2, 800468e <_vfiprintf_r+0x86>
 800468a:	2a25      	cmp	r2, #37	; 0x25
 800468c:	d1f9      	bne.n	8004682 <_vfiprintf_r+0x7a>
 800468e:	ebba 0b04 	subs.w	fp, sl, r4
 8004692:	d00b      	beq.n	80046ac <_vfiprintf_r+0xa4>
 8004694:	465b      	mov	r3, fp
 8004696:	4622      	mov	r2, r4
 8004698:	4629      	mov	r1, r5
 800469a:	4630      	mov	r0, r6
 800469c:	f7ff ffa2 	bl	80045e4 <__sfputs_r>
 80046a0:	3001      	adds	r0, #1
 80046a2:	f000 80a9 	beq.w	80047f8 <_vfiprintf_r+0x1f0>
 80046a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046a8:	445a      	add	r2, fp
 80046aa:	9209      	str	r2, [sp, #36]	; 0x24
 80046ac:	f89a 3000 	ldrb.w	r3, [sl]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80a1 	beq.w	80047f8 <_vfiprintf_r+0x1f0>
 80046b6:	2300      	movs	r3, #0
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046c0:	f10a 0a01 	add.w	sl, sl, #1
 80046c4:	9304      	str	r3, [sp, #16]
 80046c6:	9307      	str	r3, [sp, #28]
 80046c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046cc:	931a      	str	r3, [sp, #104]	; 0x68
 80046ce:	4654      	mov	r4, sl
 80046d0:	2205      	movs	r2, #5
 80046d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d6:	4854      	ldr	r0, [pc, #336]	; (8004828 <_vfiprintf_r+0x220>)
 80046d8:	f000 fb1e 	bl	8004d18 <memchr>
 80046dc:	9a04      	ldr	r2, [sp, #16]
 80046de:	b9d8      	cbnz	r0, 8004718 <_vfiprintf_r+0x110>
 80046e0:	06d1      	lsls	r1, r2, #27
 80046e2:	bf44      	itt	mi
 80046e4:	2320      	movmi	r3, #32
 80046e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046ea:	0713      	lsls	r3, r2, #28
 80046ec:	bf44      	itt	mi
 80046ee:	232b      	movmi	r3, #43	; 0x2b
 80046f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046f4:	f89a 3000 	ldrb.w	r3, [sl]
 80046f8:	2b2a      	cmp	r3, #42	; 0x2a
 80046fa:	d015      	beq.n	8004728 <_vfiprintf_r+0x120>
 80046fc:	4654      	mov	r4, sl
 80046fe:	2000      	movs	r0, #0
 8004700:	f04f 0c0a 	mov.w	ip, #10
 8004704:	9a07      	ldr	r2, [sp, #28]
 8004706:	4621      	mov	r1, r4
 8004708:	f811 3b01 	ldrb.w	r3, [r1], #1
 800470c:	3b30      	subs	r3, #48	; 0x30
 800470e:	2b09      	cmp	r3, #9
 8004710:	d94d      	bls.n	80047ae <_vfiprintf_r+0x1a6>
 8004712:	b1b0      	cbz	r0, 8004742 <_vfiprintf_r+0x13a>
 8004714:	9207      	str	r2, [sp, #28]
 8004716:	e014      	b.n	8004742 <_vfiprintf_r+0x13a>
 8004718:	eba0 0308 	sub.w	r3, r0, r8
 800471c:	fa09 f303 	lsl.w	r3, r9, r3
 8004720:	4313      	orrs	r3, r2
 8004722:	46a2      	mov	sl, r4
 8004724:	9304      	str	r3, [sp, #16]
 8004726:	e7d2      	b.n	80046ce <_vfiprintf_r+0xc6>
 8004728:	9b03      	ldr	r3, [sp, #12]
 800472a:	1d19      	adds	r1, r3, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	9103      	str	r1, [sp, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	bfbb      	ittet	lt
 8004734:	425b      	neglt	r3, r3
 8004736:	f042 0202 	orrlt.w	r2, r2, #2
 800473a:	9307      	strge	r3, [sp, #28]
 800473c:	9307      	strlt	r3, [sp, #28]
 800473e:	bfb8      	it	lt
 8004740:	9204      	strlt	r2, [sp, #16]
 8004742:	7823      	ldrb	r3, [r4, #0]
 8004744:	2b2e      	cmp	r3, #46	; 0x2e
 8004746:	d10c      	bne.n	8004762 <_vfiprintf_r+0x15a>
 8004748:	7863      	ldrb	r3, [r4, #1]
 800474a:	2b2a      	cmp	r3, #42	; 0x2a
 800474c:	d134      	bne.n	80047b8 <_vfiprintf_r+0x1b0>
 800474e:	9b03      	ldr	r3, [sp, #12]
 8004750:	3402      	adds	r4, #2
 8004752:	1d1a      	adds	r2, r3, #4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	9203      	str	r2, [sp, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	bfb8      	it	lt
 800475c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004760:	9305      	str	r3, [sp, #20]
 8004762:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800482c <_vfiprintf_r+0x224>
 8004766:	2203      	movs	r2, #3
 8004768:	4650      	mov	r0, sl
 800476a:	7821      	ldrb	r1, [r4, #0]
 800476c:	f000 fad4 	bl	8004d18 <memchr>
 8004770:	b138      	cbz	r0, 8004782 <_vfiprintf_r+0x17a>
 8004772:	2240      	movs	r2, #64	; 0x40
 8004774:	9b04      	ldr	r3, [sp, #16]
 8004776:	eba0 000a 	sub.w	r0, r0, sl
 800477a:	4082      	lsls	r2, r0
 800477c:	4313      	orrs	r3, r2
 800477e:	3401      	adds	r4, #1
 8004780:	9304      	str	r3, [sp, #16]
 8004782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004786:	2206      	movs	r2, #6
 8004788:	4829      	ldr	r0, [pc, #164]	; (8004830 <_vfiprintf_r+0x228>)
 800478a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800478e:	f000 fac3 	bl	8004d18 <memchr>
 8004792:	2800      	cmp	r0, #0
 8004794:	d03f      	beq.n	8004816 <_vfiprintf_r+0x20e>
 8004796:	4b27      	ldr	r3, [pc, #156]	; (8004834 <_vfiprintf_r+0x22c>)
 8004798:	bb1b      	cbnz	r3, 80047e2 <_vfiprintf_r+0x1da>
 800479a:	9b03      	ldr	r3, [sp, #12]
 800479c:	3307      	adds	r3, #7
 800479e:	f023 0307 	bic.w	r3, r3, #7
 80047a2:	3308      	adds	r3, #8
 80047a4:	9303      	str	r3, [sp, #12]
 80047a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a8:	443b      	add	r3, r7
 80047aa:	9309      	str	r3, [sp, #36]	; 0x24
 80047ac:	e768      	b.n	8004680 <_vfiprintf_r+0x78>
 80047ae:	460c      	mov	r4, r1
 80047b0:	2001      	movs	r0, #1
 80047b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80047b6:	e7a6      	b.n	8004706 <_vfiprintf_r+0xfe>
 80047b8:	2300      	movs	r3, #0
 80047ba:	f04f 0c0a 	mov.w	ip, #10
 80047be:	4619      	mov	r1, r3
 80047c0:	3401      	adds	r4, #1
 80047c2:	9305      	str	r3, [sp, #20]
 80047c4:	4620      	mov	r0, r4
 80047c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047ca:	3a30      	subs	r2, #48	; 0x30
 80047cc:	2a09      	cmp	r2, #9
 80047ce:	d903      	bls.n	80047d8 <_vfiprintf_r+0x1d0>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0c6      	beq.n	8004762 <_vfiprintf_r+0x15a>
 80047d4:	9105      	str	r1, [sp, #20]
 80047d6:	e7c4      	b.n	8004762 <_vfiprintf_r+0x15a>
 80047d8:	4604      	mov	r4, r0
 80047da:	2301      	movs	r3, #1
 80047dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80047e0:	e7f0      	b.n	80047c4 <_vfiprintf_r+0x1bc>
 80047e2:	ab03      	add	r3, sp, #12
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	462a      	mov	r2, r5
 80047e8:	4630      	mov	r0, r6
 80047ea:	4b13      	ldr	r3, [pc, #76]	; (8004838 <_vfiprintf_r+0x230>)
 80047ec:	a904      	add	r1, sp, #16
 80047ee:	f3af 8000 	nop.w
 80047f2:	4607      	mov	r7, r0
 80047f4:	1c78      	adds	r0, r7, #1
 80047f6:	d1d6      	bne.n	80047a6 <_vfiprintf_r+0x19e>
 80047f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047fa:	07d9      	lsls	r1, r3, #31
 80047fc:	d405      	bmi.n	800480a <_vfiprintf_r+0x202>
 80047fe:	89ab      	ldrh	r3, [r5, #12]
 8004800:	059a      	lsls	r2, r3, #22
 8004802:	d402      	bmi.n	800480a <_vfiprintf_r+0x202>
 8004804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004806:	f7ff fcdb 	bl	80041c0 <__retarget_lock_release_recursive>
 800480a:	89ab      	ldrh	r3, [r5, #12]
 800480c:	065b      	lsls	r3, r3, #25
 800480e:	f53f af1d 	bmi.w	800464c <_vfiprintf_r+0x44>
 8004812:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004814:	e71c      	b.n	8004650 <_vfiprintf_r+0x48>
 8004816:	ab03      	add	r3, sp, #12
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	462a      	mov	r2, r5
 800481c:	4630      	mov	r0, r6
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <_vfiprintf_r+0x230>)
 8004820:	a904      	add	r1, sp, #16
 8004822:	f000 f87d 	bl	8004920 <_printf_i>
 8004826:	e7e4      	b.n	80047f2 <_vfiprintf_r+0x1ea>
 8004828:	08005ccd 	.word	0x08005ccd
 800482c:	08005cd3 	.word	0x08005cd3
 8004830:	08005cd7 	.word	0x08005cd7
 8004834:	00000000 	.word	0x00000000
 8004838:	080045e5 	.word	0x080045e5

0800483c <_printf_common>:
 800483c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004840:	4616      	mov	r6, r2
 8004842:	4699      	mov	r9, r3
 8004844:	688a      	ldr	r2, [r1, #8]
 8004846:	690b      	ldr	r3, [r1, #16]
 8004848:	4607      	mov	r7, r0
 800484a:	4293      	cmp	r3, r2
 800484c:	bfb8      	it	lt
 800484e:	4613      	movlt	r3, r2
 8004850:	6033      	str	r3, [r6, #0]
 8004852:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004856:	460c      	mov	r4, r1
 8004858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800485c:	b10a      	cbz	r2, 8004862 <_printf_common+0x26>
 800485e:	3301      	adds	r3, #1
 8004860:	6033      	str	r3, [r6, #0]
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	0699      	lsls	r1, r3, #26
 8004866:	bf42      	ittt	mi
 8004868:	6833      	ldrmi	r3, [r6, #0]
 800486a:	3302      	addmi	r3, #2
 800486c:	6033      	strmi	r3, [r6, #0]
 800486e:	6825      	ldr	r5, [r4, #0]
 8004870:	f015 0506 	ands.w	r5, r5, #6
 8004874:	d106      	bne.n	8004884 <_printf_common+0x48>
 8004876:	f104 0a19 	add.w	sl, r4, #25
 800487a:	68e3      	ldr	r3, [r4, #12]
 800487c:	6832      	ldr	r2, [r6, #0]
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	42ab      	cmp	r3, r5
 8004882:	dc2b      	bgt.n	80048dc <_printf_common+0xa0>
 8004884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004888:	1e13      	subs	r3, r2, #0
 800488a:	6822      	ldr	r2, [r4, #0]
 800488c:	bf18      	it	ne
 800488e:	2301      	movne	r3, #1
 8004890:	0692      	lsls	r2, r2, #26
 8004892:	d430      	bmi.n	80048f6 <_printf_common+0xba>
 8004894:	4649      	mov	r1, r9
 8004896:	4638      	mov	r0, r7
 8004898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800489c:	47c0      	blx	r8
 800489e:	3001      	adds	r0, #1
 80048a0:	d023      	beq.n	80048ea <_printf_common+0xae>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	6922      	ldr	r2, [r4, #16]
 80048a6:	f003 0306 	and.w	r3, r3, #6
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	bf14      	ite	ne
 80048ae:	2500      	movne	r5, #0
 80048b0:	6833      	ldreq	r3, [r6, #0]
 80048b2:	f04f 0600 	mov.w	r6, #0
 80048b6:	bf08      	it	eq
 80048b8:	68e5      	ldreq	r5, [r4, #12]
 80048ba:	f104 041a 	add.w	r4, r4, #26
 80048be:	bf08      	it	eq
 80048c0:	1aed      	subeq	r5, r5, r3
 80048c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80048c6:	bf08      	it	eq
 80048c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048cc:	4293      	cmp	r3, r2
 80048ce:	bfc4      	itt	gt
 80048d0:	1a9b      	subgt	r3, r3, r2
 80048d2:	18ed      	addgt	r5, r5, r3
 80048d4:	42b5      	cmp	r5, r6
 80048d6:	d11a      	bne.n	800490e <_printf_common+0xd2>
 80048d8:	2000      	movs	r0, #0
 80048da:	e008      	b.n	80048ee <_printf_common+0xb2>
 80048dc:	2301      	movs	r3, #1
 80048de:	4652      	mov	r2, sl
 80048e0:	4649      	mov	r1, r9
 80048e2:	4638      	mov	r0, r7
 80048e4:	47c0      	blx	r8
 80048e6:	3001      	adds	r0, #1
 80048e8:	d103      	bne.n	80048f2 <_printf_common+0xb6>
 80048ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f2:	3501      	adds	r5, #1
 80048f4:	e7c1      	b.n	800487a <_printf_common+0x3e>
 80048f6:	2030      	movs	r0, #48	; 0x30
 80048f8:	18e1      	adds	r1, r4, r3
 80048fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004904:	4422      	add	r2, r4
 8004906:	3302      	adds	r3, #2
 8004908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800490c:	e7c2      	b.n	8004894 <_printf_common+0x58>
 800490e:	2301      	movs	r3, #1
 8004910:	4622      	mov	r2, r4
 8004912:	4649      	mov	r1, r9
 8004914:	4638      	mov	r0, r7
 8004916:	47c0      	blx	r8
 8004918:	3001      	adds	r0, #1
 800491a:	d0e6      	beq.n	80048ea <_printf_common+0xae>
 800491c:	3601      	adds	r6, #1
 800491e:	e7d9      	b.n	80048d4 <_printf_common+0x98>

08004920 <_printf_i>:
 8004920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004924:	7e0f      	ldrb	r7, [r1, #24]
 8004926:	4691      	mov	r9, r2
 8004928:	2f78      	cmp	r7, #120	; 0x78
 800492a:	4680      	mov	r8, r0
 800492c:	460c      	mov	r4, r1
 800492e:	469a      	mov	sl, r3
 8004930:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004932:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004936:	d807      	bhi.n	8004948 <_printf_i+0x28>
 8004938:	2f62      	cmp	r7, #98	; 0x62
 800493a:	d80a      	bhi.n	8004952 <_printf_i+0x32>
 800493c:	2f00      	cmp	r7, #0
 800493e:	f000 80d5 	beq.w	8004aec <_printf_i+0x1cc>
 8004942:	2f58      	cmp	r7, #88	; 0x58
 8004944:	f000 80c1 	beq.w	8004aca <_printf_i+0x1aa>
 8004948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800494c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004950:	e03a      	b.n	80049c8 <_printf_i+0xa8>
 8004952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004956:	2b15      	cmp	r3, #21
 8004958:	d8f6      	bhi.n	8004948 <_printf_i+0x28>
 800495a:	a101      	add	r1, pc, #4	; (adr r1, 8004960 <_printf_i+0x40>)
 800495c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004960:	080049b9 	.word	0x080049b9
 8004964:	080049cd 	.word	0x080049cd
 8004968:	08004949 	.word	0x08004949
 800496c:	08004949 	.word	0x08004949
 8004970:	08004949 	.word	0x08004949
 8004974:	08004949 	.word	0x08004949
 8004978:	080049cd 	.word	0x080049cd
 800497c:	08004949 	.word	0x08004949
 8004980:	08004949 	.word	0x08004949
 8004984:	08004949 	.word	0x08004949
 8004988:	08004949 	.word	0x08004949
 800498c:	08004ad3 	.word	0x08004ad3
 8004990:	080049f9 	.word	0x080049f9
 8004994:	08004a8d 	.word	0x08004a8d
 8004998:	08004949 	.word	0x08004949
 800499c:	08004949 	.word	0x08004949
 80049a0:	08004af5 	.word	0x08004af5
 80049a4:	08004949 	.word	0x08004949
 80049a8:	080049f9 	.word	0x080049f9
 80049ac:	08004949 	.word	0x08004949
 80049b0:	08004949 	.word	0x08004949
 80049b4:	08004a95 	.word	0x08004a95
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	1d1a      	adds	r2, r3, #4
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	602a      	str	r2, [r5, #0]
 80049c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0a0      	b.n	8004b0e <_printf_i+0x1ee>
 80049cc:	6820      	ldr	r0, [r4, #0]
 80049ce:	682b      	ldr	r3, [r5, #0]
 80049d0:	0607      	lsls	r7, r0, #24
 80049d2:	f103 0104 	add.w	r1, r3, #4
 80049d6:	6029      	str	r1, [r5, #0]
 80049d8:	d501      	bpl.n	80049de <_printf_i+0xbe>
 80049da:	681e      	ldr	r6, [r3, #0]
 80049dc:	e003      	b.n	80049e6 <_printf_i+0xc6>
 80049de:	0646      	lsls	r6, r0, #25
 80049e0:	d5fb      	bpl.n	80049da <_printf_i+0xba>
 80049e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049e6:	2e00      	cmp	r6, #0
 80049e8:	da03      	bge.n	80049f2 <_printf_i+0xd2>
 80049ea:	232d      	movs	r3, #45	; 0x2d
 80049ec:	4276      	negs	r6, r6
 80049ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f2:	230a      	movs	r3, #10
 80049f4:	4859      	ldr	r0, [pc, #356]	; (8004b5c <_printf_i+0x23c>)
 80049f6:	e012      	b.n	8004a1e <_printf_i+0xfe>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	6820      	ldr	r0, [r4, #0]
 80049fc:	1d19      	adds	r1, r3, #4
 80049fe:	6029      	str	r1, [r5, #0]
 8004a00:	0605      	lsls	r5, r0, #24
 8004a02:	d501      	bpl.n	8004a08 <_printf_i+0xe8>
 8004a04:	681e      	ldr	r6, [r3, #0]
 8004a06:	e002      	b.n	8004a0e <_printf_i+0xee>
 8004a08:	0641      	lsls	r1, r0, #25
 8004a0a:	d5fb      	bpl.n	8004a04 <_printf_i+0xe4>
 8004a0c:	881e      	ldrh	r6, [r3, #0]
 8004a0e:	2f6f      	cmp	r7, #111	; 0x6f
 8004a10:	bf0c      	ite	eq
 8004a12:	2308      	moveq	r3, #8
 8004a14:	230a      	movne	r3, #10
 8004a16:	4851      	ldr	r0, [pc, #324]	; (8004b5c <_printf_i+0x23c>)
 8004a18:	2100      	movs	r1, #0
 8004a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a1e:	6865      	ldr	r5, [r4, #4]
 8004a20:	2d00      	cmp	r5, #0
 8004a22:	bfa8      	it	ge
 8004a24:	6821      	ldrge	r1, [r4, #0]
 8004a26:	60a5      	str	r5, [r4, #8]
 8004a28:	bfa4      	itt	ge
 8004a2a:	f021 0104 	bicge.w	r1, r1, #4
 8004a2e:	6021      	strge	r1, [r4, #0]
 8004a30:	b90e      	cbnz	r6, 8004a36 <_printf_i+0x116>
 8004a32:	2d00      	cmp	r5, #0
 8004a34:	d04b      	beq.n	8004ace <_printf_i+0x1ae>
 8004a36:	4615      	mov	r5, r2
 8004a38:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a3c:	fb03 6711 	mls	r7, r3, r1, r6
 8004a40:	5dc7      	ldrb	r7, [r0, r7]
 8004a42:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a46:	4637      	mov	r7, r6
 8004a48:	42bb      	cmp	r3, r7
 8004a4a:	460e      	mov	r6, r1
 8004a4c:	d9f4      	bls.n	8004a38 <_printf_i+0x118>
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d10b      	bne.n	8004a6a <_printf_i+0x14a>
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	07de      	lsls	r6, r3, #31
 8004a56:	d508      	bpl.n	8004a6a <_printf_i+0x14a>
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	6861      	ldr	r1, [r4, #4]
 8004a5c:	4299      	cmp	r1, r3
 8004a5e:	bfde      	ittt	le
 8004a60:	2330      	movle	r3, #48	; 0x30
 8004a62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a66:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a6a:	1b52      	subs	r2, r2, r5
 8004a6c:	6122      	str	r2, [r4, #16]
 8004a6e:	464b      	mov	r3, r9
 8004a70:	4621      	mov	r1, r4
 8004a72:	4640      	mov	r0, r8
 8004a74:	f8cd a000 	str.w	sl, [sp]
 8004a78:	aa03      	add	r2, sp, #12
 8004a7a:	f7ff fedf 	bl	800483c <_printf_common>
 8004a7e:	3001      	adds	r0, #1
 8004a80:	d14a      	bne.n	8004b18 <_printf_i+0x1f8>
 8004a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a86:	b004      	add	sp, #16
 8004a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	f043 0320 	orr.w	r3, r3, #32
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	2778      	movs	r7, #120	; 0x78
 8004a96:	4832      	ldr	r0, [pc, #200]	; (8004b60 <_printf_i+0x240>)
 8004a98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	6829      	ldr	r1, [r5, #0]
 8004aa0:	061f      	lsls	r7, r3, #24
 8004aa2:	f851 6b04 	ldr.w	r6, [r1], #4
 8004aa6:	d402      	bmi.n	8004aae <_printf_i+0x18e>
 8004aa8:	065f      	lsls	r7, r3, #25
 8004aaa:	bf48      	it	mi
 8004aac:	b2b6      	uxthmi	r6, r6
 8004aae:	07df      	lsls	r7, r3, #31
 8004ab0:	bf48      	it	mi
 8004ab2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ab6:	6029      	str	r1, [r5, #0]
 8004ab8:	bf48      	it	mi
 8004aba:	6023      	strmi	r3, [r4, #0]
 8004abc:	b91e      	cbnz	r6, 8004ac6 <_printf_i+0x1a6>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	f023 0320 	bic.w	r3, r3, #32
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	2310      	movs	r3, #16
 8004ac8:	e7a6      	b.n	8004a18 <_printf_i+0xf8>
 8004aca:	4824      	ldr	r0, [pc, #144]	; (8004b5c <_printf_i+0x23c>)
 8004acc:	e7e4      	b.n	8004a98 <_printf_i+0x178>
 8004ace:	4615      	mov	r5, r2
 8004ad0:	e7bd      	b.n	8004a4e <_printf_i+0x12e>
 8004ad2:	682b      	ldr	r3, [r5, #0]
 8004ad4:	6826      	ldr	r6, [r4, #0]
 8004ad6:	1d18      	adds	r0, r3, #4
 8004ad8:	6961      	ldr	r1, [r4, #20]
 8004ada:	6028      	str	r0, [r5, #0]
 8004adc:	0635      	lsls	r5, r6, #24
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	d501      	bpl.n	8004ae6 <_printf_i+0x1c6>
 8004ae2:	6019      	str	r1, [r3, #0]
 8004ae4:	e002      	b.n	8004aec <_printf_i+0x1cc>
 8004ae6:	0670      	lsls	r0, r6, #25
 8004ae8:	d5fb      	bpl.n	8004ae2 <_printf_i+0x1c2>
 8004aea:	8019      	strh	r1, [r3, #0]
 8004aec:	2300      	movs	r3, #0
 8004aee:	4615      	mov	r5, r2
 8004af0:	6123      	str	r3, [r4, #16]
 8004af2:	e7bc      	b.n	8004a6e <_printf_i+0x14e>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	2100      	movs	r1, #0
 8004af8:	1d1a      	adds	r2, r3, #4
 8004afa:	602a      	str	r2, [r5, #0]
 8004afc:	681d      	ldr	r5, [r3, #0]
 8004afe:	6862      	ldr	r2, [r4, #4]
 8004b00:	4628      	mov	r0, r5
 8004b02:	f000 f909 	bl	8004d18 <memchr>
 8004b06:	b108      	cbz	r0, 8004b0c <_printf_i+0x1ec>
 8004b08:	1b40      	subs	r0, r0, r5
 8004b0a:	6060      	str	r0, [r4, #4]
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	6123      	str	r3, [r4, #16]
 8004b10:	2300      	movs	r3, #0
 8004b12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b16:	e7aa      	b.n	8004a6e <_printf_i+0x14e>
 8004b18:	462a      	mov	r2, r5
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	4640      	mov	r0, r8
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	47d0      	blx	sl
 8004b22:	3001      	adds	r0, #1
 8004b24:	d0ad      	beq.n	8004a82 <_printf_i+0x162>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	079b      	lsls	r3, r3, #30
 8004b2a:	d413      	bmi.n	8004b54 <_printf_i+0x234>
 8004b2c:	68e0      	ldr	r0, [r4, #12]
 8004b2e:	9b03      	ldr	r3, [sp, #12]
 8004b30:	4298      	cmp	r0, r3
 8004b32:	bfb8      	it	lt
 8004b34:	4618      	movlt	r0, r3
 8004b36:	e7a6      	b.n	8004a86 <_printf_i+0x166>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	4632      	mov	r2, r6
 8004b3c:	4649      	mov	r1, r9
 8004b3e:	4640      	mov	r0, r8
 8004b40:	47d0      	blx	sl
 8004b42:	3001      	adds	r0, #1
 8004b44:	d09d      	beq.n	8004a82 <_printf_i+0x162>
 8004b46:	3501      	adds	r5, #1
 8004b48:	68e3      	ldr	r3, [r4, #12]
 8004b4a:	9903      	ldr	r1, [sp, #12]
 8004b4c:	1a5b      	subs	r3, r3, r1
 8004b4e:	42ab      	cmp	r3, r5
 8004b50:	dcf2      	bgt.n	8004b38 <_printf_i+0x218>
 8004b52:	e7eb      	b.n	8004b2c <_printf_i+0x20c>
 8004b54:	2500      	movs	r5, #0
 8004b56:	f104 0619 	add.w	r6, r4, #25
 8004b5a:	e7f5      	b.n	8004b48 <_printf_i+0x228>
 8004b5c:	08005cde 	.word	0x08005cde
 8004b60:	08005cef 	.word	0x08005cef

08004b64 <__swbuf_r>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	460e      	mov	r6, r1
 8004b68:	4614      	mov	r4, r2
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	b118      	cbz	r0, 8004b76 <__swbuf_r+0x12>
 8004b6e:	6a03      	ldr	r3, [r0, #32]
 8004b70:	b90b      	cbnz	r3, 8004b76 <__swbuf_r+0x12>
 8004b72:	f7ff fa31 	bl	8003fd8 <__sinit>
 8004b76:	69a3      	ldr	r3, [r4, #24]
 8004b78:	60a3      	str	r3, [r4, #8]
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	071a      	lsls	r2, r3, #28
 8004b7e:	d525      	bpl.n	8004bcc <__swbuf_r+0x68>
 8004b80:	6923      	ldr	r3, [r4, #16]
 8004b82:	b31b      	cbz	r3, 8004bcc <__swbuf_r+0x68>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	6922      	ldr	r2, [r4, #16]
 8004b88:	b2f6      	uxtb	r6, r6
 8004b8a:	1a98      	subs	r0, r3, r2
 8004b8c:	6963      	ldr	r3, [r4, #20]
 8004b8e:	4637      	mov	r7, r6
 8004b90:	4283      	cmp	r3, r0
 8004b92:	dc04      	bgt.n	8004b9e <__swbuf_r+0x3a>
 8004b94:	4621      	mov	r1, r4
 8004b96:	4628      	mov	r0, r5
 8004b98:	f7ff fcbe 	bl	8004518 <_fflush_r>
 8004b9c:	b9e0      	cbnz	r0, 8004bd8 <__swbuf_r+0x74>
 8004b9e:	68a3      	ldr	r3, [r4, #8]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	60a3      	str	r3, [r4, #8]
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	6022      	str	r2, [r4, #0]
 8004baa:	701e      	strb	r6, [r3, #0]
 8004bac:	6962      	ldr	r2, [r4, #20]
 8004bae:	1c43      	adds	r3, r0, #1
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d004      	beq.n	8004bbe <__swbuf_r+0x5a>
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	07db      	lsls	r3, r3, #31
 8004bb8:	d506      	bpl.n	8004bc8 <__swbuf_r+0x64>
 8004bba:	2e0a      	cmp	r6, #10
 8004bbc:	d104      	bne.n	8004bc8 <__swbuf_r+0x64>
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f7ff fca9 	bl	8004518 <_fflush_r>
 8004bc6:	b938      	cbnz	r0, 8004bd8 <__swbuf_r+0x74>
 8004bc8:	4638      	mov	r0, r7
 8004bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bcc:	4621      	mov	r1, r4
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f000 f806 	bl	8004be0 <__swsetup_r>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d0d5      	beq.n	8004b84 <__swbuf_r+0x20>
 8004bd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004bdc:	e7f4      	b.n	8004bc8 <__swbuf_r+0x64>
	...

08004be0 <__swsetup_r>:
 8004be0:	b538      	push	{r3, r4, r5, lr}
 8004be2:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <__swsetup_r+0xac>)
 8004be4:	4605      	mov	r5, r0
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	460c      	mov	r4, r1
 8004bea:	b118      	cbz	r0, 8004bf4 <__swsetup_r+0x14>
 8004bec:	6a03      	ldr	r3, [r0, #32]
 8004bee:	b90b      	cbnz	r3, 8004bf4 <__swsetup_r+0x14>
 8004bf0:	f7ff f9f2 	bl	8003fd8 <__sinit>
 8004bf4:	89a3      	ldrh	r3, [r4, #12]
 8004bf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bfa:	0718      	lsls	r0, r3, #28
 8004bfc:	d422      	bmi.n	8004c44 <__swsetup_r+0x64>
 8004bfe:	06d9      	lsls	r1, r3, #27
 8004c00:	d407      	bmi.n	8004c12 <__swsetup_r+0x32>
 8004c02:	2309      	movs	r3, #9
 8004c04:	602b      	str	r3, [r5, #0]
 8004c06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	e034      	b.n	8004c7c <__swsetup_r+0x9c>
 8004c12:	0758      	lsls	r0, r3, #29
 8004c14:	d512      	bpl.n	8004c3c <__swsetup_r+0x5c>
 8004c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c18:	b141      	cbz	r1, 8004c2c <__swsetup_r+0x4c>
 8004c1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c1e:	4299      	cmp	r1, r3
 8004c20:	d002      	beq.n	8004c28 <__swsetup_r+0x48>
 8004c22:	4628      	mov	r0, r5
 8004c24:	f7ff fafa 	bl	800421c <_free_r>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	6363      	str	r3, [r4, #52]	; 0x34
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c32:	81a3      	strh	r3, [r4, #12]
 8004c34:	2300      	movs	r3, #0
 8004c36:	6063      	str	r3, [r4, #4]
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	6023      	str	r3, [r4, #0]
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	f043 0308 	orr.w	r3, r3, #8
 8004c42:	81a3      	strh	r3, [r4, #12]
 8004c44:	6923      	ldr	r3, [r4, #16]
 8004c46:	b94b      	cbnz	r3, 8004c5c <__swsetup_r+0x7c>
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c52:	d003      	beq.n	8004c5c <__swsetup_r+0x7c>
 8004c54:	4621      	mov	r1, r4
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 f891 	bl	8004d7e <__smakebuf_r>
 8004c5c:	89a0      	ldrh	r0, [r4, #12]
 8004c5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c62:	f010 0301 	ands.w	r3, r0, #1
 8004c66:	d00a      	beq.n	8004c7e <__swsetup_r+0x9e>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60a3      	str	r3, [r4, #8]
 8004c6c:	6963      	ldr	r3, [r4, #20]
 8004c6e:	425b      	negs	r3, r3
 8004c70:	61a3      	str	r3, [r4, #24]
 8004c72:	6923      	ldr	r3, [r4, #16]
 8004c74:	b943      	cbnz	r3, 8004c88 <__swsetup_r+0xa8>
 8004c76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c7a:	d1c4      	bne.n	8004c06 <__swsetup_r+0x26>
 8004c7c:	bd38      	pop	{r3, r4, r5, pc}
 8004c7e:	0781      	lsls	r1, r0, #30
 8004c80:	bf58      	it	pl
 8004c82:	6963      	ldrpl	r3, [r4, #20]
 8004c84:	60a3      	str	r3, [r4, #8]
 8004c86:	e7f4      	b.n	8004c72 <__swsetup_r+0x92>
 8004c88:	2000      	movs	r0, #0
 8004c8a:	e7f7      	b.n	8004c7c <__swsetup_r+0x9c>
 8004c8c:	20000078 	.word	0x20000078

08004c90 <_raise_r>:
 8004c90:	291f      	cmp	r1, #31
 8004c92:	b538      	push	{r3, r4, r5, lr}
 8004c94:	4604      	mov	r4, r0
 8004c96:	460d      	mov	r5, r1
 8004c98:	d904      	bls.n	8004ca4 <_raise_r+0x14>
 8004c9a:	2316      	movs	r3, #22
 8004c9c:	6003      	str	r3, [r0, #0]
 8004c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004ca6:	b112      	cbz	r2, 8004cae <_raise_r+0x1e>
 8004ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004cac:	b94b      	cbnz	r3, 8004cc2 <_raise_r+0x32>
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f000 f830 	bl	8004d14 <_getpid_r>
 8004cb4:	462a      	mov	r2, r5
 8004cb6:	4601      	mov	r1, r0
 8004cb8:	4620      	mov	r0, r4
 8004cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cbe:	f000 b817 	b.w	8004cf0 <_kill_r>
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d00a      	beq.n	8004cdc <_raise_r+0x4c>
 8004cc6:	1c59      	adds	r1, r3, #1
 8004cc8:	d103      	bne.n	8004cd2 <_raise_r+0x42>
 8004cca:	2316      	movs	r3, #22
 8004ccc:	6003      	str	r3, [r0, #0]
 8004cce:	2001      	movs	r0, #1
 8004cd0:	e7e7      	b.n	8004ca2 <_raise_r+0x12>
 8004cd2:	2400      	movs	r4, #0
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004cda:	4798      	blx	r3
 8004cdc:	2000      	movs	r0, #0
 8004cde:	e7e0      	b.n	8004ca2 <_raise_r+0x12>

08004ce0 <raise>:
 8004ce0:	4b02      	ldr	r3, [pc, #8]	; (8004cec <raise+0xc>)
 8004ce2:	4601      	mov	r1, r0
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	f7ff bfd3 	b.w	8004c90 <_raise_r>
 8004cea:	bf00      	nop
 8004cec:	20000078 	.word	0x20000078

08004cf0 <_kill_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	4d06      	ldr	r5, [pc, #24]	; (8004d10 <_kill_r+0x20>)
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	4608      	mov	r0, r1
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	602b      	str	r3, [r5, #0]
 8004cfe:	f7fc fc74 	bl	80015ea <_kill>
 8004d02:	1c43      	adds	r3, r0, #1
 8004d04:	d102      	bne.n	8004d0c <_kill_r+0x1c>
 8004d06:	682b      	ldr	r3, [r5, #0]
 8004d08:	b103      	cbz	r3, 8004d0c <_kill_r+0x1c>
 8004d0a:	6023      	str	r3, [r4, #0]
 8004d0c:	bd38      	pop	{r3, r4, r5, pc}
 8004d0e:	bf00      	nop
 8004d10:	20002f68 	.word	0x20002f68

08004d14 <_getpid_r>:
 8004d14:	f7fc bc62 	b.w	80015dc <_getpid>

08004d18 <memchr>:
 8004d18:	4603      	mov	r3, r0
 8004d1a:	b510      	push	{r4, lr}
 8004d1c:	b2c9      	uxtb	r1, r1
 8004d1e:	4402      	add	r2, r0
 8004d20:	4293      	cmp	r3, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	d101      	bne.n	8004d2a <memchr+0x12>
 8004d26:	2000      	movs	r0, #0
 8004d28:	e003      	b.n	8004d32 <memchr+0x1a>
 8004d2a:	7804      	ldrb	r4, [r0, #0]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	428c      	cmp	r4, r1
 8004d30:	d1f6      	bne.n	8004d20 <memchr+0x8>
 8004d32:	bd10      	pop	{r4, pc}

08004d34 <__swhatbuf_r>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	460c      	mov	r4, r1
 8004d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d3c:	4615      	mov	r5, r2
 8004d3e:	2900      	cmp	r1, #0
 8004d40:	461e      	mov	r6, r3
 8004d42:	b096      	sub	sp, #88	; 0x58
 8004d44:	da0c      	bge.n	8004d60 <__swhatbuf_r+0x2c>
 8004d46:	89a3      	ldrh	r3, [r4, #12]
 8004d48:	2100      	movs	r1, #0
 8004d4a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d4e:	bf0c      	ite	eq
 8004d50:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004d54:	2340      	movne	r3, #64	; 0x40
 8004d56:	2000      	movs	r0, #0
 8004d58:	6031      	str	r1, [r6, #0]
 8004d5a:	602b      	str	r3, [r5, #0]
 8004d5c:	b016      	add	sp, #88	; 0x58
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	466a      	mov	r2, sp
 8004d62:	f000 f849 	bl	8004df8 <_fstat_r>
 8004d66:	2800      	cmp	r0, #0
 8004d68:	dbed      	blt.n	8004d46 <__swhatbuf_r+0x12>
 8004d6a:	9901      	ldr	r1, [sp, #4]
 8004d6c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004d70:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004d74:	4259      	negs	r1, r3
 8004d76:	4159      	adcs	r1, r3
 8004d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d7c:	e7eb      	b.n	8004d56 <__swhatbuf_r+0x22>

08004d7e <__smakebuf_r>:
 8004d7e:	898b      	ldrh	r3, [r1, #12]
 8004d80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d82:	079d      	lsls	r5, r3, #30
 8004d84:	4606      	mov	r6, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	d507      	bpl.n	8004d9a <__smakebuf_r+0x1c>
 8004d8a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d8e:	6023      	str	r3, [r4, #0]
 8004d90:	6123      	str	r3, [r4, #16]
 8004d92:	2301      	movs	r3, #1
 8004d94:	6163      	str	r3, [r4, #20]
 8004d96:	b002      	add	sp, #8
 8004d98:	bd70      	pop	{r4, r5, r6, pc}
 8004d9a:	466a      	mov	r2, sp
 8004d9c:	ab01      	add	r3, sp, #4
 8004d9e:	f7ff ffc9 	bl	8004d34 <__swhatbuf_r>
 8004da2:	9900      	ldr	r1, [sp, #0]
 8004da4:	4605      	mov	r5, r0
 8004da6:	4630      	mov	r0, r6
 8004da8:	f7ff faa8 	bl	80042fc <_malloc_r>
 8004dac:	b948      	cbnz	r0, 8004dc2 <__smakebuf_r+0x44>
 8004dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004db2:	059a      	lsls	r2, r3, #22
 8004db4:	d4ef      	bmi.n	8004d96 <__smakebuf_r+0x18>
 8004db6:	f023 0303 	bic.w	r3, r3, #3
 8004dba:	f043 0302 	orr.w	r3, r3, #2
 8004dbe:	81a3      	strh	r3, [r4, #12]
 8004dc0:	e7e3      	b.n	8004d8a <__smakebuf_r+0xc>
 8004dc2:	89a3      	ldrh	r3, [r4, #12]
 8004dc4:	6020      	str	r0, [r4, #0]
 8004dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	9b00      	ldr	r3, [sp, #0]
 8004dce:	6120      	str	r0, [r4, #16]
 8004dd0:	6163      	str	r3, [r4, #20]
 8004dd2:	9b01      	ldr	r3, [sp, #4]
 8004dd4:	b15b      	cbz	r3, 8004dee <__smakebuf_r+0x70>
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ddc:	f000 f81e 	bl	8004e1c <_isatty_r>
 8004de0:	b128      	cbz	r0, 8004dee <__smakebuf_r+0x70>
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	f023 0303 	bic.w	r3, r3, #3
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	81a3      	strh	r3, [r4, #12]
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	431d      	orrs	r5, r3
 8004df2:	81a5      	strh	r5, [r4, #12]
 8004df4:	e7cf      	b.n	8004d96 <__smakebuf_r+0x18>
	...

08004df8 <_fstat_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	4d06      	ldr	r5, [pc, #24]	; (8004e18 <_fstat_r+0x20>)
 8004dfe:	4604      	mov	r4, r0
 8004e00:	4608      	mov	r0, r1
 8004e02:	4611      	mov	r1, r2
 8004e04:	602b      	str	r3, [r5, #0]
 8004e06:	f7fc fc4e 	bl	80016a6 <_fstat>
 8004e0a:	1c43      	adds	r3, r0, #1
 8004e0c:	d102      	bne.n	8004e14 <_fstat_r+0x1c>
 8004e0e:	682b      	ldr	r3, [r5, #0]
 8004e10:	b103      	cbz	r3, 8004e14 <_fstat_r+0x1c>
 8004e12:	6023      	str	r3, [r4, #0]
 8004e14:	bd38      	pop	{r3, r4, r5, pc}
 8004e16:	bf00      	nop
 8004e18:	20002f68 	.word	0x20002f68

08004e1c <_isatty_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	2300      	movs	r3, #0
 8004e20:	4d05      	ldr	r5, [pc, #20]	; (8004e38 <_isatty_r+0x1c>)
 8004e22:	4604      	mov	r4, r0
 8004e24:	4608      	mov	r0, r1
 8004e26:	602b      	str	r3, [r5, #0]
 8004e28:	f7fc fc4c 	bl	80016c4 <_isatty>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	d102      	bne.n	8004e36 <_isatty_r+0x1a>
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	b103      	cbz	r3, 8004e36 <_isatty_r+0x1a>
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	20002f68 	.word	0x20002f68

08004e3c <_init>:
 8004e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3e:	bf00      	nop
 8004e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e42:	bc08      	pop	{r3}
 8004e44:	469e      	mov	lr, r3
 8004e46:	4770      	bx	lr

08004e48 <_fini>:
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	bf00      	nop
 8004e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4e:	bc08      	pop	{r3}
 8004e50:	469e      	mov	lr, r3
 8004e52:	4770      	bx	lr
