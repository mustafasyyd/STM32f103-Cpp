#include "main.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"

/* Configure the processor for use with the Atmel demo board.  This is very
 * minimal as most of the setup is performed in the startup code. */
void clock_72(void);

/* The idle hook is just used to stream data to the USB port.*/
void vApplicationIdleHook( void );
/*-----------------------------------------------------------*/
void vApplicationStackOverflowHook( xTaskHandle *pxTask,signed char *pcTaskName );
/* Setup hardware then start all the demo application tasks. */


void Writer( void *pv );
void Reader( void *pv );

QueueHandle_t shared_dataQ;
int main(void)
{
	  RCC->APB2ENR |= (1<<2) | (1<<4) ;
	  GPIOC->CRH   |= (3<<20)		  ;
	  GPIOA->CRL   |= (3<<4) | (3<<8) ;

	  shared_dataQ = xQueueCreate(5,size(char));

	if(xQueue)
	{
		xTaskCreate(Writer , "Writer Task", 300, NULL,1, NULL);
		xTaskCreate(Reader , "Reader Task", 300, NULL,1, NULL);

		vTaskStartScheduler();
	}

	while (1)
	{
	}

}


void Writer( void *pv )
{
	char sendercontrol ='p';
	for(;;)
    {
		xQueueSendToBack(xq, &sendercontrol, 150/portTICK_PERIOD_MS);
    }
}

void Reader( void *pv )
{
	char RxControl = 0;
	for(;;)
    {
		xQueueReceive(xq, &RxControl, 150/portTICK_PERIOD_MS);
		if( RxControl == 'p')
			GPIOC->ODR |= 1<<1;
    }
}


void clock_72(void)
{
/*
FLASH->ACR	= 0x12;	//See note
RCC->CR |= 1<<16;	//HSE on
while (!(RCC->CR & (1<<17)));	//wait until HSE ready
RCC->CFGR2 = 4<<4;	//Predev2 divide by 5 -->5MHz
RCC->CFGR2 |= 6<<8;	//PLL2 multiply by 8->40MHz
RCC->CR |= 1<<26;	//PLL2 on
while (!(RCC->CR & (1<<27)));      	//wait until locked
RCC->CFGR2 |= (1<<16);	//PreDiv 2 as input
RCC->CFGR2 |= 4<<0;	//Prediv by 5	--->8MHz
RCC->CFGR |= (1<<16);	//PreDiv 1 as input
RCC->CFGR |= 7<<18;	// mult by 9	--->72MHz
RCC->CFGR |= 1<<10;	//APB1 = 36MHz. See bus clocks.
RCC->CR |= 1<<24;	//enable PLL
while (!(RCC->CR & (1<<25)));	//wait until locked
RCC->CFGR |= 2;	//PLL as clock source
*/
}


