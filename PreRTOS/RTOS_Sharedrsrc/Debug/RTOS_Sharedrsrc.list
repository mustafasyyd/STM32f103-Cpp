
RTOS_Sharedrsrc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b9c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001cac  08001cac  00011cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cd0  08001cd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cd0  08001cd0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cd0  08001cd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cd0  08001cd0  00011cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cd4  08001cd4  00011cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000294c  2000000c  08001ce4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002958  08001ce4  00022958  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003ea7  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000de9  00000000  00000000  00023f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000468  00000000  00000000  00024d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000350  00000000  00000000  00025170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014a33  00000000  00000000  000254c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000477f  00000000  00000000  00039ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000865ef  00000000  00000000  0003e672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000111c  00000000  00000000  000c4c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000c5d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08001c94 	.word	0x08001c94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08001c94 	.word	0x08001c94

08000150 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b08a      	sub	sp, #40	; 0x28
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 8000158:	2300      	movs	r3, #0
 800015a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800015c:	f000 fff8 	bl	8001150 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 8000160:	4b46      	ldr	r3, [pc, #280]	; (800027c <pvPortMalloc+0x12c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d104      	bne.n	8000172 <pvPortMalloc+0x22>
        {
            prvHeapInit();
 8000168:	f000 f8dc 	bl	8000324 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 800016c:	4b43      	ldr	r3, [pc, #268]	; (800027c <pvPortMalloc+0x12c>)
 800016e:	2201      	movs	r2, #1
 8000170:	601a      	str	r2, [r3, #0]
        }

        if( xWantedSize > 0 )
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d013      	beq.n	80001a0 <pvPortMalloc+0x50>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = heapSTRUCT_SIZE + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8000178:	2308      	movs	r3, #8
 800017a:	461a      	mov	r2, r3
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	f003 0307 	and.w	r3, r3, #7
 8000182:	1ad3      	subs	r3, r2, r3
 8000184:	3308      	adds	r3, #8
 8000186:	617b      	str	r3, [r7, #20]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8000188:	697b      	ldr	r3, [r7, #20]
 800018a:	43db      	mvns	r3, r3
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	429a      	cmp	r2, r3
 8000190:	d804      	bhi.n	800019c <pvPortMalloc+0x4c>
            {
                xWantedSize += xAdditionalRequiredSize;
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	697b      	ldr	r3, [r7, #20]
 8000196:	4413      	add	r3, r2
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	e001      	b.n	80001a0 <pvPortMalloc+0x50>
            }
            else
            {
                xWantedSize = 0;
 800019c:	2300      	movs	r3, #0
 800019e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	db63      	blt.n	800026e <pvPortMalloc+0x11e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d060      	beq.n	800026e <pvPortMalloc+0x11e>
 80001ac:	4b34      	ldr	r3, [pc, #208]	; (8000280 <pvPortMalloc+0x130>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	687a      	ldr	r2, [r7, #4]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d85b      	bhi.n	800026e <pvPortMalloc+0x11e>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80001b6:	4b33      	ldr	r3, [pc, #204]	; (8000284 <pvPortMalloc+0x134>)
 80001b8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80001ba:	4b32      	ldr	r3, [pc, #200]	; (8000284 <pvPortMalloc+0x134>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80001c0:	e004      	b.n	80001cc <pvPortMalloc+0x7c>
                {
                    pxPreviousBlock = pxBlock;
 80001c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001c4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80001c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80001cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d903      	bls.n	80001de <pvPortMalloc+0x8e>
 80001d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d1f1      	bne.n	80001c2 <pvPortMalloc+0x72>
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
 80001de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001e0:	4a29      	ldr	r2, [pc, #164]	; (8000288 <pvPortMalloc+0x138>)
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d043      	beq.n	800026e <pvPortMalloc+0x11e>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80001e6:	6a3b      	ldr	r3, [r7, #32]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2208      	movs	r2, #8
 80001ec:	4413      	add	r3, r2
 80001ee:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80001f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	6a3b      	ldr	r3, [r7, #32]
 80001f6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80001f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001fa:	685a      	ldr	r2, [r3, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	1ad3      	subs	r3, r2, r3
 8000200:	2208      	movs	r2, #8
 8000202:	0052      	lsls	r2, r2, #1
 8000204:	4293      	cmp	r3, r2
 8000206:	d922      	bls.n	800024e <pvPortMalloc+0xfe>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	613b      	str	r3, [r7, #16]

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000212:	685a      	ldr	r2, [r3, #4]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1ad2      	subs	r2, r2, r3
 8000218:	693b      	ldr	r3, [r7, #16]
 800021a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	4b16      	ldr	r3, [pc, #88]	; (8000284 <pvPortMalloc+0x134>)
 800022a:	61bb      	str	r3, [r7, #24]
 800022c:	e002      	b.n	8000234 <pvPortMalloc+0xe4>
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	61bb      	str	r3, [r7, #24]
 8000234:	69bb      	ldr	r3, [r7, #24]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	429a      	cmp	r2, r3
 800023e:	d8f6      	bhi.n	800022e <pvPortMalloc+0xde>
 8000240:	69bb      	ldr	r3, [r7, #24]
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	693b      	ldr	r3, [r7, #16]
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	69bb      	ldr	r3, [r7, #24]
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	601a      	str	r2, [r3, #0]
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <pvPortMalloc+0x130>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	1ad3      	subs	r3, r2, r3
 8000258:	4a09      	ldr	r2, [pc, #36]	; (8000280 <pvPortMalloc+0x130>)
 800025a:	6013      	str	r3, [r2, #0]

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000266:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800026e:	f000 ff7d 	bl	800116c <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8000272:	69fb      	ldr	r3, [r7, #28]
}
 8000274:	4618      	mov	r0, r3
 8000276:	3728      	adds	r7, #40	; 0x28
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20002838 	.word	0x20002838
 8000280:	20000000 	.word	0x20000000
 8000284:	20002828 	.word	0x20002828
 8000288:	20002830 	.word	0x20002830

0800028c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d039      	beq.n	8000312 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 800029e:	2308      	movs	r3, #8
 80002a0:	425b      	negs	r3, r3
 80002a2:	693a      	ldr	r2, [r7, #16]
 80002a4:	4413      	add	r3, r2
 80002a6:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	60fb      	str	r3, [r7, #12]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	0fdb      	lsrs	r3, r3, #31
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d02a      	beq.n	8000312 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d126      	bne.n	8000312 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + heapSTRUCT_SIZE, 0, pxLink->xBlockSize - heapSTRUCT_SIZE );
                }
                #endif

                vTaskSuspendAll();
 80002d0:	f000 ff3e 	bl	8001150 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <vPortFree+0x90>)
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	e002      	b.n	80002e6 <vPortFree+0x5a>
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d8f6      	bhi.n	80002e0 <vPortFree+0x54>
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	601a      	str	r2, [r3, #0]
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685a      	ldr	r2, [r3, #4]
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <vPortFree+0x94>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4413      	add	r3, r2
 800030a:	4a05      	ldr	r2, [pc, #20]	; (8000320 <vPortFree+0x94>)
 800030c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
 800030e:	f000 ff2d 	bl	800116c <xTaskResumeAll>
            }
        }
    }
}
 8000312:	bf00      	nop
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20002828 	.word	0x20002828
 8000320:	20000000 	.word	0x20000000

08000324 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <prvHeapInit+0x44>)
 800032c:	f023 0307 	bic.w	r3, r3, #7
 8000330:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000332:	4a0e      	ldr	r2, [pc, #56]	; (800036c <prvHeapInit+0x48>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <prvHeapInit+0x48>)
 800033a:	2200      	movs	r2, #0
 800033c:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <prvHeapInit+0x4c>)
 8000340:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000344:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 8000346:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <prvHeapInit+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000356:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	4a05      	ldr	r2, [pc, #20]	; (8000370 <prvHeapInit+0x4c>)
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	2000002f 	.word	0x2000002f
 800036c:	20002828 	.word	0x20002828
 8000370:	20002830 	.word	0x20002830

08000374 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f103 0208 	add.w	r2, r3, #8
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800038c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f103 0208 	add.w	r2, r3, #8
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f103 0208 	add.w	r2, r3, #8
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr

080003b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80003b2:	b480      	push	{r7}
 80003b4:	b083      	sub	sp, #12
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr

080003ca <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80003ca:	b480      	push	{r7}
 80003cc:	b085      	sub	sp, #20
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
 80003d2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80003e0:	d103      	bne.n	80003ea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	691b      	ldr	r3, [r3, #16]
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	e00c      	b.n	8000404 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3308      	adds	r3, #8
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	e002      	b.n	80003f8 <vListInsert+0x2e>
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	68ba      	ldr	r2, [r7, #8]
 8000400:	429a      	cmp	r2, r3
 8000402:	d2f6      	bcs.n	80003f2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	685a      	ldr	r2, [r3, #4]
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	683a      	ldr	r2, [r7, #0]
 800041e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	1c5a      	adds	r2, r3, #1
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	601a      	str	r2, [r3, #0]
}
 8000430:	bf00      	nop
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800043a:	b480      	push	{r7}
 800043c:	b085      	sub	sp, #20
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	691b      	ldr	r3, [r3, #16]
 8000446:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	6892      	ldr	r2, [r2, #8]
 8000450:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	6852      	ldr	r2, [r2, #4]
 800045a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	429a      	cmp	r2, r3
 8000464:	d103      	bne.n	800046e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	689a      	ldr	r2, [r3, #8]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	1e5a      	subs	r2, r3, #1
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	681b      	ldr	r3, [r3, #0]
}
 8000482:	4618      	mov	r0, r3
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr

0800048c <main>:
xTaskHandle task1_Handler;


volatile QueueHandle_t queue;
int main( void )
 {
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af02      	add	r7, sp, #8
	RCC->APB2ENR = (1<<4);
 8000492:	4b16      	ldr	r3, [pc, #88]	; (80004ec <main+0x60>)
 8000494:	2210      	movs	r2, #16
 8000496:	619a      	str	r2, [r3, #24]
	GPIOC->CRH = (3<<24);
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <main+0x64>)
 800049a:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800049e:	605a      	str	r2, [r3, #4]

	queue = xQueueCreate(5, sizeof(char));
 80004a0:	2200      	movs	r2, #0
 80004a2:	2101      	movs	r1, #1
 80004a4:	2005      	movs	r0, #5
 80004a6:	f000 fa07 	bl	80008b8 <xQueueGenericCreate>
 80004aa:	4603      	mov	r3, r0
 80004ac:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <main+0x68>)
 80004ae:	6013      	str	r3, [r2, #0]
	if(queue != NULL)
 80004b0:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <main+0x68>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d017      	beq.n	80004e8 <main+0x5c>
	{
		xTaskCreate(Sender,"Sender Task" , 300 , NULL , 1 , NULL);
 80004b8:	2300      	movs	r3, #0
 80004ba:	9301      	str	r3, [sp, #4]
 80004bc:	2301      	movs	r3, #1
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	2300      	movs	r3, #0
 80004c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004c6:	490c      	ldr	r1, [pc, #48]	; (80004f8 <main+0x6c>)
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <main+0x70>)
 80004ca:	f000 fcb9 	bl	8000e40 <xTaskCreate>
		xTaskCreate(Receiver , "Receiver Task" , 300 , NULL , 1 , NULL);
 80004ce:	2300      	movs	r3, #0
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	2301      	movs	r3, #1
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	2300      	movs	r3, #0
 80004d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004dc:	4908      	ldr	r1, [pc, #32]	; (8000500 <main+0x74>)
 80004de:	4809      	ldr	r0, [pc, #36]	; (8000504 <main+0x78>)
 80004e0:	f000 fcae 	bl	8000e40 <xTaskCreate>
		vTaskStartScheduler();
 80004e4:	f000 fdf8 	bl	80010d8 <vTaskStartScheduler>
	}

	while(1);
 80004e8:	e7fe      	b.n	80004e8 <main+0x5c>
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40011000 	.word	0x40011000
 80004f4:	2000283c 	.word	0x2000283c
 80004f8:	08001cac 	.word	0x08001cac
 80004fc:	08000509 	.word	0x08000509
 8000500:	08001cb8 	.word	0x08001cb8
 8000504:	0800053d 	.word	0x0800053d

08000508 <Sender>:
	/* Will only get here if there was not enough heap space to create the
	idle task. */
	return 0;
}

void Sender(void *pvParameter){
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]

	char TX_control = '1';
 8000510:	2331      	movs	r3, #49	; 0x31
 8000512:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{

		GPIOC->ODR ^=(1<<14);
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <Sender+0x2c>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <Sender+0x2c>)
 800051a:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800051e:	60d3      	str	r3, [r2, #12]
		xQueueSendToBack(queue , &TX_control, 2000);
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <Sender+0x30>)
 8000522:	6818      	ldr	r0, [r3, #0]
 8000524:	f107 010f 	add.w	r1, r7, #15
 8000528:	2300      	movs	r3, #0
 800052a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800052e:	f000 fa25 	bl	800097c <xQueueGenericSend>
		GPIOC->ODR ^=(1<<14);
 8000532:	e7ef      	b.n	8000514 <Sender+0xc>
 8000534:	40011000 	.word	0x40011000
 8000538:	2000283c 	.word	0x2000283c

0800053c <Receiver>:
	}

}

void Receiver(void *pvParameter){
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

	char RX_control = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{

		xQueueReceive(queue, &RX_control , 2000);
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <Receiver+0x34>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f107 010f 	add.w	r1, r7, #15
 8000550:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fabb 	bl	8000ad0 <xQueueReceive>
		if(RX_control == '1')
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	2b31      	cmp	r3, #49	; 0x31
 800055e:	d1f3      	bne.n	8000548 <Receiver+0xc>
		{
			GPIOC->ODR ^=(1<<14);
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <Receiver+0x38>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <Receiver+0x38>)
 8000566:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800056a:	60d3      	str	r3, [r2, #12]
		xQueueReceive(queue, &RX_control , 2000);
 800056c:	e7ec      	b.n	8000548 <Receiver+0xc>
 800056e:	bf00      	nop
 8000570:	2000283c 	.word	0x2000283c
 8000574:	40011000 	.word	0x40011000

08000578 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	3b04      	subs	r3, #4
 8000588:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000590:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	3b04      	subs	r3, #4
 8000596:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	f023 0201 	bic.w	r2, r3, #1
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	3b04      	subs	r3, #4
 80005a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80005a8:	4a08      	ldr	r2, [pc, #32]	; (80005cc <pxPortInitialiseStack+0x54>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3b14      	subs	r3, #20
 80005b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	3b20      	subs	r3, #32
 80005be:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80005c0:	68fb      	ldr	r3, [r7, #12]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	080005d1 	.word	0x080005d1

080005d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005da:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80005de:	f383 8811 	msr	BASEPRI, r3
 80005e2:	f3bf 8f6f 	isb	sy
 80005e6:	f3bf 8f4f 	dsb	sy
 80005ea:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ec:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80005ee:	bf00      	nop
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0fc      	beq.n	80005f0 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
	...

08000610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <pxCurrentTCBConst2>)
 8000612:	6819      	ldr	r1, [r3, #0]
 8000614:	6808      	ldr	r0, [r1, #0]
 8000616:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800061a:	f380 8809 	msr	PSP, r0
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	f380 8811 	msr	BASEPRI, r0
 800062a:	f04e 0e0d 	orr.w	lr, lr, #13
 800062e:	4770      	bx	lr

08000630 <pxCurrentTCBConst2>:
 8000630:	20002840 	.word	0x20002840
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop

08000638 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000638:	4806      	ldr	r0, [pc, #24]	; (8000654 <prvPortStartFirstTask+0x1c>)
 800063a:	6800      	ldr	r0, [r0, #0]
 800063c:	6800      	ldr	r0, [r0, #0]
 800063e:	f380 8808 	msr	MSP, r0
 8000642:	b662      	cpsie	i
 8000644:	b661      	cpsie	f
 8000646:	f3bf 8f4f 	dsb	sy
 800064a:	f3bf 8f6f 	isb	sy
 800064e:	df00      	svc	0
 8000650:	bf00      	nop
 8000652:	0000      	.short	0x0000
 8000654:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop

0800065c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <xPortStartScheduler+0x38>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <xPortStartScheduler+0x38>)
 8000666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800066a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <xPortStartScheduler+0x38>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a08      	ldr	r2, [pc, #32]	; (8000694 <xPortStartScheduler+0x38>)
 8000672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000676:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000678:	f000 f890 	bl	800079c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <xPortStartScheduler+0x3c>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000682:	f7ff ffd9 	bl	8000638 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000686:	f000 ff63 	bl	8001550 <vTaskSwitchContext>
    prvTaskExitError();
 800068a:	f7ff ffa1 	bl	80005d0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed20 	.word	0xe000ed20
 8000698:	20000004 	.word	0x20000004

0800069c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
        __asm volatile
 80006a2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80006a6:	f383 8811 	msr	BASEPRI, r3
 80006aa:	f3bf 8f6f 	isb	sy
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	607b      	str	r3, [r7, #4]
    }
 80006b4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <vPortEnterCritical+0x30>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <vPortEnterCritical+0x30>)
 80006be:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000004 	.word	0x20000004

080006d0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <vPortExitCritical+0x30>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3b01      	subs	r3, #1
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <vPortExitCritical+0x30>)
 80006de:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <vPortExitCritical+0x30>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d105      	bne.n	80006f4 <vPortExitCritical+0x24>
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80006f2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000004 	.word	0x20000004
	...

08000710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000710:	f3ef 8009 	mrs	r0, PSP
 8000714:	f3bf 8f6f 	isb	sy
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <pxCurrentTCBConst>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000720:	6010      	str	r0, [r2, #0]
 8000722:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000726:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800072a:	f380 8811 	msr	BASEPRI, r0
 800072e:	f000 ff0f 	bl	8001550 <vTaskSwitchContext>
 8000732:	f04f 0000 	mov.w	r0, #0
 8000736:	f380 8811 	msr	BASEPRI, r0
 800073a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800073e:	6819      	ldr	r1, [r3, #0]
 8000740:	6808      	ldr	r0, [r1, #0]
 8000742:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000746:	f380 8809 	msr	PSP, r0
 800074a:	f3bf 8f6f 	isb	sy
 800074e:	4770      	bx	lr

08000750 <pxCurrentTCBConst>:
 8000750:	20002840 	.word	0x20002840
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop

08000758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
        __asm volatile
 800075e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000762:	f383 8811 	msr	BASEPRI, r3
 8000766:	f3bf 8f6f 	isb	sy
 800076a:	f3bf 8f4f 	dsb	sy
 800076e:	607b      	str	r3, [r7, #4]
    }
 8000770:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000772:	f000 fde7 	bl	8001344 <xTaskIncrementTick>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d003      	beq.n	8000784 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <SysTick_Handler+0x40>)
 800077e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	2300      	movs	r3, #0
 8000786:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	f383 8811 	msr	BASEPRI, r3
    }
 800078e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	e000ed04 	.word	0xe000ed04

0800079c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <vPortSetupTimerInterrupt+0x28>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <vPortSetupTimerInterrupt+0x2c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <vPortSetupTimerInterrupt+0x30>)
 80007ae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007b2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <vPortSetupTimerInterrupt+0x28>)
 80007b6:	2207      	movs	r2, #7
 80007b8:	601a      	str	r2, [r3, #0]
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000e010 	.word	0xe000e010
 80007c8:	e000e018 	.word	0xe000e018
 80007cc:	e000e014 	.word	0xe000e014

080007d0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80007da:	2301      	movs	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d05d      	beq.n	80008a4 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d059      	beq.n	80008a4 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007f8:	2100      	movs	r1, #0
 80007fa:	fba3 2302 	umull	r2, r3, r3, r2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d000      	beq.n	8000804 <xQueueGenericReset+0x34>
 8000802:	2101      	movs	r1, #1
 8000804:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000806:	2b00      	cmp	r3, #0
 8000808:	d14c      	bne.n	80008a4 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800080a:	f7ff ff47 	bl	800069c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000816:	68b9      	ldr	r1, [r7, #8]
 8000818:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800081a:	fb01 f303 	mul.w	r3, r1, r3
 800081e:	441a      	add	r2, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	2200      	movs	r2, #0
 8000828:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800083a:	3b01      	subs	r3, #1
 800083c:	68b9      	ldr	r1, [r7, #8]
 800083e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000840:	fb01 f303 	mul.w	r3, r1, r3
 8000844:	441a      	add	r2, r3
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	22ff      	movs	r2, #255	; 0xff
 800084e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	22ff      	movs	r2, #255	; 0xff
 8000856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d114      	bne.n	800088a <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d01a      	beq.n	800089e <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	3310      	adds	r3, #16
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fecb 	bl	8001608 <xTaskRemoveFromEventList>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d012      	beq.n	800089e <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <xQueueGenericReset+0xe4>)
 800087a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	f3bf 8f4f 	dsb	sy
 8000884:	f3bf 8f6f 	isb	sy
 8000888:	e009      	b.n	800089e <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	3310      	adds	r3, #16
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fd70 	bl	8000374 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	3324      	adds	r3, #36	; 0x24
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fd6b 	bl	8000374 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800089e:	f7ff ff17 	bl	80006d0 <vPortExitCritical>
 80008a2:	e001      	b.n	80008a8 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80008a8:	68fb      	ldr	r3, [r7, #12]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	e000ed04 	.word	0xe000ed04

080008b8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af02      	add	r7, sp, #8
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	4613      	mov	r3, r2
 80008c4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d02d      	beq.n	800092c <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80008d0:	2100      	movs	r1, #0
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	fba3 2302 	umull	r2, r3, r3, r2
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d000      	beq.n	80008e0 <xQueueGenericCreate+0x28>
 80008de:	2101      	movs	r1, #1
 80008e0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d122      	bne.n	800092c <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	68ba      	ldr	r2, [r7, #8]
 80008ea:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80008ee:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80008f2:	d81b      	bhi.n	800092c <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	3350      	adds	r3, #80	; 0x50
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fc24 	bl	8000150 <pvPortMalloc>
 8000908:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00d      	beq.n	800092c <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	3350      	adds	r3, #80	; 0x50
 8000918:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800091a:	79fa      	ldrb	r2, [r7, #7]
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	4613      	mov	r3, r2
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	68f8      	ldr	r0, [r7, #12]
 8000928:	f000 f805 	bl	8000936 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800092c:	69fb      	ldr	r3, [r7, #28]
    }
 800092e:	4618      	mov	r0, r3
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b084      	sub	sp, #16
 800093a:	af00      	add	r7, sp, #0
 800093c:	60f8      	str	r0, [r7, #12]
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
 8000942:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d103      	bne.n	8000952 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	e002      	b.n	8000958 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	68ba      	ldr	r2, [r7, #8]
 8000962:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000964:	2101      	movs	r1, #1
 8000966:	69b8      	ldr	r0, [r7, #24]
 8000968:	f7ff ff32 	bl	80007d0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	78fa      	ldrb	r2, [r7, #3]
 8000970:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000992:	f7ff fe83 	bl	800069c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800099a:	6a3b      	ldr	r3, [r7, #32]
 800099c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800099e:	429a      	cmp	r2, r3
 80009a0:	d302      	bcc.n	80009a8 <xQueueGenericSend+0x2c>
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d129      	bne.n	80009fc <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	68b9      	ldr	r1, [r7, #8]
 80009ac:	6a38      	ldr	r0, [r7, #32]
 80009ae:	f000 f931 	bl	8000c14 <prvCopyDataToQueue>
 80009b2:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009b4:	6a3b      	ldr	r3, [r7, #32]
 80009b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d010      	beq.n	80009de <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009bc:	6a3b      	ldr	r3, [r7, #32]
 80009be:	3324      	adds	r3, #36	; 0x24
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fe21 	bl	8001608 <xTaskRemoveFromEventList>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d013      	beq.n	80009f4 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009cc:	4b3f      	ldr	r3, [pc, #252]	; (8000acc <xQueueGenericSend+0x150>)
 80009ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	f3bf 8f4f 	dsb	sy
 80009d8:	f3bf 8f6f 	isb	sy
 80009dc:	e00a      	b.n	80009f4 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d007      	beq.n	80009f4 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80009e4:	4b39      	ldr	r3, [pc, #228]	; (8000acc <xQueueGenericSend+0x150>)
 80009e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	f3bf 8f4f 	dsb	sy
 80009f0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009f4:	f7ff fe6c 	bl	80006d0 <vPortExitCritical>
                return pdPASS;
 80009f8:	2301      	movs	r3, #1
 80009fa:	e063      	b.n	8000ac4 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d103      	bne.n	8000a0a <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a02:	f7ff fe65 	bl	80006d0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e05c      	b.n	8000ac4 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d106      	bne.n	8000a1e <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 febf 	bl	8001798 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a1e:	f7ff fe57 	bl	80006d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a22:	f000 fb95 	bl	8001150 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a26:	f7ff fe39 	bl	800069c <vPortEnterCritical>
 8000a2a:	6a3b      	ldr	r3, [r7, #32]
 8000a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a36:	d103      	bne.n	8000a40 <xQueueGenericSend+0xc4>
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a40:	6a3b      	ldr	r3, [r7, #32]
 8000a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a46:	b25b      	sxtb	r3, r3
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a4c:	d103      	bne.n	8000a56 <xQueueGenericSend+0xda>
 8000a4e:	6a3b      	ldr	r3, [r7, #32]
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a56:	f7ff fe3b 	bl	80006d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a5a:	1d3a      	adds	r2, r7, #4
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 feae 	bl	80017c4 <xTaskCheckForTimeOut>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d124      	bne.n	8000ab8 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a6e:	6a38      	ldr	r0, [r7, #32]
 8000a70:	f000 f9c8 	bl	8000e04 <prvIsQueueFull>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d018      	beq.n	8000aac <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a7a:	6a3b      	ldr	r3, [r7, #32]
 8000a7c:	3310      	adds	r3, #16
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fdaa 	bl	80015dc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a88:	6a38      	ldr	r0, [r7, #32]
 8000a8a:	f000 f953 	bl	8000d34 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a8e:	f000 fb6d 	bl	800116c <xTaskResumeAll>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f47f af7c 	bne.w	8000992 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <xQueueGenericSend+0x150>)
 8000a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	f3bf 8f4f 	dsb	sy
 8000aa6:	f3bf 8f6f 	isb	sy
 8000aaa:	e772      	b.n	8000992 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000aac:	6a38      	ldr	r0, [r7, #32]
 8000aae:	f000 f941 	bl	8000d34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ab2:	f000 fb5b 	bl	800116c <xTaskResumeAll>
 8000ab6:	e76c      	b.n	8000992 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ab8:	6a38      	ldr	r0, [r7, #32]
 8000aba:	f000 f93b 	bl	8000d34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000abe:	f000 fb55 	bl	800116c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000ac2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	e000ed04 	.word	0xe000ed04

08000ad0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000ae4:	f7ff fdda 	bl	800069c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aec:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d01f      	beq.n	8000b34 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6a38      	ldr	r0, [r7, #32]
 8000af8:	f000 f8f6 	bl	8000ce8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	1e5a      	subs	r2, r3, #1
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d00f      	beq.n	8000b2c <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	3310      	adds	r3, #16
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fd79 	bl	8001608 <xTaskRemoveFromEventList>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d007      	beq.n	8000b2c <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000b1c:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <xQueueReceive+0x140>)
 8000b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	f3bf 8f4f 	dsb	sy
 8000b28:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000b2c:	f7ff fdd0 	bl	80006d0 <vPortExitCritical>
                return pdPASS;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e069      	b.n	8000c08 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d103      	bne.n	8000b42 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000b3a:	f7ff fdc9 	bl	80006d0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e062      	b.n	8000c08 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d106      	bne.n	8000b56 <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fe23 	bl	8001798 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000b52:	2301      	movs	r3, #1
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000b56:	f7ff fdbb 	bl	80006d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000b5a:	f000 faf9 	bl	8001150 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000b5e:	f7ff fd9d 	bl	800069c <vPortEnterCritical>
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b6e:	d103      	bne.n	8000b78 <xQueueReceive+0xa8>
 8000b70:	6a3b      	ldr	r3, [r7, #32]
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b78:	6a3b      	ldr	r3, [r7, #32]
 8000b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b7e:	b25b      	sxtb	r3, r3
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b84:	d103      	bne.n	8000b8e <xQueueReceive+0xbe>
 8000b86:	6a3b      	ldr	r3, [r7, #32]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b8e:	f7ff fd9f 	bl	80006d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b92:	1d3a      	adds	r2, r7, #4
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fe12 	bl	80017c4 <xTaskCheckForTimeOut>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d123      	bne.n	8000bee <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ba6:	6a38      	ldr	r0, [r7, #32]
 8000ba8:	f000 f916 	bl	8000dd8 <prvIsQueueEmpty>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d017      	beq.n	8000be2 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	3324      	adds	r3, #36	; 0x24
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fd0e 	bl	80015dc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000bc0:	6a38      	ldr	r0, [r7, #32]
 8000bc2:	f000 f8b7 	bl	8000d34 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000bc6:	f000 fad1 	bl	800116c <xTaskResumeAll>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d189      	bne.n	8000ae4 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <xQueueReceive+0x140>)
 8000bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	f3bf 8f4f 	dsb	sy
 8000bdc:	f3bf 8f6f 	isb	sy
 8000be0:	e780      	b.n	8000ae4 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000be2:	6a38      	ldr	r0, [r7, #32]
 8000be4:	f000 f8a6 	bl	8000d34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000be8:	f000 fac0 	bl	800116c <xTaskResumeAll>
 8000bec:	e77a      	b.n	8000ae4 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000bee:	6a38      	ldr	r0, [r7, #32]
 8000bf0:	f000 f8a0 	bl	8000d34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000bf4:	f000 faba 	bl	800116c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000bf8:	6a38      	ldr	r0, [r7, #32]
 8000bfa:	f000 f8ed 	bl	8000dd8 <prvIsQueueEmpty>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f43f af6f 	beq.w	8000ae4 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000c06:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	e000ed04 	.word	0xe000ed04

08000c14 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c28:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10d      	bne.n	8000c4e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14d      	bne.n	8000cd6 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fec6 	bl	80019d0 <xTaskPriorityDisinherit>
 8000c44:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	e043      	b.n	8000cd6 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d119      	bne.n	8000c88 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	6858      	ldr	r0, [r3, #4]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	68b9      	ldr	r1, [r7, #8]
 8000c60:	f001 f80a 	bl	8001c78 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	441a      	add	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d32b      	bcc.n	8000cd6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	e026      	b.n	8000cd6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	68d8      	ldr	r0, [r3, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	461a      	mov	r2, r3
 8000c92:	68b9      	ldr	r1, [r7, #8]
 8000c94:	f000 fff0 	bl	8001c78 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	425b      	negs	r3, r3
 8000ca2:	441a      	add	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	425b      	negs	r3, r3
 8000cbe:	441a      	add	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d105      	bne.n	8000cd6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000cde:	697b      	ldr	r3, [r7, #20]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d018      	beq.n	8000d2c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	441a      	add	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d303      	bcc.n	8000d1c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68d9      	ldr	r1, [r3, #12]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	461a      	mov	r2, r3
 8000d26:	6838      	ldr	r0, [r7, #0]
 8000d28:	f000 ffa6 	bl	8001c78 <memcpy>
    }
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000d3c:	f7ff fcae 	bl	800069c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d46:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d48:	e011      	b.n	8000d6e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d012      	beq.n	8000d78 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3324      	adds	r3, #36	; 0x24
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fc56 	bl	8001608 <xTaskRemoveFromEventList>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000d62:	f000 fd79 	bl	8001858 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	dce9      	bgt.n	8000d4a <prvUnlockQueue+0x16>
 8000d76:	e000      	b.n	8000d7a <prvUnlockQueue+0x46>
                    break;
 8000d78:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	22ff      	movs	r2, #255	; 0xff
 8000d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000d82:	f7ff fca5 	bl	80006d0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000d86:	f7ff fc89 	bl	800069c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d90:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d92:	e011      	b.n	8000db8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d012      	beq.n	8000dc2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3310      	adds	r3, #16
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 fc31 	bl	8001608 <xTaskRemoveFromEventList>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000dac:	f000 fd54 	bl	8001858 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	dce9      	bgt.n	8000d94 <prvUnlockQueue+0x60>
 8000dc0:	e000      	b.n	8000dc4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000dc2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	22ff      	movs	r2, #255	; 0xff
 8000dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000dcc:	f7ff fc80 	bl	80006d0 <vPortExitCritical>
}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000de0:	f7ff fc5c 	bl	800069c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e001      	b.n	8000df6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000df6:	f7ff fc6b 	bl	80006d0 <vPortExitCritical>

    return xReturn;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e0c:	f7ff fc46 	bl	800069c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d102      	bne.n	8000e22 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	e001      	b.n	8000e26 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e26:	f7ff fc53 	bl	80006d0 <vPortExitCritical>

    return xReturn;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	; 0x30
 8000e44:	af04      	add	r7, sp, #16
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff f97b 	bl	8000150 <pvPortMalloc>
 8000e5a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d013      	beq.n	8000e8a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000e62:	205c      	movs	r0, #92	; 0x5c
 8000e64:	f7ff f974 	bl	8000150 <pvPortMalloc>
 8000e68:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d008      	beq.n	8000e82 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000e70:	225c      	movs	r2, #92	; 0x5c
 8000e72:	2100      	movs	r1, #0
 8000e74:	69f8      	ldr	r0, [r7, #28]
 8000e76:	f000 fed2 	bl	8001c1e <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e80:	e005      	b.n	8000e8e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000e82:	6978      	ldr	r0, [r7, #20]
 8000e84:	f7ff fa02 	bl	800028c <vPortFree>
 8000e88:	e001      	b.n	8000e8e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d013      	beq.n	8000ebc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000e94:	88fa      	ldrh	r2, [r7, #6]
 8000e96:	2300      	movs	r3, #0
 8000e98:	9303      	str	r3, [sp, #12]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f000 f80e 	bl	8000ecc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000eb0:	69f8      	ldr	r0, [r7, #28]
 8000eb2:	f000 f87b 	bl	8000fac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	e002      	b.n	8000ec2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000ec2:	69bb      	ldr	r3, [r7, #24]
    }
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000edc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	21a5      	movs	r1, #165	; 0xa5
 8000ee6:	f000 fe9a 	bl	8001c1e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	f023 0307 	bic.w	r3, r3, #7
 8000f02:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d01e      	beq.n	8000f48 <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	e012      	b.n	8000f36 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	4413      	add	r3, r2
 8000f16:	7819      	ldrb	r1, [r3, #0]
 8000f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3334      	adds	r3, #52	; 0x34
 8000f20:	460a      	mov	r2, r1
 8000f22:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	4413      	add	r3, r2
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	3301      	adds	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d9e9      	bls.n	8000f10 <prvInitialiseNewTask+0x44>
 8000f3c:	e000      	b.n	8000f40 <prvInitialiseNewTask+0x74>
            {
                break;
 8000f3e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	d901      	bls.n	8000f52 <prvInitialiseNewTask+0x86>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000f4e:	2305      	movs	r3, #5
 8000f50:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f54:	6a3a      	ldr	r2, [r7, #32]
 8000f56:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5a:	6a3a      	ldr	r2, [r7, #32]
 8000f5c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f60:	3304      	adds	r3, #4
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fa25 	bl	80003b2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6a:	3318      	adds	r3, #24
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fa20 	bl	80003b2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f76:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f78:	6a3b      	ldr	r3, [r7, #32]
 8000f7a:	f1c3 0206 	rsb	r2, r3, #6
 8000f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f80:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	68f9      	ldr	r1, [r7, #12]
 8000f8c:	6938      	ldr	r0, [r7, #16]
 8000f8e:	f7ff faf3 	bl	8000578 <pxPortInitialiseStack>
 8000f92:	4602      	mov	r2, r0
 8000f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f96:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <prvInitialiseNewTask+0xd8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fa2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000fa4:	bf00      	nop
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000fb4:	f7ff fb72 	bl	800069c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000fb8:	4b40      	ldr	r3, [pc, #256]	; (80010bc <prvAddNewTaskToReadyList+0x110>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a3f      	ldr	r2, [pc, #252]	; (80010bc <prvAddNewTaskToReadyList+0x110>)
 8000fc0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000fc2:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <prvAddNewTaskToReadyList+0x114>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d109      	bne.n	8000fde <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000fca:	4a3d      	ldr	r2, [pc, #244]	; (80010c0 <prvAddNewTaskToReadyList+0x114>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <prvAddNewTaskToReadyList+0x110>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d110      	bne.n	8000ffa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000fd8:	f000 fc62 	bl	80018a0 <prvInitialiseTaskLists>
 8000fdc:	e00d      	b.n	8000ffa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000fde:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <prvAddNewTaskToReadyList+0x118>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d109      	bne.n	8000ffa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000fe6:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <prvAddNewTaskToReadyList+0x114>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d802      	bhi.n	8000ffa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000ff4:	4a32      	ldr	r2, [pc, #200]	; (80010c0 <prvAddNewTaskToReadyList+0x114>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000ffa:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <prvAddNewTaskToReadyList+0x11c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <prvAddNewTaskToReadyList+0x11c>)
 8001002:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001004:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <prvAddNewTaskToReadyList+0x11c>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001010:	2201      	movs	r2, #1
 8001012:	409a      	lsls	r2, r3
 8001014:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <prvAddNewTaskToReadyList+0x120>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4313      	orrs	r3, r2
 800101a:	4a2c      	ldr	r2, [pc, #176]	; (80010cc <prvAddNewTaskToReadyList+0x120>)
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001022:	492b      	ldr	r1, [pc, #172]	; (80010d0 <prvAddNewTaskToReadyList+0x124>)
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	3304      	adds	r3, #4
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	3204      	adds	r2, #4
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	1d1a      	adds	r2, r3, #4
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <prvAddNewTaskToReadyList+0x124>)
 8001062:	441a      	add	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	615a      	str	r2, [r3, #20]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800106c:	4918      	ldr	r1, [pc, #96]	; (80010d0 <prvAddNewTaskToReadyList+0x124>)
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	1c59      	adds	r1, r3, #1
 800107c:	4814      	ldr	r0, [pc, #80]	; (80010d0 <prvAddNewTaskToReadyList+0x124>)
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4403      	add	r3, r0
 8001088:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800108a:	f7ff fb21 	bl	80006d0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <prvAddNewTaskToReadyList+0x118>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00e      	beq.n	80010b4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <prvAddNewTaskToReadyList+0x114>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d207      	bcs.n	80010b4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <prvAddNewTaskToReadyList+0x128>)
 80010a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	f3bf 8f4f 	dsb	sy
 80010b0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2000292c 	.word	0x2000292c
 80010c0:	20002840 	.word	0x20002840
 80010c4:	20002938 	.word	0x20002938
 80010c8:	20002948 	.word	0x20002948
 80010cc:	20002934 	.word	0x20002934
 80010d0:	20002844 	.word	0x20002844
 80010d4:	e000ed04 	.word	0xe000ed04

080010d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <vTaskStartScheduler+0x5c>)
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	2300      	movs	r3, #0
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2300      	movs	r3, #0
 80010e8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010ec:	4912      	ldr	r1, [pc, #72]	; (8001138 <vTaskStartScheduler+0x60>)
 80010ee:	4813      	ldr	r0, [pc, #76]	; (800113c <vTaskStartScheduler+0x64>)
 80010f0:	f7ff fea6 	bl	8000e40 <xTaskCreate>
 80010f4:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d115      	bne.n	8001128 <vTaskStartScheduler+0x50>
        __asm volatile
 80010fc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001100:	f383 8811 	msr	BASEPRI, r3
 8001104:	f3bf 8f6f 	isb	sy
 8001108:	f3bf 8f4f 	dsb	sy
 800110c:	603b      	str	r3, [r7, #0]
    }
 800110e:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <vTaskStartScheduler+0x68>)
 8001112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001116:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <vTaskStartScheduler+0x6c>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <vTaskStartScheduler+0x70>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001124:	f7ff fa9a 	bl	800065c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <vTaskStartScheduler+0x74>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20002950 	.word	0x20002950
 8001138:	08001cc8 	.word	0x08001cc8
 800113c:	08001871 	.word	0x08001871
 8001140:	2000294c 	.word	0x2000294c
 8001144:	20002938 	.word	0x20002938
 8001148:	20002930 	.word	0x20002930
 800114c:	20000008 	.word	0x20000008

08001150 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <vTaskSuspendAll+0x18>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	4a03      	ldr	r2, [pc, #12]	; (8001168 <vTaskSuspendAll+0x18>)
 800115c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20002954 	.word	0x20002954

0800116c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800117a:	f7ff fa8f 	bl	800069c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800117e:	4b68      	ldr	r3, [pc, #416]	; (8001320 <xTaskResumeAll+0x1b4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3b01      	subs	r3, #1
 8001184:	4a66      	ldr	r2, [pc, #408]	; (8001320 <xTaskResumeAll+0x1b4>)
 8001186:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001188:	4b65      	ldr	r3, [pc, #404]	; (8001320 <xTaskResumeAll+0x1b4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	f040 80c0 	bne.w	8001312 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001192:	4b64      	ldr	r3, [pc, #400]	; (8001324 <xTaskResumeAll+0x1b8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 80bb 	beq.w	8001312 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800119c:	e08a      	b.n	80012b4 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800119e:	4b62      	ldr	r3, [pc, #392]	; (8001328 <xTaskResumeAll+0x1bc>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	6a12      	ldr	r2, [r2, #32]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	69d2      	ldr	r2, [r2, #28]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3318      	adds	r3, #24
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d103      	bne.n	80011d4 <xTaskResumeAll+0x68>
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	6a1a      	ldr	r2, [r3, #32]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	2200      	movs	r2, #0
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1e5a      	subs	r2, r3, #1
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	68d2      	ldr	r2, [r2, #12]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	6892      	ldr	r2, [r2, #8]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3304      	adds	r3, #4
 8001206:	429a      	cmp	r2, r3
 8001208:	d103      	bne.n	8001212 <xTaskResumeAll+0xa6>
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	1e5a      	subs	r2, r3, #1
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	2201      	movs	r2, #1
 8001228:	409a      	lsls	r2, r3
 800122a:	4b40      	ldr	r3, [pc, #256]	; (800132c <xTaskResumeAll+0x1c0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4313      	orrs	r3, r2
 8001230:	4a3e      	ldr	r2, [pc, #248]	; (800132c <xTaskResumeAll+0x1c0>)
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001238:	493d      	ldr	r1, [pc, #244]	; (8001330 <xTaskResumeAll+0x1c4>)
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	3304      	adds	r3, #4
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	3204      	adds	r2, #4
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	1d1a      	adds	r2, r3, #4
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4a2e      	ldr	r2, [pc, #184]	; (8001330 <xTaskResumeAll+0x1c4>)
 8001278:	441a      	add	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	615a      	str	r2, [r3, #20]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001282:	492b      	ldr	r1, [pc, #172]	; (8001330 <xTaskResumeAll+0x1c4>)
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	1c59      	adds	r1, r3, #1
 8001292:	4827      	ldr	r0, [pc, #156]	; (8001330 <xTaskResumeAll+0x1c4>)
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4403      	add	r3, r0
 800129e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <xTaskResumeAll+0x1c8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d302      	bcc.n	80012b4 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <xTaskResumeAll+0x1cc>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <xTaskResumeAll+0x1bc>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f47f af70 	bne.w	800119e <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80012c4:	f000 fb6a 	bl	800199c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <xTaskResumeAll+0x1d0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d010      	beq.n	80012f6 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80012d4:	f000 f836 	bl	8001344 <xTaskIncrementTick>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <xTaskResumeAll+0x1cc>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f1      	bne.n	80012d4 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <xTaskResumeAll+0x1d0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <xTaskResumeAll+0x1cc>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d009      	beq.n	8001312 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80012fe:	2301      	movs	r3, #1
 8001300:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <xTaskResumeAll+0x1d4>)
 8001304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	f3bf 8f4f 	dsb	sy
 800130e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001312:	f7ff f9dd 	bl	80006d0 <vPortExitCritical>

    return xAlreadyYielded;
 8001316:	693b      	ldr	r3, [r7, #16]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20002954 	.word	0x20002954
 8001324:	2000292c 	.word	0x2000292c
 8001328:	200028ec 	.word	0x200028ec
 800132c:	20002934 	.word	0x20002934
 8001330:	20002844 	.word	0x20002844
 8001334:	20002840 	.word	0x20002840
 8001338:	20002940 	.word	0x20002940
 800133c:	2000293c 	.word	0x2000293c
 8001340:	e000ed04 	.word	0xe000ed04

08001344 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800134e:	4b75      	ldr	r3, [pc, #468]	; (8001524 <xTaskIncrementTick+0x1e0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 80dc 	bne.w	8001510 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001358:	4b73      	ldr	r3, [pc, #460]	; (8001528 <xTaskIncrementTick+0x1e4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001360:	4a71      	ldr	r2, [pc, #452]	; (8001528 <xTaskIncrementTick+0x1e4>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d110      	bne.n	800138e <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 800136c:	4b6f      	ldr	r3, [pc, #444]	; (800152c <xTaskIncrementTick+0x1e8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	4b6f      	ldr	r3, [pc, #444]	; (8001530 <xTaskIncrementTick+0x1ec>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6d      	ldr	r2, [pc, #436]	; (800152c <xTaskIncrementTick+0x1e8>)
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4a6d      	ldr	r2, [pc, #436]	; (8001530 <xTaskIncrementTick+0x1ec>)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b6c      	ldr	r3, [pc, #432]	; (8001534 <xTaskIncrementTick+0x1f0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	4a6b      	ldr	r2, [pc, #428]	; (8001534 <xTaskIncrementTick+0x1f0>)
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	f000 fb07 	bl	800199c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800138e:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <xTaskIncrementTick+0x1f4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	429a      	cmp	r2, r3
 8001396:	f0c0 80a6 	bcc.w	80014e6 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800139a:	4b64      	ldr	r3, [pc, #400]	; (800152c <xTaskIncrementTick+0x1e8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d104      	bne.n	80013ae <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013a4:	4b64      	ldr	r3, [pc, #400]	; (8001538 <xTaskIncrementTick+0x1f4>)
 80013a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013aa:	601a      	str	r2, [r3, #0]
                    break;
 80013ac:	e09b      	b.n	80014e6 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013ae:	4b5f      	ldr	r3, [pc, #380]	; (800152c <xTaskIncrementTick+0x1e8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d203      	bcs.n	80013ce <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80013c6:	4a5c      	ldr	r2, [pc, #368]	; (8001538 <xTaskIncrementTick+0x1f4>)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80013cc:	e08b      	b.n	80014e6 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68d2      	ldr	r2, [r2, #12]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	6892      	ldr	r2, [r2, #8]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	3304      	adds	r3, #4
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d103      	bne.n	80013fc <xTaskIncrementTick+0xb8>
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	1e5a      	subs	r2, r3, #1
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	2b00      	cmp	r3, #0
 8001412:	d01e      	beq.n	8001452 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	6a12      	ldr	r2, [r2, #32]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	69d2      	ldr	r2, [r2, #28]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	3318      	adds	r3, #24
 8001436:	429a      	cmp	r2, r3
 8001438:	d103      	bne.n	8001442 <xTaskIncrementTick+0xfe>
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	6a1a      	ldr	r2, [r3, #32]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	2200      	movs	r2, #0
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	1e5a      	subs	r2, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001456:	2201      	movs	r2, #1
 8001458:	409a      	lsls	r2, r3
 800145a:	4b38      	ldr	r3, [pc, #224]	; (800153c <xTaskIncrementTick+0x1f8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4313      	orrs	r3, r2
 8001460:	4a36      	ldr	r2, [pc, #216]	; (800153c <xTaskIncrementTick+0x1f8>)
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001468:	4935      	ldr	r1, [pc, #212]	; (8001540 <xTaskIncrementTick+0x1fc>)
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	3304      	adds	r3, #4
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	3204      	adds	r2, #4
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1d1a      	adds	r2, r3, #4
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4a26      	ldr	r2, [pc, #152]	; (8001540 <xTaskIncrementTick+0x1fc>)
 80014a8:	441a      	add	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	615a      	str	r2, [r3, #20]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b2:	4923      	ldr	r1, [pc, #140]	; (8001540 <xTaskIncrementTick+0x1fc>)
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	1c59      	adds	r1, r3, #1
 80014c2:	481f      	ldr	r0, [pc, #124]	; (8001540 <xTaskIncrementTick+0x1fc>)
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4403      	add	r3, r0
 80014ce:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <xTaskIncrementTick+0x200>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	429a      	cmp	r2, r3
 80014dc:	f67f af5d 	bls.w	800139a <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 80014e0:	2301      	movs	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80014e4:	e759      	b.n	800139a <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <xTaskIncrementTick+0x200>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ec:	4914      	ldr	r1, [pc, #80]	; (8001540 <xTaskIncrementTick+0x1fc>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d901      	bls.n	8001502 <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 80014fe:	2301      	movs	r3, #1
 8001500:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <xTaskIncrementTick+0x204>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 800150a:	2301      	movs	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	e004      	b.n	800151a <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <xTaskIncrementTick+0x208>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	4a0d      	ldr	r2, [pc, #52]	; (800154c <xTaskIncrementTick+0x208>)
 8001518:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800151a:	69fb      	ldr	r3, [r7, #28]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20002954 	.word	0x20002954
 8001528:	20002930 	.word	0x20002930
 800152c:	200028e4 	.word	0x200028e4
 8001530:	200028e8 	.word	0x200028e8
 8001534:	20002944 	.word	0x20002944
 8001538:	2000294c 	.word	0x2000294c
 800153c:	20002934 	.word	0x20002934
 8001540:	20002844 	.word	0x20002844
 8001544:	20002840 	.word	0x20002840
 8001548:	20002940 	.word	0x20002940
 800154c:	2000293c 	.word	0x2000293c

08001550 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <vTaskSwitchContext+0x78>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800155e:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <vTaskSwitchContext+0x7c>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001564:	e02a      	b.n	80015bc <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <vTaskSwitchContext+0x7c>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <vTaskSwitchContext+0x80>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	fab3 f383 	clz	r3, r3
 8001578:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	f1c3 031f 	rsb	r3, r3, #31
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <vTaskSwitchContext+0x84>)
 800158e:	4413      	add	r3, r2
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	3308      	adds	r3, #8
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d104      	bne.n	80015b2 <vTaskSwitchContext+0x62>
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <vTaskSwitchContext+0x88>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20002954 	.word	0x20002954
 80015cc:	20002940 	.word	0x20002940
 80015d0:	20002934 	.word	0x20002934
 80015d4:	20002844 	.word	0x20002844
 80015d8:	20002840 	.word	0x20002840

080015dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <vTaskPlaceOnEventList+0x28>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3318      	adds	r3, #24
 80015ec:	4619      	mov	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7fe feeb 	bl	80003ca <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80015f4:	2101      	movs	r1, #1
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f000 fa6c 	bl	8001ad4 <prvAddCurrentTaskToDelayedList>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20002840 	.word	0x20002840

08001608 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	6a12      	ldr	r2, [r2, #32]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	69d2      	ldr	r2, [r2, #28]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	3318      	adds	r3, #24
 800163a:	429a      	cmp	r2, r3
 800163c:	d103      	bne.n	8001646 <xTaskRemoveFromEventList+0x3e>
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	6a1a      	ldr	r2, [r3, #32]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2200      	movs	r2, #0
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	1e5a      	subs	r2, r3, #1
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <xTaskRemoveFromEventList+0x178>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d15e      	bne.n	800171c <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	68d2      	ldr	r2, [r2, #12]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	6892      	ldr	r2, [r2, #8]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	3304      	adds	r3, #4
 8001680:	429a      	cmp	r2, r3
 8001682:	d103      	bne.n	800168c <xTaskRemoveFromEventList+0x84>
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	1e5a      	subs	r2, r3, #1
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	2201      	movs	r2, #1
 80016a2:	409a      	lsls	r2, r3
 80016a4:	4b37      	ldr	r3, [pc, #220]	; (8001784 <xTaskRemoveFromEventList+0x17c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	4a36      	ldr	r2, [pc, #216]	; (8001784 <xTaskRemoveFromEventList+0x17c>)
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b2:	4935      	ldr	r1, [pc, #212]	; (8001788 <xTaskRemoveFromEventList+0x180>)
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	3304      	adds	r3, #4
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	3204      	adds	r2, #4
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	1d1a      	adds	r2, r3, #4
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4a25      	ldr	r2, [pc, #148]	; (8001788 <xTaskRemoveFromEventList+0x180>)
 80016f2:	441a      	add	r2, r3
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	615a      	str	r2, [r3, #20]
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016fc:	4922      	ldr	r1, [pc, #136]	; (8001788 <xTaskRemoveFromEventList+0x180>)
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	1c59      	adds	r1, r3, #1
 800170c:	481e      	ldr	r0, [pc, #120]	; (8001788 <xTaskRemoveFromEventList+0x180>)
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4403      	add	r3, r0
 8001718:	6019      	str	r1, [r3, #0]
 800171a:	e01b      	b.n	8001754 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <xTaskRemoveFromEventList+0x184>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	61da      	str	r2, [r3, #28]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	621a      	str	r2, [r3, #32]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	3218      	adds	r2, #24
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f103 0218 	add.w	r2, r3, #24
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	4a11      	ldr	r2, [pc, #68]	; (800178c <xTaskRemoveFromEventList+0x184>)
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <xTaskRemoveFromEventList+0x184>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <xTaskRemoveFromEventList+0x184>)
 8001752:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <xTaskRemoveFromEventList+0x188>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	429a      	cmp	r2, r3
 8001760:	d905      	bls.n	800176e <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001762:	2301      	movs	r3, #1
 8001764:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <xTaskRemoveFromEventList+0x18c>)
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e001      	b.n	8001772 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001772:	69fb      	ldr	r3, [r7, #28]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3724      	adds	r7, #36	; 0x24
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20002954 	.word	0x20002954
 8001784:	20002934 	.word	0x20002934
 8001788:	20002844 	.word	0x20002844
 800178c:	200028ec 	.word	0x200028ec
 8001790:	20002840 	.word	0x20002840
 8001794:	20002940 	.word	0x20002940

08001798 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <vTaskInternalSetTimeOutState+0x24>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <vTaskInternalSetTimeOutState+0x28>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	605a      	str	r2, [r3, #4]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20002944 	.word	0x20002944
 80017c0:	20002930 	.word	0x20002930

080017c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 80017ce:	f7fe ff65 	bl	800069c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <xTaskCheckForTimeOut+0x8c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017ea:	d102      	bne.n	80017f2 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e026      	b.n	8001840 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <xTaskCheckForTimeOut+0x90>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d00a      	beq.n	8001814 <xTaskCheckForTimeOut+0x50>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d305      	bcc.n	8001814 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001808:	2301      	movs	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e015      	b.n	8001840 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	429a      	cmp	r2, r3
 800181c:	d20b      	bcs.n	8001836 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad2      	subs	r2, r2, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffb4 	bl	8001798 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e004      	b.n	8001840 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800183c:	2301      	movs	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001840:	f7fe ff46 	bl	80006d0 <vPortExitCritical>

    return xReturn;
 8001844:	697b      	ldr	r3, [r7, #20]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20002930 	.word	0x20002930
 8001854:	20002944 	.word	0x20002944

08001858 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <vTaskMissedYield+0x14>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20002940 	.word	0x20002940

08001870 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001878:	f000 f852 	bl	8001920 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <prvIdleTask+0x28>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d9f9      	bls.n	8001878 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <prvIdleTask+0x2c>)
 8001886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	f3bf 8f4f 	dsb	sy
 8001890:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001894:	e7f0      	b.n	8001878 <prvIdleTask+0x8>
 8001896:	bf00      	nop
 8001898:	20002844 	.word	0x20002844
 800189c:	e000ed04 	.word	0xe000ed04

080018a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	e00c      	b.n	80018c6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <prvInitialiseTaskLists+0x60>)
 80018b8:	4413      	add	r3, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fd5a 	bl	8000374 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3301      	adds	r3, #1
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d9ef      	bls.n	80018ac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <prvInitialiseTaskLists+0x64>)
 80018ce:	f7fe fd51 	bl	8000374 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80018d2:	480d      	ldr	r0, [pc, #52]	; (8001908 <prvInitialiseTaskLists+0x68>)
 80018d4:	f7fe fd4e 	bl	8000374 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80018d8:	480c      	ldr	r0, [pc, #48]	; (800190c <prvInitialiseTaskLists+0x6c>)
 80018da:	f7fe fd4b 	bl	8000374 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80018de:	480c      	ldr	r0, [pc, #48]	; (8001910 <prvInitialiseTaskLists+0x70>)
 80018e0:	f7fe fd48 	bl	8000374 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80018e4:	480b      	ldr	r0, [pc, #44]	; (8001914 <prvInitialiseTaskLists+0x74>)
 80018e6:	f7fe fd45 	bl	8000374 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <prvInitialiseTaskLists+0x78>)
 80018ec:	4a05      	ldr	r2, [pc, #20]	; (8001904 <prvInitialiseTaskLists+0x64>)
 80018ee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <prvInitialiseTaskLists+0x7c>)
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <prvInitialiseTaskLists+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20002844 	.word	0x20002844
 8001904:	200028bc 	.word	0x200028bc
 8001908:	200028d0 	.word	0x200028d0
 800190c:	200028ec 	.word	0x200028ec
 8001910:	20002900 	.word	0x20002900
 8001914:	20002918 	.word	0x20002918
 8001918:	200028e4 	.word	0x200028e4
 800191c:	200028e8 	.word	0x200028e8

08001920 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001926:	e019      	b.n	800195c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001928:	f7fe feb8 	bl	800069c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <prvCheckTasksWaitingTermination+0x50>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3304      	adds	r3, #4
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fd7e 	bl	800043a <uxListRemove>
                --uxCurrentNumberOfTasks;
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <prvCheckTasksWaitingTermination+0x54>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3b01      	subs	r3, #1
 8001944:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <prvCheckTasksWaitingTermination+0x54>)
 8001946:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <prvCheckTasksWaitingTermination+0x58>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3b01      	subs	r3, #1
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <prvCheckTasksWaitingTermination+0x58>)
 8001950:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001952:	f7fe febd 	bl	80006d0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f810 	bl	800197c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <prvCheckTasksWaitingTermination+0x58>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1e1      	bne.n	8001928 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20002900 	.word	0x20002900
 8001974:	2000292c 	.word	0x2000292c
 8001978:	20002914 	.word	0x20002914

0800197c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fc7f 	bl	800028c <vPortFree>
            vPortFree( pxTCB );
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7fe fc7c 	bl	800028c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <prvResetNextTaskUnblockTime+0x2c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d104      	bne.n	80019b4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <prvResetNextTaskUnblockTime+0x30>)
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019b0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80019b2:	e005      	b.n	80019c0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <prvResetNextTaskUnblockTime+0x2c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a03      	ldr	r2, [pc, #12]	; (80019cc <prvResetNextTaskUnblockTime+0x30>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	200028e4 	.word	0x200028e4
 80019cc:	2000294c 	.word	0x2000294c

080019d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d06c      	beq.n	8001ac0 <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ea:	1e5a      	subs	r2, r3, #1
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d061      	beq.n	8001ac0 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d15d      	bne.n	8001ac0 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	3304      	adds	r3, #4
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fd16 	bl	800043a <uxListRemove>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	2201      	movs	r2, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <xTaskPriorityDisinherit+0xfc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4013      	ands	r3, r2
 8001a26:	4a29      	ldr	r2, [pc, #164]	; (8001acc <xTaskPriorityDisinherit+0xfc>)
 8001a28:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	f1c3 0206 	rsb	r2, r3, #6
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	2201      	movs	r2, #1
 8001a44:	409a      	lsls	r2, r3
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <xTaskPriorityDisinherit+0xfc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <xTaskPriorityDisinherit+0xfc>)
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a54:	491e      	ldr	r1, [pc, #120]	; (8001ad0 <xTaskPriorityDisinherit+0x100>)
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	3304      	adds	r3, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	60da      	str	r2, [r3, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	3204      	adds	r2, #4
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1d1a      	adds	r2, r3, #4
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4a0f      	ldr	r2, [pc, #60]	; (8001ad0 <xTaskPriorityDisinherit+0x100>)
 8001a94:	441a      	add	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	615a      	str	r2, [r3, #20]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a9e:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <xTaskPriorityDisinherit+0x100>)
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	1c59      	adds	r1, r3, #1
 8001aae:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <xTaskPriorityDisinherit+0x100>)
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4403      	add	r3, r0
 8001aba:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001abc:	2301      	movs	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001ac0:	697b      	ldr	r3, [r7, #20]
    }
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20002934 	.word	0x20002934
 8001ad0:	20002844 	.word	0x20002844

08001ad4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001ade:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ae4:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fca5 	bl	800043a <uxListRemove>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10b      	bne.n	8001b0e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001af6:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	2201      	movs	r2, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <prvAddCurrentTaskToDelayedList+0xec>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	4a2d      	ldr	r2, [pc, #180]	; (8001bc0 <prvAddCurrentTaskToDelayedList+0xec>)
 8001b0c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b14:	d124      	bne.n	8001b60 <prvAddCurrentTaskToDelayedList+0x8c>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d021      	beq.n	8001b60 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b1c:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	6892      	ldr	r2, [r2, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	3204      	adds	r2, #4
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	1d1a      	adds	r2, r3, #4
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b50:	615a      	str	r2, [r3, #20]
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	4a1a      	ldr	r2, [pc, #104]	; (8001bc4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001b5e:	e026      	b.n	8001bae <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d209      	bcs.n	8001b8c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3304      	adds	r3, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4610      	mov	r0, r2
 8001b86:	f7fe fc20 	bl	80003ca <vListInsert>
}
 8001b8a:	e010      	b.n	8001bae <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <prvAddCurrentTaskToDelayedList+0xf8>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3304      	adds	r3, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4610      	mov	r0, r2
 8001b9a:	f7fe fc16 	bl	80003ca <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d202      	bcs.n	8001bae <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001ba8:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6013      	str	r3, [r2, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20002930 	.word	0x20002930
 8001bbc:	20002840 	.word	0x20002840
 8001bc0:	20002934 	.word	0x20002934
 8001bc4:	20002918 	.word	0x20002918
 8001bc8:	200028e8 	.word	0x200028e8
 8001bcc:	200028e4 	.word	0x200028e4
 8001bd0:	2000294c 	.word	0x2000294c

08001bd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd4:	f7ff f92e 	bl	8000e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd8:	480b      	ldr	r0, [pc, #44]	; (8001c08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bda:	490c      	ldr	r1, [pc, #48]	; (8001c0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bdc:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be0:	e002      	b.n	8001be8 <LoopCopyDataInit>

08001be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be6:	3304      	adds	r3, #4

08001be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bec:	d3f9      	bcc.n	8001be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bee:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bf0:	4c09      	ldr	r4, [pc, #36]	; (8001c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf4:	e001      	b.n	8001bfa <LoopFillZerobss>

08001bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf8:	3204      	adds	r2, #4

08001bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bfc:	d3fb      	bcc.n	8001bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bfe:	f000 f817 	bl	8001c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c02:	f7fe fc43 	bl	800048c <main>
  bx lr
 8001c06:	4770      	bx	lr
  ldr r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c10:	08001cd8 	.word	0x08001cd8
  ldr r2, =_sbss
 8001c14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c18:	20002958 	.word	0x20002958

08001c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC1_2_IRQHandler>

08001c1e <memset>:
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4402      	add	r2, r0
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d100      	bne.n	8001c28 <memset+0xa>
 8001c26:	4770      	bx	lr
 8001c28:	f803 1b01 	strb.w	r1, [r3], #1
 8001c2c:	e7f9      	b.n	8001c22 <memset+0x4>
	...

08001c30 <__libc_init_array>:
 8001c30:	b570      	push	{r4, r5, r6, lr}
 8001c32:	2600      	movs	r6, #0
 8001c34:	4d0c      	ldr	r5, [pc, #48]	; (8001c68 <__libc_init_array+0x38>)
 8001c36:	4c0d      	ldr	r4, [pc, #52]	; (8001c6c <__libc_init_array+0x3c>)
 8001c38:	1b64      	subs	r4, r4, r5
 8001c3a:	10a4      	asrs	r4, r4, #2
 8001c3c:	42a6      	cmp	r6, r4
 8001c3e:	d109      	bne.n	8001c54 <__libc_init_array+0x24>
 8001c40:	f000 f828 	bl	8001c94 <_init>
 8001c44:	2600      	movs	r6, #0
 8001c46:	4d0a      	ldr	r5, [pc, #40]	; (8001c70 <__libc_init_array+0x40>)
 8001c48:	4c0a      	ldr	r4, [pc, #40]	; (8001c74 <__libc_init_array+0x44>)
 8001c4a:	1b64      	subs	r4, r4, r5
 8001c4c:	10a4      	asrs	r4, r4, #2
 8001c4e:	42a6      	cmp	r6, r4
 8001c50:	d105      	bne.n	8001c5e <__libc_init_array+0x2e>
 8001c52:	bd70      	pop	{r4, r5, r6, pc}
 8001c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c58:	4798      	blx	r3
 8001c5a:	3601      	adds	r6, #1
 8001c5c:	e7ee      	b.n	8001c3c <__libc_init_array+0xc>
 8001c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c62:	4798      	blx	r3
 8001c64:	3601      	adds	r6, #1
 8001c66:	e7f2      	b.n	8001c4e <__libc_init_array+0x1e>
 8001c68:	08001cd0 	.word	0x08001cd0
 8001c6c:	08001cd0 	.word	0x08001cd0
 8001c70:	08001cd0 	.word	0x08001cd0
 8001c74:	08001cd4 	.word	0x08001cd4

08001c78 <memcpy>:
 8001c78:	440a      	add	r2, r1
 8001c7a:	4291      	cmp	r1, r2
 8001c7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001c80:	d100      	bne.n	8001c84 <memcpy+0xc>
 8001c82:	4770      	bx	lr
 8001c84:	b510      	push	{r4, lr}
 8001c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c8a:	4291      	cmp	r1, r2
 8001c8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c90:	d1f9      	bne.n	8001c86 <memcpy+0xe>
 8001c92:	bd10      	pop	{r4, pc}

08001c94 <_init>:
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c96:	bf00      	nop
 8001c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9a:	bc08      	pop	{r3}
 8001c9c:	469e      	mov	lr, r3
 8001c9e:	4770      	bx	lr

08001ca0 <_fini>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	bf00      	nop
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr
